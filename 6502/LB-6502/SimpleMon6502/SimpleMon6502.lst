ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : SimpleMon6502.s
Current file: SimpleMon6502.s

000000r 1               ; SimpleMon6502 - Simple Monitor for the 6502
000000r 1               ; COMMAND LINE DRIVEN
000000r 1               ; 	I = TEST INPUT STRING
000000r 1               ; 	D = DUMP HEX MEMORY BLOCK
000000r 1               ; SOME OF THE CODE WAS WRITTEN BY AI - COPILOT
000000r 1               ; BUILD PROCESS USES CC65 TOOLCHAIN UNDER WINDOWS
000000r 1               ;	https://cc65.github.io/doc/
000000r 1               ; ca65 WAS USED TO ASSEMBLE THE PROGRAM
000000r 1               ;	ca65 SimpleMon6502.s -o SimpleMon6502.o -l
000000r 1               ; LD65 WAS USED TO LINK THE PROGRAM
000000r 1               ;	ld65 -C LB65022.cfg SimpleMon6502.o -o SimpleMon6502.bin
000000r 1               ; SREC_CAT WAS USED TO CREATE A .HEX FILE
000000r 1               ;	srec_cat.exe SimpleMon6502.bin -binary -o SimpleMon6502.hex -Intel
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 1               
000000r 1               STACK_TOP		:= $FC
000000r 1               
000000r 1               ; HARDWARE LOCATIONS
000000r 1               ACIA := $A000
000000r 1               ACIAControl := ACIA+0
000000r 1               ACIAStatus := ACIA+0
000000r 1               ACIAData := ACIA+1
000000r 1               
000000r 1               ; PAGE ZERO LOCATIONS USED
000000r 1               PRSTRL := $10	; POINTER TO PRINT STRING
000000r 1               PRSTRH := $11
000000r 1               INSTRL := $12	; POINTER TO INPUT STRING
000000r 1               INSTRH := $13
000000r 1               SCR16L := $14	; 16-BIT SCRATCH LOCATION OFTEN USED TO PASS ADDRESSES
000000r 1               SCR16H := $15
000000r 1               
000000r 1               ; RAM LOCATIONS
000000r 1               RAMSTART	:= $0
000000r 1               INSTRBUFFER	:= $400	; RESERVE 64 BYTES FOR INPUT STRING $400-$43F
000000r 1               VAL16L		:= $440	; 16-BIT VALUE
000000r 1               VAL16H		:= $441
000000r 1               VAL8		:= $442	; 8-BIT VALUE
000000r 1               
000000r 1               ; VARIOUS DEFINES
000000r 1               CR := $0D ; COMMAND TERMINATION
000000r 1               LF := $0A
000000r 1               
000000r 1               .segment "CODE"
000000r 1               .org $C000
00C000  1               
00C000  1               ; MACRO TO PASS A 16-BIT ADDRESS TO A FUNCTION AND CALL THE FUNCTION
00C000  1               ;	A REGISTER IS THE UPPER 8-BITS OF THE ADDRESS
00C000  1               ;	Y REGISTER IS THE LOWER 8-BITS OF THE ADDRESS
00C000  1               ;	FNC_NAME IS THE FUNCTION THAT IS CALLED
00C000  1               .macro CALLPASS16 FNC_NAME, ADDR16
00C000  1               	PHA					; SAVE A ON STACK
00C000  1               	TYA					; SAVE Y ON STACK
00C000  1               	PHA
00C000  1               	LDA	#ADDR16/256		; A IS THE UPPER 8-BITS OF THE ADDRESS
00C000  1               	LDY	#ADDR16&255		; Y IS THE LOWER 8-BITS OF THE ADDRESS
00C000  1               	JSR FNC_NAME
00C000  1               	PLA					; RESTORE Y
00C000  1               	TAY
00C000  1               	PLA					; RESTORE A
00C000  1               .endmacro
00C000  1               
00C000  1               .macro SETUPSCRADDR VAL32
00C000  1               	PHA
00C000  1               	LDA	#VAL32&255
00C000  1               	STA SCR16L
00C000  1               	LDA	#VAL32/256
00C000  1               	STA SCR16H
00C000  1               	PLA
00C000  1               .endmacro
00C000  1               
00C000  1               .macro PUSHY
00C000  1               	TYA
00C000  1               	PHA
00C000  1               .endmacro
00C000  1               
00C000  1               .macro PULLY
00C000  1               	PLA
00C000  1               	TAY
00C000  1               .endmacro
00C000  1               
00C000  1               Reset:
00C000  1  D8           	CLD
00C001  1  78           	SEI
00C002  1  A2 FF        	LDX     #$FF
00C004  1  9A           	TXS
00C005  1               BEGIN_RAM_TEST:
00C005  1               ; TEST FIRST LOCATION
00C005  1  A9 55        	LDA	#$55
00C007  1  85 00        	STA	$0
00C009  1  A5 00        	LDA $0
00C00B  1  C9 55        	CMP #$55
00C00D  1  D0 58        	BNE	RAMFAIL
00C00F  1  A9 AA        	LDA	#$AA
00C011  1  85 00        	STA	$0
00C013  1  A5 00        	LDA $0
00C015  1  C9 AA        	CMP #$AA
00C017  1  D0 4E        	BNE	RAMFAIL
00C019  1               ; TEST 2ND LOCATION
00C019  1  A9 55        	LDA	#$55
00C01B  1  85 01        	STA	$1
00C01D  1  A5 01        	LDA $1
00C01F  1  C9 55        	CMP #$55
00C021  1  D0 44        	BNE	RAMFAIL
00C023  1  A9 AA        	LDA	#$AA
00C025  1  85 01        	STA	$1
00C027  1  A5 01        	LDA $1
00C029  1  C9 AA        	CMP #$AA
00C02B  1  D0 3A        	BNE	RAMFAIL
00C02D  1               ; TEST PAGE ZERO RAM
00C02D  1               ;
00C02D  1  A2 02        	LDX	#2
00C02F  1               FILLRAMTST:
00C02F  1  8A           	TXA
00C030  1  95 00        	STA RAMSTART,X
00C032  1  E8           	INX
00C033  1  E0 00        	CPX	#0
00C035  1  D0 F8        	BNE FILLRAMTST
00C037  1               CHKFILL:
00C037  1  A2 02        	LDX	#2
00C039  1               CHKNXT:
00C039  1  8A           	TXA
00C03A  1  D5 00        	CMP	RAMSTART,X
00C03C  1  D0 29        	BNE	RAMFAIL
00C03E  1  E8           	INX
00C03F  1  E0 00        	CPX	#0
00C041  1  D0 F6        	BNE	CHKNXT
00C043  1               ; FILL PAGE ZERO
00C043  1               FILLPAGEZERO:
00C043  1  A9 00        	LDA #$00
00C045  1  A2 00        	LDX	#00
00C047  1               LOOPFILLPAGEZERO:
00C047  1  95 00        	STA	$0,X
00C049  1  E8           	INX
00C04A  1  E0 00        	CPX	#0
00C04C  1  D0 F9        	BNE LOOPFILLPAGEZERO
00C04E  1               ; FILL THE REST OF THE RAM
00C04E  1               FILLRAM:
00C04E  1  A9 00        	LDA	#$00
00C050  1  85 00        	STA	$0
00C052  1  A2 01        	LDX	#1			; PAGE NUMBER, START AT PAGE 1
00C054  1  A9 00        	LDA #$00		; FILL VALUE
00C056  1               FILLPAGESLOOP:
00C056  1  86 01        	STX	$1
00C058  1               FILLCURRENTPAGE:
00C058  1  91 00        	STA	($0),Y
00C05A  1  C8           	INY
00C05B  1  C0 00        	CPY	#$00
00C05D  1  D0 F9        	BNE	FILLCURRENTPAGE
00C05F  1               ; INCREMENT PAGE COUNT
00C05F  1  E8           	INX
00C060  1  E0 50        	CPX	#80
00C062  1  D0 F2        	BNE	FILLPAGESLOOP
00C064  1               
00C064  1               ; JUMP TO OK
00C064  1  4C 6A C0     	JMP	RAMOK
00C067  1               ; RAMFAIL
00C067  1               RAMFAIL:
00C067  1  4C 67 C0     	JMP	RAMFAIL
00C06A  1               
00C06A  1               RAMOK:
00C06A  1               ; Setup ACIA
00C06A  1  20 59 C2     	JSR INITACIA
00C06D  1  48 98 48 A9  	CALLPASS16 PRINTSTR, CRLFMsg
00C071  1  C2 A0 FD 20  
00C075  1  EC C1 68 A8  
00C07A  1               ; SETUP INPUT BUFFER POINTER
00C07A  1  A9 04        	LDA	#INSTRBUFFER/256		; A IS THE UPPER 8-BITS OF THE ADDRESS
00C07C  1  85 13        	STA INSTRH
00C07E  1  A9 00        	LDA	#INSTRBUFFER&255		; Y IS THE LOWER 8-BITS OF THE ADDRESS
00C080  1  85 12        	STA	INSTRL
00C082  1               ; Display startup message
00C082  1  48 98 48 A9  	CALLPASS16 PRINTSTR, StartupMsg
00C086  1  C2 A0 80 20  
00C08A  1  EC C1 68 A8  
00C08F  1               ; INTERPRETER LOOP
00C08F  1  AD 01 A0     	LDA	ACIAData			; flush input
00C092  1               LOOP1:
00C092  1  20 D2 C1     	JSR INPUTSTR
00C095  1  AD 00 04     	LDA	INSTRBUFFER
00C098  1               CHKA:
00C098  1  C9 49        	CMP	#'I'
00C09A  1  D0 06        	BNE	SKIPA
00C09C  1  20 02 C2     	JSR INSTRTST
00C09F  1  4C F1 C0     	JMP	ENDLOOP
00C0A2  1               SKIPA:
00C0A2  1  C9 44        	CMP #'D'
00C0A4  1  D0 06        	BNE SKIPB
00C0A6  1  20 F4 C0     	JSR DUMPRTN
00C0A9  1  4C F1 C0     	JMP ENDLOOP
00C0AC  1               SKIPB:
00C0AC  1  C9 48        	CMP #'H'
00C0AE  1  D0 31        	BNE SKIPC
00C0B0  1  48 A9 00 85  	SETUPSCRADDR TestValu8			; POINTS TO THE STRING
00C0B4  1  14 A9 C3 85  
00C0B8  1  15 68        
00C0BA  1  20 67 C1     	JSR CONVERT_HEX_STRING_TO_BYTE
00C0BD  1  C9 5A        	CMP	#$5A
00C0BF  1  D0 10        	BNE HCONVERR
00C0C1  1  48 98 48 A9  	CALLPASS16 PRINTSTR, FailMsg
00C0C5  1  C3 A0 03 20  
00C0C9  1  EC C1 68 A8  
00C0CE  1  4C F1 C0     	JMP ENDLOOP
00C0D1  1               HCONVERR:
00C0D1  1  48 98 48 A9  	CALLPASS16 PRINTSTR, PassMsg
00C0D5  1  C3 A0 0C 20  
00C0D9  1  EC C1 68 A8  
00C0DE  1  4C F1 C0     	JMP ENDLOOP
00C0E1  1               SKIPC:
00C0E1  1               ; UNKNOWN COMMAND
00C0E1  1  48 98 48 A9  	CALLPASS16 PRINTSTR, HelpMsg
00C0E5  1  C2 A0 98 20  
00C0E9  1  EC C1 68 A8  
00C0EE  1  4C F1 C0     	JMP ENDLOOP
00C0F1  1               ENDLOOP:
00C0F1  1  4C 92 C0         JMP	LOOP1
00C0F4  1               
00C0F4  1               ; DUMPRTN - DUMP A PAGE OF MEMORY TO THE SCREEN
00C0F4  1               ; EXAMPLE: D C0XX - DUMP BLOCK $C000-$C0FF
00C0F4  1               ; CONVERT_HEX_STRING_TO_BYTE
00C0F4  1               ;	The address of the string is in SCR16L/SCR16H.
00C0F4  1               DUMPRTN:
00C0F4  1  A9 02        	LDA	#$02		; Start of address part of input string
00C0F6  1  85 14        	STA	SCR16L
00C0F8  1  A9 04        	LDA	#$04
00C0FA  1  85 15        	STA	SCR16H
00C0FC  1  20 67 C1     	JSR	CONVERT_HEX_STRING_TO_BYTE
00C0FF  1  AD 42 04     	LDA	VAL8
00C102  1  85 15        	STA	SCR16H
00C104  1  A9 00        	LDA #0
00C106  1  85 14        	STA	SCR16L
00C108  1  48 98 48 A9  	CALLPASS16 PRINTSTR, HeaderDumpMsg
00C10C  1  C3 A0 15 20  
00C110  1  EC C1 68 A8  
00C115  1  A0 00        	LDY #0			; Y COUNTS THE BUFFER OFFSET
00C117  1               LOOPB2:				; WRITE OUT THE ADDRESS
00C117  1  98           	TYA
00C118  1  48           	PHA
00C119  1  A5 15        	LDA	SCR16H
00C11B  1  20 3A C2     	JSR PRHEXSTR
00C11E  1  68           	PLA
00C11F  1  A8           	TAY
00C120  1  20 3A C2     	JSR PRHEXSTR
00C123  1  A9 20        	LDA #' '
00C125  1  20 71 C2     	JSR	PUTCHAR
00C128  1  A2 00        	LDX #0			; X IS CHARS PER LINE COUNTER
00C12A  1               LPBRTN:
00C12A  1  B1 14        	LDA	(SCR16L),Y
00C12C  1  C8           	INY
00C12D  1  C0 00        	CPY #00
00C12F  1  F0 20        	BEQ	ENDRTNB
00C131  1  20 3A C2     	JSR PRHEXSTR
00C134  1  A9 20        	LDA #' '
00C136  1  20 71 C2     	JSR	PUTCHAR
00C139  1  E8           	INX
00C13A  1  E0 10        	CPX	#16
00C13C  1  D0 EC        	BNE	LPBRTN
00C13E  1  48 98 48 A9  	CALLPASS16 PRINTSTR, CRLFMsg
00C142  1  C2 A0 FD 20  
00C146  1  EC C1 68 A8  
00C14B  1  A9 00        	LDA	#0
00C14D  1  F0 C8        	BEQ	LOOPB2
00C14F  1  D0 D9        	BNE LPBRTN
00C151  1               ENDRTNB:
00C151  1  A9 FF        	LDA	#$FF
00C153  1  A8           	TAY
00C154  1  B1 14        	LDA	(SCR16L),Y
00C156  1  20 3A C2     	JSR PRHEXSTR
00C159  1  48 98 48 A9  	CALLPASS16 PRINTSTR, CRLFMsg
00C15D  1  C2 A0 FD 20  
00C161  1  EC C1 68 A8  
00C166  1  60           	RTS
00C167  1               
00C167  1               ; CONVERT_HEX_STRING_TO_BYTE subroutine converts a null-terminated string of
00C167  1               ;	hexadecimal digits to an 8-bit value.
00C167  1               ; The address of the string is in SCR16L/SCR16H.
00C167  1               ; The subroutine processes each character, converts it from ASCII hex to binary,
00C167  1               ;	shifts the current result left by 4 bits (to make room for the next nibble),
00C167  1               ;	and combines it with the new digit.
00C167  1               ; If a non-hex character is encountered, the subroutine returns an error value ($99).
00C167  1               CONVERT_HEX_STRING_TO_BYTE:
00C167  1  A9 00        		LDA     #$00           ; Clear A to start with 0
00C169  1  8D 42 04             STA     VAL8           ; Clear the result variable
00C16C  1  AD 02 04             LDA		INSTRBUFFER+2
00C16F  1               ;		JSR		PUTCHAR
00C16F  1  20 86 C1             JSR     HEX_TO_BIN     ; Convert ASCII hex digit to binary
00C172  1  0A                   ASL                    ; Shift left to make room for the next nibble
00C173  1  0A                   ASL
00C174  1  0A                   ASL
00C175  1  0A                   ASL
00C176  1  8D 42 04             STA     VAL8           ; Store the new result
00C179  1  AD 03 04             LDA		INSTRBUFFER+3
00C17C  1               ;		JSR		PUTCHAR
00C17C  1  20 86 C1             JSR     HEX_TO_BIN     ; Convert ASCII hex digit to binary
00C17F  1  0D 42 04     		ORA		VAL8
00C182  1  8D 42 04     		STA		VAL8
00C185  1               ;		JSR		PRHEXSTR
00C185  1  60           		RTS
00C186  1               
00C186  1               HEX_TO_BIN:
00C186  1  C9 30                CMP     #'0'           ; Compare with '0'
00C188  1  90 18                BCC     HEX_ERROR1     ; If less than '0', it's an error
00C18A  1  C9 3A                CMP     #'9'+1         ; Compare with '9'+1
00C18C  1  90 0C                BCC     HEX_NUM		   ; If equal to or less then '9', it's a number
00C18E  1  C9 41                CMP     #'A'           ; Compare with 'A'
00C190  1  90 20                BCC     HEX_ERROR2     ; If less than 'A', it's an error
00C192  1  C9 47                CMP     #'F'+1         ; Compare with 'F'+1
00C194  1  B0 2C                BCS     HEX_ERROR3     ; If greater than 'F', it's an error
00C196  1  38           		SEC
00C197  1  E9 37                SBC     #'A'-10        ; Convert 'A'-'F' to 10-15
00C199  1  60                   RTS
00C19A  1               
00C19A  1               HEX_NUM:
00C19A  1  38                   SEC
00C19B  1  E9 30        		SBC     #'0'           ; Convert '0'-'9' to 0-9
00C19D  1  60                   RTS
00C19E  1               
00C19E  1               CONVERT_DONE:
00C19E  1  AD 42 04             LDA     VAL8           ; Load the final result into A
00C1A1  1  60                   RTS                    ; Return from subroutine
00C1A2  1               
00C1A2  1               HEX_ERROR1:
00C1A2  1  48 98 48 A9  		CALLPASS16 PRINTSTR, HexErr1Msg
00C1A6  1  C3 A0 4D 20  
00C1AA  1  EC C1 68 A8  
00C1AF  1  A9 99                LDA     #$99           ; Load error value into A
00C1B1  1  60                   RTS                    ; Return from subroutine
00C1B2  1               
00C1B2  1               HEX_ERROR2:
00C1B2  1  48 98 48 A9  		CALLPASS16 PRINTSTR, HexErr2Msg
00C1B6  1  C3 A0 5F 20  
00C1BA  1  EC C1 68 A8  
00C1BF  1  A9 99                LDA     #$99           ; Load error value into A
00C1C1  1  60                   RTS                    ; Return from subroutine
00C1C2  1               
00C1C2  1               HEX_ERROR3:
00C1C2  1  48 98 48 A9  		CALLPASS16 PRINTSTR, HexErr3Msg
00C1C6  1  C3 A0 71 20  
00C1CA  1  EC C1 68 A8  
00C1CF  1  A9 99                LDA     #$99           ; Load error value into A
00C1D1  1  60                   RTS                    ; Return from subroutine
00C1D2  1               
00C1D2  1               ; READ STRING INTO BUFFER
00C1D2  1               ;
00C1D2  1               INPUTSTR:
00C1D2  1  A0 00        	LDY #0
00C1D4  1               LOOPISTR:
00C1D4  1  20 64 C2     	JSR GETCHAR			; READ THE CHARACTER
00C1D7  1  20 71 C2     	JSR	PUTCHAR			; ECHO OUT THE CHARACTER
00C1DA  1  C9 0D        	CMP	#CR
00C1DC  1  F0 09        	BEQ DONEIS
00C1DE  1  C9 0A        	CMP	#LF
00C1E0  1  F0 05        	BEQ DONEIS
00C1E2  1  91 12        	STA	(INSTRL),Y
00C1E4  1  C8           	INY
00C1E5  1  D0 ED        	BNE	LOOPISTR
00C1E7  1               DONEIS:
00C1E7  1  A9 00        	LDA	#0				; NULL TERMINATE STRING
00C1E9  1  91 12        	STA	(INSTRL),Y
00C1EB  1  60           	RTS
00C1EC  1               
00C1EC  1               ; PRINTSTR - PRINT STRING
00C1EC  1               ; INPUT POINTER TO STRING IN PAGE ZERO
00C1EC  1               ;	A IS UPPER 8-BITS OF ADDRESS
00C1EC  1               ;	Y IS LOWER 8-BITS OF ADDRESS
00C1EC  1               PRINTSTR:
00C1EC  1  48           	PHA
00C1ED  1  85 11        	STA PRSTRH
00C1EF  1  98           	TYA
00C1F0  1  85 10        	STA PRSTRL
00C1F2  1  A0 00        	LDY	#0
00C1F4  1               LPPRSTR:
00C1F4  1  B1 10        	LDA	(PRSTRL),Y
00C1F6  1  C9 00        	CMP #0
00C1F8  1  F0 06        	BEQ DONESTR		; If the character is null (end of string), exit
00C1FA  1  20 71 C2     	JSR	PUTCHAR		; Call subroutine to print the character
00C1FD  1  C8           	INY				; Increment X to point to the next character
00C1FE  1  D0 F4        	BNE	LPPRSTR		; Repeat the loop (always true since X is 8-bit)
00C200  1               DONESTR:
00C200  1  68           	PLA
00C201  1  60           	RTS
00C202  1               
00C202  1               INSTRTST:
00C202  1  48 98 48 A9  	CALLPASS16 PRINTSTR, InputStrMsg
00C206  1  C2 A0 DB 20  
00C20A  1  EC C1 68 A8  
00C20F  1  20 D2 C1     	JSR INPUTSTR	; READ IN THE STRING
00C212  1  48 98 48 A9  	CALLPASS16 PRINTSTR, InputStrWasMsg
00C216  1  C2 A0 E9 20  
00C21A  1  EC C1 68 A8  
00C21F  1  48 98 48 A9  	CALLPASS16 PRINTSTR, INSTRBUFFER
00C223  1  04 A0 00 20  
00C227  1  EC C1 68 A8  
00C22C  1  48 98 48 A9  	CALLPASS16 PRINTSTR, CRLFMsg
00C230  1  C2 A0 FD 20  
00C234  1  EC C1 68 A8  
00C239  1  60           	RTS
00C23A  1               
00C23A  1               PRHEXSTR:
00C23A  1  48                   PHA                    ; Push A onto the stack to save its value
00C23B  1  48                   PHA                    ; Push A onto the stack to save its value
00C23C  1  4A                   LSR                    ; Shift right to get the high nibble
00C23D  1  4A                   LSR
00C23E  1  4A                   LSR
00C23F  1  4A                   LSR
00C240  1  20 4B C2             JSR     PRINT_NIBBLE   ; Print the high nibble
00C243  1  68                   PLA                    ; Pull A from the stack to restore its value
00C244  1  29 0F                AND     #$0F           ; Mask out the high nibble
00C246  1  20 4B C2             JSR     PRINT_NIBBLE   ; Print the low nibble
00C249  1  68                   PLA                    ; Pull A from the stack to restore its value
00C24A  1  60                   RTS                    ; Return from subroutine
00C24B  1               
00C24B  1               PRINT_NIBBLE:
00C24B  1  48                   PHA                    ; Push A onto the stack to save its value
00C24C  1  C9 0A                CMP     #$0A           ; Compare with 10
00C24E  1  90 02                BCC     PRINT_DIGIT    ; If less than 10, it's a digit
00C250  1  69 06                ADC     #$06           ; If 10 or more, convert to ASCII letter (A-F)
00C252  1               PRINT_DIGIT:
00C252  1  69 30                ADC     #$30           ; Convert to ASCII digit
00C254  1  20 71 C2             JSR     PUTCHAR	       ; Print the character
00C257  1  68                   PLA                    ; Pull A from the stack to restore its value
00C258  1  60                   RTS                    ; Return from subroutine
00C259  1               
00C259  1               ; INITIALIZE THE ACIA
00C259  1               INITACIA:
00C259  1  A9 03        	LDA 	#$03		; Master Reset ACIA
00C25B  1  8D 00 A0     	STA	ACIAControl
00C25E  1  A9 15        	LDA 	#$15		; Set ACIA baud rate, word size and Rx interrupt (to control RTS)
00C260  1  8D 00 A0     	STA	ACIAControl
00C263  1  60           	RTS
00C264  1               
00C264  1               ; GET A CHARACTER FROM THE ACIA
00C264  1               ; RETURN CHAR IN A REGISTER
00C264  1               GETCHAR:
00C264  1  AD 00 A0     	LDA	ACIAStatus
00C267  1  29 01        	AND #1
00C269  1  C9 01        	CMP #1
00C26B  1  D0 F7        	BNE GETCHAR
00C26D  1  AD 01 A0     	LDA	ACIAData
00C270  1  60           	RTS
00C271  1               
00C271  1               ; PUT A CHARACTER FROM THE A REGISTER OUT THE ACIA
00C271  1               PUTCHAR:
00C271  1  48           	PHA
00C272  1               LPUTC:
00C272  1  AD 00 A0     	LDA	ACIAStatus
00C275  1  29 02        	AND #2
00C277  1  C9 02        	CMP #2
00C279  1  D0 F7        	BNE LPUTC
00C27B  1  68           	PLA
00C27C  1  8D 01 A0     	STA ACIAData
00C27F  1  60           	RTS
00C280  1               
00C280  1               ; Strings kept in ROM (constant values)
00C280  1               StartupMsg:
00C280  1  0D 0A 53 69  	.byte	$0D,$0A,"Simple Monitor 6502",$0D,$0A,$00
00C284  1  6D 70 6C 65  
00C288  1  20 4D 6F 6E  
00C298  1               HelpMsg:
00C298  1  49 2D 54 45  	.byte	"I-TEST INPUT STRING, D-DUMP HEX, H-TEST HEX STR, ?-DETAILED HELP",$0D,$0A,$00
00C29C  1  53 54 20 49  
00C2A0  1  4E 50 55 54  
00C2DB  1               InputStrMsg:
00C2DB  1  49 6E 70 75  	.byte	"Input string:",$00
00C2DF  1  74 20 73 74  
00C2E3  1  72 69 6E 67  
00C2E9  1               InputStrWasMsg:
00C2E9  1  0D 0A 49 6E  	.byte	$0D,$0A,"Input string was:",$00
00C2ED  1  70 75 74 20  
00C2F1  1  73 74 72 69  
00C2FD  1               CRLFMsg:
00C2FD  1  0D 0A 00     	.byte	$0D,$0A,$00
00C300  1               TestValu8:
00C300  1  35 41 00     	.byte	"5A",$00
00C303  1               FailMsg:
00C303  1  0D 0A 46 41  	.byte	$0D,$0A,"FAIL",$0D,$0A,$00
00C307  1  49 4C 0D 0A  
00C30B  1  00           
00C30C  1               PassMsg:
00C30C  1  0D 0A 50 41  	.byte	$0D,$0A,"PASS",$0D,$0A,$00
00C310  1  53 53 0D 0A  
00C314  1  00           
00C315  1               HeaderDumpMsg:
00C315  1  0D 0A 41 44  	.byte	$0D,$0A,"ADDR 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F",$0D,$0A,$00
00C319  1  44 52 20 30  
00C31D  1  20 20 31 20  
00C34D  1               HexErr1Msg:
00C34D  1  0D 0A 48 65  	.byte	$0D,$0A,"Hex Error (1)",$0D,$0A,$00
00C351  1  78 20 45 72  
00C355  1  72 6F 72 20  
00C35F  1               HexErr2Msg:
00C35F  1  0D 0A 48 65  	.byte	$0D,$0A,"Hex Error (2)",$0D,$0A,$00
00C363  1  78 20 45 72  
00C367  1  72 6F 72 20  
00C371  1               HexErr3Msg:
00C371  1  0D 0A 48 65  	.byte	$0D,$0A,"Hex Error (3)",$0D,$0A,$00
00C375  1  78 20 45 72  
00C379  1  72 6F 72 20  
00C383  1               
00C383  1               .segment "VECTS"
00C383  1               .org $FFFA
00FFFA  1  00 C0        	.word	Reset		; NMI
00FFFC  1  00 C0        	.word	Reset		; RESET
00FFFE  1  00 C0        	.word	Reset		; IRQ
00FFFE  1               
