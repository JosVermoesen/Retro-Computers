diff -r -N -uw cc65-2.13.3.orig/asminc/errno.inc cc65-2.13.3/asminc/errno.inc
--- cc65-2.13.3.orig/asminc/errno.inc	2009-07-27 14:48:03.000000000 -0400
+++ cc65-2.13.3/asminc/errno.inc	2012-07-31 16:59:57.000000000 -0400
@@ -5,7 +5,7 @@
 ; Variables and functions
 
         .global         __errno, __oserror
-        .global         __maperrno, __osmaperrno
+        .global         __maperrno
         .global         __seterrno
         .global         oserrcheck
         .global         seterrnofromoserror
diff -r -N -uw cc65-2.13.3.orig/include/apple1.h cc65-2.13.3/include/apple1.h
--- cc65-2.13.3.orig/include/apple1.h	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/include/apple1.h	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,63 @@
+/*****************************************************************************/
+/*                                                                           */
+/*                                 apple1.h				     */
+/*                                                                           */
+/*                   Apple I system specific definitions		     */
+/*                                                                           */
+/*                                                                           */
+/*                                                                           */
+/* (C) 2000  Kevin Ruland, <kevin@rodin.wustl.edu>                           */
+/* (C) 2003  Ullrich von Bassewitz, <uz@cc65.org>                            */
+/*                                                                           */
+/*                                                                           */
+/* This software is provided 'as-is', without any expressed or implied       */
+/* warranty.  In no event will the authors be held liable for any damages    */
+/* arising from the use of this software.                                    */
+/*                                                                           */
+/* Permission is granted to anyone to use this software for any purpose,     */
+/* including commercial applications, and to alter it and redistribute it    */
+/* freely, subject to the following restrictions:                            */
+/*                                                                           */
+/* 1. The origin of this software must not be misrepresented; you must not   */
+/*    claim that you wrote the original software. If you use this software   */
+/*    in a product, an acknowledgment in the product documentation would be  */
+/*    appreciated but is not required.                                       */
+/* 2. Altered source versions must be plainly marked as such, and must not   */
+/*    be misrepresented as being the original software.                      */
+/* 3. This notice may not be removed or altered from any source              */
+/*    distribution.                                                          */
+/*                                                                           */
+/*****************************************************************************/
+
+
+
+#ifndef _APPLE1_H
+#define _APPLE1_H
+
+/* Check for errors */
+#if !defined(__APPLE1__) && !defined(__REPLICA1__)
+#  error This module may only be used when compiling for the Apple 1!
+#endif
+
+/*****************************************************************************/
+/*                                   Data				     */
+/*****************************************************************************/
+
+/*****************************************************************************/
+/*                                   H/W				     */
+/*****************************************************************************/
+
+#define	KBD	(*(unsigned char *)0xD010)	/* Read keyboard and clear strobe */
+#define	KBDRDY	(*(unsigned char *)0xD011)	/* Keyboard strobe */
+#define	VID	(*(unsigned char *)0xD012)	/* Write to video hardware */
+
+/*****************************************************************************/
+/*                                   Code				     */
+/*****************************************************************************/
+
+unsigned int __fastcall__ keypressed(void);
+unsigned int __fastcall__ readkey(void);
+void __fastcall__ writevid(unsigned char);
+
+/* End of apple1.h */
+#endif
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/apple1.inc cc65-2.13.3/libsrc/apple1/apple1.inc
--- cc65-2.13.3.orig/libsrc/apple1/apple1.inc	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/apple1.inc	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,30 @@
+;-----------------------------------------------------------------------------
+; Zero page locations
+
+IRQ	:=	$00	; IRQ handler jumps to $0000
+NMI	:=	$0F	; NMI handler jumps to $000F
+
+;-----------------------------------------------------------------------------
+; Hardware
+
+; Keyboard input
+KBD     :=      $D010	; Read keyboard
+KBDRDY	:=      $D011	; Clear keyboard strobe
+
+;Video output
+VID	:=	$D012	; Write to video hardware
+
+;-----------------------------------------------------------------------------
+; RAM addresses
+	.ifdef	__APPLE1__
+RAMTOP	:=	$EFFF
+	.endif
+	.ifdef	__REPLICA1__
+RAMTOP	:=	$7FFF
+	.endif
+
+;-----------------------------------------------------------------------------
+; ROM routines
+
+RESET	:=	$FF00	; RESET entrypoint into monitor
+ECHO	:=	$FFEF	; Echo character in A to video hardware
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/basicio.s cc65-2.13.3/libsrc/apple1/basicio.s
--- cc65-2.13.3.orig/libsrc/apple1/basicio.s	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/basicio.s	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,37 @@
+;
+; David Schmenk, 6/11/2006
+;
+
+.export		_keypressed, _readkey, _writevid
+
+.include	"apple1.inc"
+
+;
+; unsigned int __fastcall__ keypressed(void);
+;
+
+_keypressed:
+	ldx	#$00
+	lda	KBDRDY
+	rol
+	txa
+	rol
+	rts
+	
+;
+; unsigned int __fastcall__ readkey(void);
+;
+
+_readkey:
+	lda	KBDRDY
+	bpl	_readkey
+	ldx	#$00
+	lda	KBD
+	rts
+	
+;
+; void __fastcall__ writevid(unsigned char);
+;
+
+_writevid:
+	jmp	ECHO
\ No newline at end of file
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/crt0.s cc65-2.13.3/libsrc/apple1/crt0.s
--- cc65-2.13.3.orig/libsrc/apple1/crt0.s	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/crt0.s	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,75 @@
+;
+; Startup code for cc65 (Apple1 version)
+;
+; This must be the *first* file on the linker command line
+;
+
+        .export         _exit
+        .export         __STARTUP__ : absolute = 1      ; Mark as startup
+        .import         zerobss
+        .import    	initlib, donelib
+        .import    	callmain, callirq
+        .import        	__STARTUP_LOAD__, __BSS_LOAD__	; Linker generated
+	.import		__RAM_START__, __RAM_SIZE__	; Linker generated
+        .import        	__INTERRUPTOR_COUNT__		; Linker generated
+
+        .include        "zeropage.inc"
+        .include        "apple1.inc"
+
+; ------------------------------------------------------------------------
+
+        .segment        "EXEHDR"
+
+        .addr           __STARTUP_LOAD__                ; Start address
+        .word           __BSS_LOAD__ - __STARTUP_LOAD__	; Size
+
+; ------------------------------------------------------------------------
+
+        .segment        "STARTUP"
+
+        ldx     #$FF
+        txs            		; Init stack pointer
+
+        ; Delegate all further processing to keep STARTUP small
+        jsr     init
+
+        ; Avoid re-entrance of donelib. This is also the _exit entry
+_exit:
+        ; Call module destructors
+        jsr     donelib
+
+        ; Jump back to monitor ROM
+exit:   jmp	RESET
+	
+
+; ------------------------------------------------------------------------
+
+        .segment        "INIT"
+
+        ; Save the zero page locations we need
+init:
+
+        ; Clear the BSS data
+        jsr     zerobss
+
+        ; Setup the stack
+	; The Replica 1 has 32K of RAM from $0000 to $7FFF
+	; The Apple 1 has 4K of RAM from $0000 to $0FFF
+	;   and 4K from $E000 to $EFFF 
+	lda    	#<(RAMTOP+1)
+	sta	sp
+	lda	#>(RAMTOP+1)
+	sta	sp+1
+
+        ; Check for interruptors
+        ;lda     #<__INTERRUPTOR_COUNT__
+        ;beq     :+
+
+	; Enable interrupts
+	cli
+
+        ; Call module constructors
+:       jsr     initlib
+
+        ; Push arguments and call main()
+        jmp     callmain
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/ctype.s cc65-2.13.3/libsrc/apple1/ctype.s
--- cc65-2.13.3.orig/libsrc/apple1/ctype.s	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/ctype.s	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,161 @@
+;
+; Stefan Haubenthal with minor changes from Ullrich von Bassewitz, 2003-05-02
+;
+; Character specification table.
+;
+
+	.include	"ctype.inc"
+
+; The tables are readonly, put them into the rodata segment
+
+.rodata
+
+; The following 256 byte wide table specifies attributes for the isxxx type
+; of functions. Doing it by a table means some overhead in space, but it
+; has major advantages:
+;
+;   * It is fast. If it were'nt for the slow parameter passing of cc65, one
+;     could even define macros for the isxxx functions (this is usually
+;     done on other platforms).
+;
+;   * It is highly portable. The only unportable part is the table itself,
+;     all real code goes into the common library.
+;
+;   * We save some code in the isxxx functions.
+
+
+__ctype:
+        .repeat 2
+       	.byte  	CT_CTRL			;   0/00 ___ctrl_@___
+	.byte	CT_CTRL			;   1/01 ___ctrl_A___
+	.byte	CT_CTRL			;   2/02 ___ctrl_B___
+	.byte	CT_CTRL			;   3/03 ___ctrl_C___
+	.byte	CT_CTRL			;   4/04 ___ctrl_D___
+	.byte	CT_CTRL			;   5/05 ___ctrl_E___
+	.byte	CT_CTRL			;   6/06 ___ctrl_F___
+	.byte	CT_CTRL			;   7/07 ___ctrl_G___
+	.byte	CT_CTRL			;   8/08 ___ctrl_H___
+	.byte	CT_CTRL | CT_OTHER_WS | CT_SPACE_TAB
+					;   9/09 ___ctrl_I___
+	.byte	CT_CTRL | CT_OTHER_WS	;  10/0a ___ctrl_J___
+	.byte	CT_CTRL | CT_OTHER_WS	;  11/0b ___ctrl_K___
+	.byte	CT_CTRL | CT_OTHER_WS	;  12/0c ___ctrl_L___
+	.byte	CT_CTRL | CT_OTHER_WS	;  13/0d ___ctrl_M___
+	.byte	CT_CTRL			;  14/0e ___ctrl_N___
+	.byte	CT_CTRL			;  15/0f ___ctrl_O___
+	.byte	CT_CTRL			;  16/10 ___ctrl_P___
+	.byte	CT_CTRL			;  17/11 ___ctrl_Q___
+	.byte	CT_CTRL			;  18/12 ___ctrl_R___
+	.byte	CT_CTRL			;  19/13 ___ctrl_S___
+	.byte	CT_CTRL			;  20/14 ___ctrl_T___
+	.byte	CT_CTRL			;  21/15 ___ctrl_U___
+	.byte	CT_CTRL			;  22/16 ___ctrl_V___
+	.byte	CT_CTRL			;  23/17 ___ctrl_W___
+	.byte	CT_CTRL			;  24/18 ___ctrl_X___
+	.byte	CT_CTRL			;  25/19 ___ctrl_Y___
+	.byte	CT_CTRL			;  26/1a ___ctrl_Z___
+	.byte	CT_CTRL			;  27/1b ___ctrl_[___
+	.byte	CT_CTRL			;  28/1c ___ctrl_\___
+	.byte	CT_CTRL			;  29/1d ___ctrl_]___
+	.byte	CT_CTRL			;  30/1e ___ctrl_^___
+	.byte	CT_CTRL			;  31/1f ___ctrl_____
+	.byte	CT_SPACE | CT_SPACE_TAB	;  32/20 ___SPACE___
+       	.byte  	CT_NONE                 ;  33/21 _____!_____
+       	.byte  	CT_NONE                 ;  34/22 _____"_____
+       	.byte  	CT_NONE                 ;  35/23 _____#_____
+       	.byte  	CT_NONE                 ;  36/24 _____$_____
+       	.byte  	CT_NONE                 ;  37/25 _____%_____
+       	.byte  	CT_NONE                 ;  38/26 _____&_____
+       	.byte  	CT_NONE                 ;  39/27 _____'_____
+       	.byte  	CT_NONE                 ;  40/28 _____(_____
+       	.byte  	CT_NONE                 ;  41/29 _____)_____
+       	.byte  	CT_NONE                 ;  42/2a _____*_____
+       	.byte  	CT_NONE                 ;  43/2b _____+_____
+       	.byte  	CT_NONE                 ;  44/2c _____,_____
+       	.byte  	CT_NONE                 ;  45/2d _____-_____
+       	.byte  	CT_NONE                 ;  46/2e _____._____
+       	.byte  	CT_NONE                 ;  47/2f _____/_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  48/30 _____0_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  49/31 _____1_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  50/32 _____2_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  51/33 _____3_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  52/34 _____4_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  53/35 _____5_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  54/36 _____6_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  55/37 _____7_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  56/38 _____8_____
+	.byte	CT_DIGIT | CT_XDIGIT	;  57/39 _____9_____
+       	.byte  	CT_NONE                 ;  58/3a _____:_____
+       	.byte  	CT_NONE                 ;  59/3b _____;_____
+       	.byte  	CT_NONE                 ;  60/3c _____<_____
+       	.byte  	CT_NONE                 ;  61/3d _____=_____
+       	.byte  	CT_NONE                 ;  62/3e _____>_____
+       	.byte  	CT_NONE                 ;  63/3f _____?_____
+
+       	.byte  	CT_NONE                 ;  64/40 _____@_____
+	.byte	CT_UPPER | CT_XDIGIT	;  65/41 _____A_____
+	.byte	CT_UPPER | CT_XDIGIT	;  66/42 _____B_____
+	.byte	CT_UPPER | CT_XDIGIT	;  67/43 _____C_____
+	.byte	CT_UPPER | CT_XDIGIT	;  68/44 _____D_____
+	.byte	CT_UPPER | CT_XDIGIT	;  69/45 _____E_____
+	.byte	CT_UPPER | CT_XDIGIT	;  70/46 _____F_____
+	.byte	CT_UPPER		;  71/47 _____G_____
+	.byte	CT_UPPER		;  72/48 _____H_____
+	.byte	CT_UPPER		;  73/49 _____I_____
+	.byte	CT_UPPER		;  74/4a _____J_____
+	.byte	CT_UPPER		;  75/4b _____K_____
+	.byte	CT_UPPER		;  76/4c _____L_____
+	.byte	CT_UPPER		;  77/4d _____M_____
+	.byte	CT_UPPER		;  78/4e _____N_____
+	.byte	CT_UPPER		;  79/4f _____O_____
+	.byte	CT_UPPER		;  80/50 _____P_____
+	.byte	CT_UPPER		;  81/51 _____Q_____
+	.byte	CT_UPPER		;  82/52 _____R_____
+	.byte	CT_UPPER		;  83/53 _____S_____
+	.byte	CT_UPPER		;  84/54 _____T_____
+	.byte	CT_UPPER		;  85/55 _____U_____
+	.byte	CT_UPPER		;  86/56 _____V_____
+	.byte	CT_UPPER		;  87/57 _____W_____
+	.byte	CT_UPPER		;  88/58 _____X_____
+	.byte	CT_UPPER		;  89/59 _____Y_____
+	.byte	CT_UPPER		;  90/5a _____Z_____
+       	.byte  	CT_NONE                 ;  91/5b _____[_____
+       	.byte  	CT_NONE                 ;  92/5c _____\_____
+       	.byte  	CT_NONE                 ;  93/5d _____]_____
+       	.byte  	CT_NONE                 ;  94/5e _____^_____
+       	.byte  	CT_NONE                 ;  95/5f _UNDERLINE_
+       	.byte  	CT_NONE                 ;  96/60 ___grave___
+	.byte	CT_LOWER | CT_XDIGIT	;  97/61 _____a_____
+	.byte	CT_LOWER | CT_XDIGIT	;  98/62 _____b_____
+	.byte	CT_LOWER | CT_XDIGIT	;  99/63 _____c_____
+	.byte	CT_LOWER | CT_XDIGIT	; 100/64 _____d_____
+	.byte	CT_LOWER | CT_XDIGIT	; 101/65 _____e_____
+	.byte	CT_LOWER | CT_XDIGIT	; 102/66 _____f_____
+	.byte	CT_LOWER		; 103/67 _____g_____
+	.byte	CT_LOWER		; 104/68 _____h_____
+	.byte	CT_LOWER		; 105/69 _____i_____
+	.byte	CT_LOWER		; 106/6a _____j_____
+	.byte	CT_LOWER		; 107/6b _____k_____
+	.byte	CT_LOWER		; 108/6c _____l_____
+	.byte	CT_LOWER		; 109/6d _____m_____
+	.byte	CT_LOWER		; 110/6e _____n_____
+	.byte	CT_LOWER		; 111/6f _____o_____
+	.byte	CT_LOWER		; 112/70 _____p_____
+	.byte	CT_LOWER		; 113/71 _____q_____
+	.byte	CT_LOWER		; 114/72 _____r_____
+	.byte	CT_LOWER		; 115/73 _____s_____
+	.byte	CT_LOWER		; 116/74 _____t_____
+	.byte	CT_LOWER		; 117/75 _____u_____
+	.byte	CT_LOWER		; 118/76 _____v_____
+	.byte	CT_LOWER		; 119/77 _____w_____
+	.byte	CT_LOWER		; 120/78 _____x_____
+	.byte	CT_LOWER		; 121/79 _____y_____
+	.byte	CT_LOWER		; 122/7a _____z_____
+       	.byte  	CT_NONE                 ; 123/7b _____{_____
+       	.byte  	CT_NONE                 ; 124/7c _____|_____
+       	.byte  	CT_NONE                 ; 125/7d _____}_____
+       	.byte  	CT_NONE                 ; 126/7e _____~_____
+	.byte	CT_OTHER_WS		; 127/7f ____DEL____
+        .endrepeat
+
+
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/Makefile cc65-2.13.3/libsrc/apple1/Makefile
--- cc65-2.13.3.orig/libsrc/apple1/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/Makefile	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,76 @@
+#
+# makefile for CC65 runtime library
+#
+
+.SUFFIXES: .o .s .c
+
+#--------------------------------------------------------------------------
+# Programs and flags
+
+SYS	= apple1
+
+AS	= ../../src/ca65/ca65
+CC	= ../../src/cc65/cc65
+LD	= ../../src/ld65/ld65
+
+AFLAGS	= -t $(SYS) -I../../asminc
+CFLAGS	= -Osir -g -T -t $(SYS) --forget-inc-paths -I . -I ../../include
+
+#--------------------------------------------------------------------------
+# Rules
+
+%.o:   	%.c
+	@$(CC) $(CFLAGS) $<
+	@$(AS) -o $@ $(AFLAGS) $(*).s
+
+%.o:	%.s
+	@$(AS) -g -o $@ $(AFLAGS) $<
+
+%.emd:	%.o ../runtime/zeropage.o
+	@$(LD) -t module -o $@ $^
+
+%.joy:	%.o ../runtime/zeropage.o
+	@$(LD) -t module -o $@ $^
+
+%.ser:	%.o ../runtime/zeropage.o
+	@$(LD) -t module -o $@ $^
+
+%.tgi:	%.o ../runtime/zeropage.o
+	@$(LD) -t module -o $@ $^
+
+#--------------------------------------------------------------------------
+# Object files
+
+S_OBJS=	crt0.o	\
+	ctype.o \
+     	stdio.o	\
+     	basicio.o	\
+        randomize.o
+
+#--------------------------------------------------------------------------
+# Drivers
+
+EMDS = 
+
+JOYS =
+
+SERS =
+
+TGIS =
+
+#--------------------------------------------------------------------------
+# Targets
+
+.PHONY:	all clean zap
+
+all: 	$(C_OBJS) $(S_OBJS) $(EMDS) $(JOYS) $(SERS) $(TGIS)
+
+../runtime/zeropage.o:
+	$(MAKE) -C $(dir $@) $(notdir $@)
+
+clean:
+	@$(RM) $(C_OBJS:.o=.s) $(C_OBJS) $(S_OBJS) $(EMDS:.emd=.o) $(JOYS:.joy=.o) $(SERS:.ser=.o) $(TGIS:.tgi=.o)
+
+zap:	clean
+	@$(RM) $(EMDS) $(JOYS) $(SERS) $(TGIS)
+
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/oserror.s cc65-2.13.3/libsrc/apple1/oserror.s
--- cc65-2.13.3.orig/libsrc/apple1/oserror.s	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/oserror.s	2012-07-31 17:01:52.000000000 -0400
@@ -0,0 +1,62 @@
+;
+; Ullrich von Bassewitz, 17.05.2000
+;
+; int __fastcall__ _osmaperrno (unsigned char oserror);
+;
+
+        .export 	__osmaperrno
+
+        .include	"errno.inc"
+
+__osmaperrno:
+        ldx	#ErrTabSize
+:       cmp	ErrTab-2,x	; Search for the error code
+        beq	:+		; Jump if found
+        dex
+        dex
+        bne	:-		; Next entry
+
+        ; Code not found, return EUNKNOWN
+        lda	#<EUNKNOWN
+        ldx	#>EUNKNOWN
+        rts
+
+        ; Found the code
+:       lda	ErrTab-1,x
+        ldx	#$00		; High byte always zero
+        rts
+
+        .rodata
+
+ErrTab: .byte   $01, ENOSYS	; Invalid MLI function code number
+        .byte	$04, EINVAL	; Incorrect parameter count
+        .byte	$25, ENOMEM	; Interrupt table full
+        .byte	$27, EIO	; I/O error
+        .byte	$28, ENODEV	; No device connected
+        .byte	$2B, EACCES	; Write protected
+;       .byte	$2E, EUNKNOWN	; Disk switched
+        .byte	$2F, ENODEV	; No disk in drive
+        .byte	$40, EINVAL	; Invalid pathname syntax
+        .byte	$42, EMFILE	; Too many files open
+        .byte	$43, EINVAL	; Bad reference number
+        .byte	$44, ENOENT	; Bad pathname
+        .byte	$45, ENOENT	; Volume not mounted
+        .byte	$46, ENOENT	; File not found
+        .byte	$47, EEXIST	; File already exists
+        .byte	$48, ENOSPC	; Disk full
+        .byte	$49, ENOSPC	; Directory full
+;       .byte	$4A, EUNKNOWN	; Incompatible ProDOS version
+        .byte	$4B, EINVAL	; Unsupported storage type
+;       .byte	$4C, EUNKNOWN	; End of file
+        .byte	$4D, ESPIPE	; Position past EOF
+        .byte	$4E, EACCES	; Access denied
+        .byte	$50, EINVAL	; File already open
+;       .byte	$51, EUNKNOWN	; File count bad
+        .byte	$52, ENODEV	; Not a ProDOS disk
+        .byte	$53, ERANGE	; Parameter out of range
+        .byte	$55, EMFILE	; Too many devices mounted
+        .byte	$56, EINVAL	; Bad buffer address
+;       .byte	$57, EUNKNOWN	; Duplicate volume name
+;       .byte	$5A, EUNKNOWN	; Damaged disk free space bit map
+
+ErrTabSize = (* - ErrTab)
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/randomize.s cc65-2.13.3/libsrc/apple1/randomize.s
--- cc65-2.13.3.orig/libsrc/apple1/randomize.s	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/randomize.s	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,17 @@
+;
+; Ullrich von Bassewitz, 07.11.2002
+;
+; void _randomize (void);
+; /* Initialize the random number generator */
+;
+
+    	.export	       	__randomize
+	.import		_srand
+
+        .include        "apple1.inc"
+
+__randomize:
+        ldx     #$EA            ; Use random value supplied by ROM
+        lda     #$55
+        jmp     _srand          ; Initialize generator
+
diff -r -N -uw cc65-2.13.3.orig/libsrc/apple1/stdio.s cc65-2.13.3/libsrc/apple1/stdio.s
--- cc65-2.13.3.orig/libsrc/apple1/stdio.s	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/libsrc/apple1/stdio.s	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,189 @@
+;
+; Oliver Schmidt, 12.01.2005
+; Modified for Apple1 by David Schmenk, 6/11/2006
+;
+
+.export		_open, _close, _read, _write
+.import 	addysp, incsp4, incaxy, pushax, popax
+
+.include	"zeropage.inc"
+.include	"errno.inc"
+.include	"fcntl.inc"
+.include	"apple1.inc"
+
+;
+; int open (const char* name, int flags, ...);
+;
+
+_open:
+        ; Throw away all parameters except name
+        ; and flags occupying together 4 bytes
+        dey
+        dey
+        dey
+        dey
+        jsr	addysp
+
+        ; Load errno code
+        lda	#EMFILE
+
+        ; Cleanup stack
+	jsr	incsp4		; Preserves A
+
+        ; Return errno
+        jmp	errno
+
+;
+; int __fastcall__ close (int fd);
+;
+
+_close:
+        ; Process fd
+	jsr	popax
+
+        jmp	errno
+
+;
+; int __fastcall__ read (int fd, void* buf, unsigned count);
+;
+
+_read:
+	; Save count
+	sta	ptr2
+	stx	ptr2+1
+
+
+	; Get and save buf
+	jsr	popax
+	sta	ptr1
+	stx	ptr1+1
+
+	; Get and process fd
+	jsr	popax
+	cpx	#$00
+	bne	errno
+	cmp	#$00		; Check for stdin read
+	bne	errno
+
+        ; Set counter to zero
+	lda	#$00
+        sta	ptr3
+        sta	ptr3+1
+        beq	rdchk
+
+        ; Read from device and echo to device
+rdkbd:  lda	KBDRDY
+        bpl	rdkbd		; if < 128, no key pressed
+	lda	KBD
+        and	#$7F		; Clear high bit
+        ldx	#$00
+        jsr	ECHO
+
+        ; Check for '\r'
+        cmp	#$0D
+        bne	:+
+
+        ; Replace with '\n' and set count to zero
+        lda	#$0A
+        ldy	#$00
+        sty	ptr2
+        sty	ptr2+1
+
+        ; Put char into buf
+:       ldy	#$00
+        sta	(ptr1),y
+
+        ; Increment pointer
+        inc	ptr1
+        bne	:+
+        inc	ptr1+1
+
+        ; Increment counter
+:       inc	ptr3
+        bne	rdchk
+        inc	ptr3+1
+
+        ; Check for counter less than count
+rdchk:  lda	ptr3
+        cmp	ptr2
+        bcc	rdkbd
+        ldx	ptr3+1
+        cpx	ptr2+1
+        bcc	rdkbd
+
+        ; Return success, AX already set
+        rts
+
+        ; Load errno code
+einval: lda	#EINVAL
+
+        ; Return errno
+errno:  jsr	__seterrno
+	sta	__oserror
+	lda	#'X'
+	jsr	ECHO
+	lda	#$FF
+	tax
+	rts
+
+;
+; int __fastcall__ write (int fd, const void* buf, unsigned count);
+;
+
+_write:
+	; Save count
+	sta	ptr2
+	sta	ptr3
+	stx	ptr2+1
+	stx	ptr3+1
+
+	; Get and save buf
+	jsr	popax
+	sta	ptr1
+	stx	ptr1+1
+
+	; Get and process fd
+	jsr	popax
+	cpx	#$00
+	bne	errno
+	cmp	#$01		; Check for stdout write
+	beq	wrstd
+	cmp	#$02
+	beq	wrstd
+	bne	errno
+
+        ; Do write
+wrstd:	ldx	ptr2
+        lda	ptr2+1
+
+        ; Check for zero count
+        ora	ptr2
+        beq	wrfin
+
+        ; Get char from buf
+        ldy	#$00
+wrnxt:	lda	(ptr1),y
+
+        ; Replace '\n' with '\r'
+        cmp	#$0A
+        bne	wrdev
+        lda	#$0D
+
+        ; Write to device
+wrdev:	jsr	ECHO		; Preserves X and Y
+
+        ; Increment pointer
+        iny
+        bne	:+
+        inc	ptr1+1
+
+        ; Decrement count
+:       dex
+        bne	wrnxt
+        dec	ptr2+1
+        bpl	wrnxt
+
+        ; Return success
+wrfin:	lda	ptr3
+	ldx	ptr3+1
+	rts
diff -r -N -uw cc65-2.13.3.orig/libsrc/common/maperrno.s cc65-2.13.3/libsrc/common/maperrno.s
--- cc65-2.13.3.orig/libsrc/common/maperrno.s	2008-04-15 02:55:35.000000000 -0400
+++ cc65-2.13.3/libsrc/common/maperrno.s	2012-07-31 17:00:26.000000000 -0400
@@ -19,7 +19,7 @@
 seterrnofromoserror:     
 	ldx	#$00			; Clear error
 	stx	__oserror
-	jsr	__osmaperrno		; Map the code
+;	jsr	__osmaperrno		; Map the code
        	sta    	__errno
 	stx	__errno+1
 L9:	rts
diff -r -N -uw cc65-2.13.3.orig/libsrc/common/oserrcheck.s cc65-2.13.3/libsrc/common/oserrcheck.s
--- cc65-2.13.3.orig/libsrc/common/oserrcheck.s	2003-11-12 19:12:56.000000000 -0500
+++ cc65-2.13.3/libsrc/common/oserrcheck.s	2012-07-31 17:01:07.000000000 -0400
@@ -18,7 +18,7 @@
         sta     __oserror               ; Store the error code
         tay                             ; Did we have an error?
         beq     ok                      ; Branch if no
-        jsr     __osmaperrno            ; Map os error into errno code
+;        jsr     __osmaperrno            ; Map os error into errno code
         sta     __errno
         stx     __errno+1               ; Save in errno
         lda     #$FF                    ; Return -1
diff -r -N -uw cc65-2.13.3.orig/libsrc/Makefile cc65-2.13.3/libsrc/Makefile
--- cc65-2.13.3.orig/libsrc/Makefile	2009-09-22 17:43:57.000000000 -0400
+++ cc65-2.13.3/libsrc/Makefile	2012-07-31 16:59:24.000000000 -0400
@@ -15,6 +15,7 @@
 # List of all targets
 ALLTARGETS =   	apple2 		\
 		apple2enh	\
+		apple1		\
        	       	atari  		\
        	       	atmos  		\
                 c16    		\
@@ -38,6 +39,19 @@
 	    $(MAKE) clean "$$tgt"lib || exit 1;	\
 	done
 
+# Apple I & Replica 1
+
+apple1lib:
+	for i in apple1 common runtime; do \
+	       $(MAKE) SYS=apple1 -C $$i || exit 1; \
+	       $(AR) a apple1.lib $$i/*.o;\
+	done
+	mv apple1/crt0.o apple1.o
+	for i in apple1 common runtime; do \
+	       $(MAKE) SYS=replica1 -C $$i || exit 1; \
+	       $(AR) a replica1.lib $$i/*.o;\
+	done
+
 #-----------------------------------------------------------------------------
 # Apple ][
 
@@ -274,6 +288,3 @@
 	   $(MAKE) -C $$i zap;     	    	       	      	   		\
 	done
 	@$(RM) *.o *.emd *.joy *.lib *.tgi *.ser *.mou
-
-
-
diff -r -N -uw cc65-2.13.3.orig/src/ca65/main.c cc65-2.13.3/src/ca65/main.c
--- cc65-2.13.3.orig/src/ca65/main.c	2009-09-28 16:12:43.000000000 -0400
+++ cc65-2.13.3/src/ca65/main.c	2012-07-31 16:59:24.000000000 -0400
@@ -243,6 +243,14 @@
             NewSymbol ("__APPLE2ENH__", 1);
      	    break;
 
+        case TGT_APPLE1:
+            NewSymbol ("__APPLE1__", 1);
+            break;
+  
+        case TGT_REPLICA1:
+            NewSymbol ("__REPLICA1__", 1);
+            break;
+
      	case TGT_GEOS:
      	    /* Do not handle as a CBM system */
      	    NewSymbol ("__GEOS__", 1);
diff -r -N -uw cc65-2.13.3.orig/src/cc65/main.c cc65-2.13.3/src/cc65/main.c
--- cc65-2.13.3.orig/src/cc65/main.c	2009-09-28 16:12:43.000000000 -0400
+++ cc65-2.13.3/src/cc65/main.c	2012-07-31 16:59:24.000000000 -0400
@@ -205,6 +205,14 @@
             DefineNumericMacro ("__APPLE2ENH__", 1);
      	    break;
 
+        case TGT_APPLE1:
+            DefineNumericMacro ("__APPLE1__", 1);
+            break;
+  
+        case TGT_REPLICA1:
+            DefineNumericMacro ("__REPLICA1__", 1);
+            break;
+
      	case TGT_GEOS:
      	    /* Do not handle as a CBM system */
      	    DefineNumericMacro ("__GEOS__", 1);
diff -r -N -uw cc65-2.13.3.orig/src/common/target.c cc65-2.13.3/src/common/target.c
--- cc65-2.13.3.orig/src/common/target.c	2009-09-13 07:46:04.000000000 -0400
+++ cc65-2.13.3/src/common/target.c	2012-07-31 16:59:24.000000000 -0400
@@ -66,6 +66,8 @@
     "bbc",
     "apple2",
     "apple2enh",
+    "apple1",
+    "replica1",
     "geos",
     "lunix",
     "atmos",
@@ -92,6 +94,8 @@
     CPU_6502,           /* bbc */
     CPU_6502,           /* apple2 */
     CPU_65C02,          /* apple2enh */
+    CPU_6502,           /* apple1 */
+    CPU_6502,           /* replica1 */
     CPU_6502,           /* geos */
     CPU_6502,           /* lunix */
     CPU_6502,           /* atmos */
diff -r -N -uw cc65-2.13.3.orig/src/common/target.h cc65-2.13.3/src/common/target.h
--- cc65-2.13.3.orig/src/common/target.h	2009-09-13 07:46:04.000000000 -0400
+++ cc65-2.13.3/src/common/target.h	2012-07-31 16:59:24.000000000 -0400
@@ -66,6 +66,8 @@
     TGT_BBC,
     TGT_APPLE2,
     TGT_APPLE2ENH,
+    TGT_APPLE1,
+    TGT_REPLICA1,
     TGT_GEOS,
     TGT_LUNIX,
     TGT_ATMOS,
diff -r -N -uw cc65-2.13.3.orig/src/common/tgttrans.c cc65-2.13.3/src/common/tgttrans.c
--- cc65-2.13.3.orig/src/common/tgttrans.c	2009-09-13 07:46:04.000000000 -0400
+++ cc65-2.13.3/src/common/tgttrans.c	2012-07-31 16:59:24.000000000 -0400
@@ -155,6 +155,8 @@
 	case TGT_BBC:  	       	memcpy (Tab, CTNone, sizeof (Tab));  	break;
 	case TGT_APPLE2:	memcpy (Tab, CTNone, sizeof (Tab));  	break;
         case TGT_APPLE2ENH:     memcpy (Tab, CTNone, sizeof (Tab));     break;
+        case TGT_APPLE1:        memcpy (Tab, CTNone, sizeof (Tab));     break;
+        case TGT_REPLICA1:      memcpy (Tab, CTNone, sizeof (Tab));     break;
 	case TGT_GEOS:		memcpy (Tab, CTNone, sizeof (Tab));  	break;
 	case TGT_LUNIX:		memcpy (Tab, CTNone, sizeof (Tab));  	break;
        	case TGT_ATMOS:		memcpy (Tab, CTNone, sizeof (Tab));  	break;
diff -r -N -uw cc65-2.13.3.orig/src/ld65/apple1.inc cc65-2.13.3/src/ld65/apple1.inc
--- cc65-2.13.3.orig/src/ld65/apple1.inc	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/src/ld65/apple1.inc	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,39 @@
+static const char CfgApple1 [] = 
+"MEMORY {\n"
+"ZP:     start = $0020, size = $00C0, define = yes;\n"
+"HEADER: start = $0000, size = $0004, file = %O;\n"
+"RAM1:    start = $0280, size = $0B80, file = %O;\n"
+"RAM2:    start = $E000, size = $1000, file = %O;\n"
+"}\n"
+"SEGMENTS {\n"
+"EXEHDR:   load = HEADER, type = ro;\n"
+"STARTUP:  load = RAM1,    type = ro, define = yes;\n"
+"LOWCODE:  load = RAM1,    type = ro,               optional = yes;\n"
+"INIT:     load = RAM1,    type = ro, define = yes, optional = yes;\n"
+"CODE:     load = RAM1,    type = ro;\n"
+"RODATA:   load = RAM1,    type = ro;\n"
+"DATA:     load = RAM1,    type = rw;\n"
+"BSS:      load = RAM2,    type = bss, define = yes;\n"
+"HEAP:     load = RAM2,    type = bss, optional = yes;\n" /* must sit just below stack */
+"ZEROPAGE: load = ZP,     type = zp;\n"
+"}\n"
+"FEATURES {\n"
+"CONDES: segment = INIT,\n"
+"type = constructor,\n"
+"label = __CONSTRUCTOR_TABLE__,\n"
+"count = __CONSTRUCTOR_COUNT__;\n"
+"CONDES: segment = RODATA,\n"
+"type = destructor,\n"
+"label = __DESTRUCTOR_TABLE__,\n"
+"count = __DESTRUCTOR_COUNT__;\n"
+"CONDES: type = interruptor,\n"
+"segment = RODATA,\n"
+"label = __INTERRUPTOR_TABLE__,\n"
+"count = __INTERRUPTOR_COUNT__;\n"
+"}\n"
+"SYMBOLS {\n"
+"__STACKSIZE__ = $800;\n"	/* 2K stack */
+"}\n"
+"\n"
+"\n"
+;
diff -r -N -uw cc65-2.13.3.orig/src/ld65/replica1.inc cc65-2.13.3/src/ld65/replica1.inc
--- cc65-2.13.3.orig/src/ld65/replica1.inc	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/src/ld65/replica1.inc	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,38 @@
+static const char CfgReplica1 [] = 
+"MEMORY {\n"
+"ZP:     start = $0020, size = $00C0, define = yes;\n"
+"HEADER: start = $0000, size = $0004, file = %O;\n"
+"RAM:    start = $0280, size = $7D80, file = %O;\n"
+"}\n"
+"SEGMENTS {\n"
+"EXEHDR:   load = HEADER, type = ro;\n"
+"STARTUP:  load = RAM,    type = ro, define = yes;\n"
+"LOWCODE:  load = RAM,    type = ro,               optional = yes;\n"
+"INIT:     load = RAM,    type = ro, define = yes, optional = yes;\n"
+"CODE:     load = RAM,    type = ro;\n"
+"RODATA:   load = RAM,    type = ro;\n"
+"DATA:     load = RAM,    type = rw;\n"
+"BSS:      load = RAM,    type = bss, define = yes;\n"
+"HEAP:     load = RAM,    type = bss, optional = yes;\n" /* must sit just below stack */
+"ZEROPAGE: load = ZP,     type = zp;\n"
+"}\n"
+"FEATURES {\n"
+"CONDES: segment = INIT,\n"
+"type = constructor,\n"
+"label = __CONSTRUCTOR_TABLE__,\n"
+"count = __CONSTRUCTOR_COUNT__;\n"
+"CONDES: segment = RODATA,\n"
+"type = destructor,\n"
+"label = __DESTRUCTOR_TABLE__,\n"
+"count = __DESTRUCTOR_COUNT__;\n"
+"CONDES: type = interruptor,\n"
+"segment = RODATA,\n"
+"label = __INTERRUPTOR_TABLE__,\n"
+"count = __INTERRUPTOR_COUNT__;\n"
+"}\n"
+"SYMBOLS {\n"
+"__STACKSIZE__ = $800;\n"	/* 2K stack */
+"}\n"
+"\n"
+"\n"
+;
diff -r -N -uw cc65-2.13.3.orig/src/ld65/tgtcfg.c cc65-2.13.3/src/ld65/tgtcfg.c
--- cc65-2.13.3.orig/src/ld65/tgtcfg.c	2009-09-18 15:13:59.000000000 -0400
+++ cc65-2.13.3/src/ld65/tgtcfg.c	2012-07-31 16:59:24.000000000 -0400
@@ -51,6 +51,8 @@
 /* Actual target configurations, converted into C strings by a perl script */
 #include "apple2.inc"
 #include "apple2enh.inc"
+#include "apple1.inc"
+#include "replica1.inc"
 #include "atari.inc"
 #include "atmos.inc"
 #include "bbc.inc"
@@ -94,6 +96,8 @@
     {  	BINFMT_BINARY, 	CfgBBC          },
     {   BINFMT_BINARY,	CfgApple2       },
     {   BINFMT_BINARY,  CfgApple2Enh    },
+    {   BINFMT_BINARY,  CfgApple1       },
+    {   BINFMT_BINARY,  CfgReplica1     },
     {   BINFMT_BINARY,  CfgGeos         },
     {   BINFMT_O65,     CfgLunix        },
     {  	BINFMT_BINARY,	CfgAtmos        },
diff -r -N -uw cc65-2.13.3.orig/util/apple1/bintomon.c cc65-2.13.3/util/apple1/bintomon.c
--- cc65-2.13.3.orig/util/apple1/bintomon.c	1969-12-31 19:00:00.000000000 -0500
+++ cc65-2.13.3/util/apple1/bintomon.c	2012-07-31 16:59:24.000000000 -0400
@@ -0,0 +1,141 @@
+/*
+ * Convert binary file to Woz monitor format.
+ *
+ * usage: bintomon [-v] [-f] [-l <LoadAddress>] [-r <RunAddress>] <filename>
+ *
+ * The -l option and <LoadAddress> argument specifies the starting
+ * memory address to load. The -r option and <RunAddress> argument
+ * specifies the memory address to start execution. With the -f option
+ * the LoadAddress and program length are read from the first 4 bytes
+ * of the file. If no <LoadAddress> is specified, it defaults to
+ * 0x280. If no <RunAddess> is specified, it defaults to the
+ * <LoadAddress>. Addresses can be specified in decimal or hex
+ * (prefixed with "0x"). A monitor 'R' command is sent at the end of
+ * the file. If <RunAddress> is "-" then the run command is not
+ * generated in the output.
+ * With the -v option verbose output is sent to standard error listing
+ * the load and run address and program size.
+ *
+ * Examples:
+ * bintomon myprog.bin
+ * bintomon -v -f myprog.bin
+ * bintomon -l 0x300 myprog.bin
+ * bintomon -l 0x280 -r 0x300 myprog.bin
+ *
+ */
+
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <assert.h>
+
+/* print command usage */
+void usage(char *name) {
+    fprintf(stderr, "usage: %s [-v] [-f] [-l <LoadAddress>] [-r <RunAddress>] <filename>\n", name);
+}
+
+int main(int argc, char *argv[])
+{
+    FILE *file;
+    unsigned char b;
+    int loadAddress = 0x280;
+    int runAddress = -2;
+    int length = -1;
+    int address;
+    unsigned char byte;
+    int opt;
+    size_t size;
+    int fromFile = 0;
+    int verbose = 0;
+
+    while ((opt = getopt(argc, argv, "vfl:r:")) != -1) {
+        switch (opt) {
+        case 'f':
+            fromFile = 1;
+            break;
+        case 'v':
+            verbose = 1;
+            break;
+        case 'l':
+            loadAddress = strtol(optarg, 0, 0);
+            break;
+        case 'r':
+            if (!strcmp(optarg, "-")) {
+                runAddress = -1;
+            } else {
+                runAddress = strtol(optarg, 0, 0);
+            }
+            break;
+        default:
+            usage(argv[0]);
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    if (argc != optind + 1) {
+        usage(argv[0]);
+        exit(EXIT_FAILURE);
+    }
+
+    file = fopen(argv[optind], "rb");
+    if (file == NULL) {
+        fprintf(stderr, "%s: Unable to open '%s'\n", argv[0], argv[optind]);
+        return 1;
+    }
+
+    if (fromFile) {
+        /* read load address from file */
+        size = fread(&b, 1, 1, file);
+        assert(size == 1);
+        loadAddress = b;
+        size = fread(&b, 1, 1, file);
+        assert(size == 1);
+        loadAddress += b << 8;
+
+        /* read length from file */
+        size = fread(&b, 1, 1, file);
+        assert(size == 1);
+        length = b;
+        size = fread(&b, 1, 1, file);
+        assert(size == 1);
+        length += b << 8;
+    }
+
+    /* If not set, run address is load address */
+    if (runAddress == -2)
+        runAddress = loadAddress;
+
+    if (verbose) {
+        fprintf(stderr, "Load address: $%04X\n", loadAddress);
+        if (runAddress != -1)
+            fprintf(stderr, "Run address: $%04X\n", runAddress);
+        if (length != -1)
+            fprintf(stderr, "Length: $%04X (%d bytes)\n", length, length);
+    }
+  
+    address = loadAddress;
+    printf("%04X:", address);
+
+    while (fread(&byte, 1, 1, file) == 1) {
+        printf(" %02X", byte);
+        ++address;
+        if ((address % 8) == 0)
+            printf("\n:");
+    }
+    printf("\n");
+    fclose(file);
+
+    // Add run address
+    if (runAddress != -1) {
+        printf("%04XR\n", runAddress);
+    }
+
+    fprintf(stderr, "Last address: $%04X\n", address);
+
+    if (length != -1 && address != loadAddress + length) {
+        fprintf(stderr, "Note: Last address does not match load address + length: $%04X\n", loadAddress + length);
+    }
+
+    return 0;
+}
