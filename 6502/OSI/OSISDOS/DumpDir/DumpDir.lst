ca65 V2.17 - Git de519b9
Main file   : DumpDir.s
Current file: DumpDir.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git de519b9
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git de519b9"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.export		_BPB_SecPerClus_8
000000r 1               	.export		_BPB_RsvdSecCnt_16
000000r 1               	.export		_BPB_NumFATs_8
000000r 1               	.export		_BPB_FATSz32_32
000000r 1               	.export		_DIR_FstClusHI_16
000000r 1               	.export		_DIR_FstClusLo_16
000000r 1               	.export		_fileNumber
000000r 1               	.export		_firstDataSectorNum_32
000000r 1               	.export		_fileSectorNum_32
000000r 1               	.export		_issueSDCardCommand
000000r 1               	.export		_waitSDCardReady
000000r 1               	.export		_waitSDCardRcvDataReady
000000r 1               	.export		_waitSDCardTxDataEmpty
000000r 1               	.export		_readByteFromSDCard
000000r 1               	.export		_writeByteToSDCard
000000r 1               	.export		_readBlock
000000r 1               	.export		_writeBlock
000000r 1               	.export		_readSector
000000r 1               	.export		_setSRAMBank
000000r 1               	.export		_readFile
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"BSS"
000000r 1               
000000r 1               _BPB_SecPerClus_8:
000000r 1  00           	.res	1,$00
000001r 1               _BPB_RsvdSecCnt_16:
000001r 1  00 00        	.res	2,$00
000003r 1               _BPB_NumFATs_8:
000003r 1  00           	.res	1,$00
000004r 1               _BPB_FATSz32_32:
000004r 1  00 00 00 00  	.res	4,$00
000008r 1               _DIR_FstClusHI_16:
000008r 1  00 00        	.res	2,$00
00000Ar 1               _DIR_FstClusLo_16:
00000Ar 1  00 00        	.res	2,$00
00000Cr 1               _fileNumber:
00000Cr 1  00 00        	.res	2,$00
00000Er 1               _firstDataSectorNum_32:
00000Er 1  00 00 00 00  	.res	4,$00
000012r 1               _fileSectorNum_32:
000012r 1  00 00 00 00  	.res	4,$00
000016r 1               
000016r 1               ; ---------------------------------------------------------------
000016r 1               ; void __near__ issueSDCardCommand (unsigned char)
000016r 1               ; ---------------------------------------------------------------
000016r 1               
000016r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_issueSDCardCommand: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pusha
000003r 1  A0 00        	ldy     #$00
000005r 1  A2 00        	ldx     #$00
000007r 1  B1 rr        	lda     (sp),y
000009r 1  8D 11 F0     	sta     $F011
00000Cr 1  20 rr rr     	jsr     incsp1
00000Fr 1  60           	rts
000010r 1               
000010r 1               .endproc
000010r 1               
000010r 1               ; ---------------------------------------------------------------
000010r 1               ; void __near__ waitSDCardReady (void)
000010r 1               ; ---------------------------------------------------------------
000010r 1               
000010r 1               .segment	"CODE"
000010r 1               
000010r 1               .proc	_waitSDCardReady: near
000010r 1               
000010r 1               .segment	"CODE"
000010r 1               
000010r 1  A2 00        	ldx     #$00
000012r 1  A9 01        	lda     #$01
000014r 1  8D 04 F0     	sta     $F004
000017r 1  4C rr rr     	jmp     L0007
00001Ar 1  A2 00        L0007:	ldx     #$00
00001Cr 1  AD 11 F0     	lda     $F011
00001Fr 1  C9 80        	cmp     #$80
000021r 1  20 rr rr     	jsr     boolne
000024r 1  D0 F4        	jne     L0007
000026r 1  A2 00        	ldx     #$00
000028r 1  A9 00        	lda     #$00
00002Ar 1  8D 04 F0     	sta     $F004
00002Dr 1  60           	rts
00002Er 1               
00002Er 1               .endproc
00002Er 1               
00002Er 1               ; ---------------------------------------------------------------
00002Er 1               ; void __near__ waitSDCardRcvDataReady (void)
00002Er 1               ; ---------------------------------------------------------------
00002Er 1               
00002Er 1               .segment	"CODE"
00002Er 1               
00002Er 1               .proc	_waitSDCardRcvDataReady: near
00002Er 1               
00002Er 1               .segment	"CODE"
00002Er 1               
00002Er 1  4C rr rr     	jmp     L000E
000031r 1  A2 00        L000E:	ldx     #$00
000033r 1  AD 11 F0     	lda     $F011
000036r 1  C9 E0        	cmp     #$E0
000038r 1  20 rr rr     	jsr     boolne
00003Br 1  D0 F4        	jne     L000E
00003Dr 1  60           	rts
00003Er 1               
00003Er 1               .endproc
00003Er 1               
00003Er 1               ; ---------------------------------------------------------------
00003Er 1               ; void __near__ waitSDCardTxDataEmpty (void)
00003Er 1               ; ---------------------------------------------------------------
00003Er 1               
00003Er 1               .segment	"CODE"
00003Er 1               
00003Er 1               .proc	_waitSDCardTxDataEmpty: near
00003Er 1               
00003Er 1               .segment	"CODE"
00003Er 1               
00003Er 1  4C rr rr     	jmp     L0013
000041r 1  A2 00        L0013:	ldx     #$00
000043r 1  AD 11 F0     	lda     $F011
000046r 1  C9 A0        	cmp     #$A0
000048r 1  20 rr rr     	jsr     boolne
00004Br 1  D0 F4        	jne     L0013
00004Dr 1  60           	rts
00004Er 1               
00004Er 1               .endproc
00004Er 1               
00004Er 1               ; ---------------------------------------------------------------
00004Er 1               ; unsigned char __near__ readByteFromSDCard (void)
00004Er 1               ; ---------------------------------------------------------------
00004Er 1               
00004Er 1               .segment	"CODE"
00004Er 1               
00004Er 1               .proc	_readByteFromSDCard: near
00004Er 1               
00004Er 1               .segment	"CODE"
00004Er 1               
00004Er 1  20 rr rr     	jsr     decsp1
000051r 1  20 rr rr     	jsr     _waitSDCardRcvDataReady
000054r 1  A2 00        	ldx     #$00
000056r 1  AD 10 F0     	lda     $F010
000059r 1  A0 00        	ldy     #$00
00005Br 1  91 rr        	sta     (sp),y
00005Dr 1  A0 00        	ldy     #$00
00005Fr 1  A2 00        	ldx     #$00
000061r 1  B1 rr        	lda     (sp),y
000063r 1  4C rr rr     	jmp     L0017
000066r 1  20 rr rr     L0017:	jsr     incsp1
000069r 1  60           	rts
00006Ar 1               
00006Ar 1               .endproc
00006Ar 1               
00006Ar 1               ; ---------------------------------------------------------------
00006Ar 1               ; void __near__ writeByteToSDCard (unsigned char)
00006Ar 1               ; ---------------------------------------------------------------
00006Ar 1               
00006Ar 1               .segment	"CODE"
00006Ar 1               
00006Ar 1               .proc	_writeByteToSDCard: near
00006Ar 1               
00006Ar 1               .segment	"CODE"
00006Ar 1               
00006Ar 1  20 rr rr     	jsr     pusha
00006Dr 1  20 rr rr     	jsr     _waitSDCardTxDataEmpty
000070r 1  A0 00        	ldy     #$00
000072r 1  A2 00        	ldx     #$00
000074r 1  B1 rr        	lda     (sp),y
000076r 1  8D 10 F0     	sta     $F010
000079r 1  20 rr rr     	jsr     incsp1
00007Cr 1  60           	rts
00007Dr 1               
00007Dr 1               .endproc
00007Dr 1               
00007Dr 1               ; ---------------------------------------------------------------
00007Dr 1               ; void __near__ readBlock (void)
00007Dr 1               ; ---------------------------------------------------------------
00007Dr 1               
00007Dr 1               .segment	"CODE"
00007Dr 1               
00007Dr 1               .proc	_readBlock: near
00007Dr 1               
00007Dr 1               .segment	"CODE"
00007Dr 1               
00007Dr 1  20 rr rr     	jsr     decsp4
000080r 1  A2 E0        	ldx     #$E0
000082r 1  A9 00        	lda     #$00
000084r 1  A0 00        	ldy     #$00
000086r 1  20 rr rr     	jsr     staxysp
000089r 1  20 rr rr     	jsr     _waitSDCardReady
00008Cr 1  A9 00        	lda     #$00
00008Er 1  20 rr rr     	jsr     _issueSDCardCommand
000091r 1  A2 00        	ldx     #$00
000093r 1  A9 00        	lda     #$00
000095r 1  A0 02        	ldy     #$02
000097r 1  20 rr rr     	jsr     staxysp
00009Ar 1  A0 03        L0027:	ldy     #$03
00009Cr 1  20 rr rr     	jsr     ldaxysp
00009Fr 1  E0 02        	cpx     #$02
0000A1r 1  20 rr rr     	jsr     boolult
0000A4r 1  F0 03 4C rr  	jne     L002A
0000A8r 1  rr           
0000A9r 1  4C rr rr     	jmp     L0028
0000ACr 1  A0 01        L002A:	ldy     #$01
0000AEr 1  20 rr rr     	jsr     ldaxysp
0000B1r 1  85 rr        	sta     regsave
0000B3r 1  86 rr        	stx     regsave+1
0000B5r 1  20 rr rr     	jsr     incax1
0000B8r 1  A0 00        	ldy     #$00
0000BAr 1  20 rr rr     	jsr     staxysp
0000BDr 1  A5 rr        	lda     regsave
0000BFr 1  A6 rr        	ldx     regsave+1
0000C1r 1  20 rr rr     	jsr     pushax
0000C4r 1  20 rr rr     	jsr     _readByteFromSDCard
0000C7r 1  A0 00        	ldy     #$00
0000C9r 1  20 rr rr     	jsr     staspidx
0000CCr 1  A0 03        	ldy     #$03
0000CEr 1  20 rr rr     	jsr     ldaxysp
0000D1r 1  85 rr        	sta     regsave
0000D3r 1  86 rr        	stx     regsave+1
0000D5r 1  20 rr rr     	jsr     incax1
0000D8r 1  A0 02        	ldy     #$02
0000DAr 1  20 rr rr     	jsr     staxysp
0000DDr 1  A5 rr        	lda     regsave
0000DFr 1  A6 rr        	ldx     regsave+1
0000E1r 1  4C rr rr     	jmp     L0027
0000E4r 1  20 rr rr     L0028:	jsr     incsp4
0000E7r 1  60           	rts
0000E8r 1               
0000E8r 1               .endproc
0000E8r 1               
0000E8r 1               ; ---------------------------------------------------------------
0000E8r 1               ; void __near__ writeBlock (unsigned long)
0000E8r 1               ; ---------------------------------------------------------------
0000E8r 1               
0000E8r 1               .segment	"CODE"
0000E8r 1               
0000E8r 1               .proc	_writeBlock: near
0000E8r 1               
0000E8r 1               .segment	"CODE"
0000E8r 1               
0000E8r 1  20 rr rr     	jsr     pusheax
0000EBr 1  20 rr rr     	jsr     decsp4
0000EEr 1  A0 04        	ldy     #$04
0000F0r 1  A2 00        	ldx     #$00
0000F2r 1  B1 rr        	lda     (sp),y
0000F4r 1  8D 12 F0     	sta     $F012
0000F7r 1  A0 07        	ldy     #$07
0000F9r 1  20 rr rr     	jsr     ldeaxysp
0000FCr 1  8A           	txa
0000FDr 1  A6 rr        	ldx     sreg
0000FFr 1  A4 rr        	ldy     sreg+1
000101r 1  84 rr        	sty     sreg
000103r 1  A0 00        	ldy     #$00
000105r 1  84 rr        	sty     sreg+1
000107r 1  A2 00        	ldx     #$00
000109r 1  8D 13 F0     	sta     $F013
00010Cr 1  A0 07        	ldy     #$07
00010Er 1  20 rr rr     	jsr     ldeaxysp
000111r 1  A0 00        	ldy     #$00
000113r 1  A6 rr        	ldx     sreg+1
000115r 1  A5 rr        	lda     sreg
000117r 1  84 rr        	sty     sreg+1
000119r 1  84 rr        	sty     sreg
00011Br 1  A2 00        	ldx     #$00
00011Dr 1  8D 14 F0     	sta     $F014
000120r 1  A2 E2        	ldx     #$E2
000122r 1  A9 00        	lda     #$00
000124r 1  A0 00        	ldy     #$00
000126r 1  20 rr rr     	jsr     staxysp
000129r 1  20 rr rr     	jsr     _waitSDCardReady
00012Cr 1  A9 01        	lda     #$01
00012Er 1  20 rr rr     	jsr     _issueSDCardCommand
000131r 1  A2 00        	ldx     #$00
000133r 1  A9 00        	lda     #$00
000135r 1  A0 02        	ldy     #$02
000137r 1  20 rr rr     	jsr     staxysp
00013Ar 1  A0 03        L003F:	ldy     #$03
00013Cr 1  20 rr rr     	jsr     ldaxysp
00013Fr 1  E0 02        	cpx     #$02
000141r 1  20 rr rr     	jsr     boolult
000144r 1  F0 03 4C rr  	jne     L0042
000148r 1  rr           
000149r 1  4C rr rr     	jmp     L0040
00014Cr 1  A0 01        L0042:	ldy     #$01
00014Er 1  20 rr rr     	jsr     ldaxysp
000151r 1  85 rr        	sta     regsave
000153r 1  86 rr        	stx     regsave+1
000155r 1  20 rr rr     	jsr     incax1
000158r 1  A0 00        	ldy     #$00
00015Ar 1  20 rr rr     	jsr     staxysp
00015Dr 1  A5 rr        	lda     regsave
00015Fr 1  A6 rr        	ldx     regsave+1
000161r 1  A0 00        	ldy     #$00
000163r 1  20 rr rr     	jsr     ldauidx
000166r 1  20 rr rr     	jsr     _writeByteToSDCard
000169r 1  A0 03        	ldy     #$03
00016Br 1  20 rr rr     	jsr     ldaxysp
00016Er 1  85 rr        	sta     regsave
000170r 1  86 rr        	stx     regsave+1
000172r 1  20 rr rr     	jsr     incax1
000175r 1  A0 02        	ldy     #$02
000177r 1  20 rr rr     	jsr     staxysp
00017Ar 1  A5 rr        	lda     regsave
00017Cr 1  A6 rr        	ldx     regsave+1
00017Er 1  4C rr rr     	jmp     L003F
000181r 1  20 rr rr     L0040:	jsr     incsp8
000184r 1  60           	rts
000185r 1               
000185r 1               .endproc
000185r 1               
000185r 1               ; ---------------------------------------------------------------
000185r 1               ; void __near__ readSector (unsigned long)
000185r 1               ; ---------------------------------------------------------------
000185r 1               
000185r 1               .segment	"CODE"
000185r 1               
000185r 1               .proc	_readSector: near
000185r 1               
000185r 1               .segment	"CODE"
000185r 1               
000185r 1  20 rr rr     	jsr     pusheax
000188r 1  A0 00        	ldy     #$00
00018Ar 1  A2 00        	ldx     #$00
00018Cr 1  B1 rr        	lda     (sp),y
00018Er 1  8D 12 F0     	sta     $F012
000191r 1  A0 03        	ldy     #$03
000193r 1  20 rr rr     	jsr     ldeaxysp
000196r 1  8A           	txa
000197r 1  A6 rr        	ldx     sreg
000199r 1  A4 rr        	ldy     sreg+1
00019Br 1  84 rr        	sty     sreg
00019Dr 1  A0 00        	ldy     #$00
00019Fr 1  84 rr        	sty     sreg+1
0001A1r 1  A2 00        	ldx     #$00
0001A3r 1  8D 13 F0     	sta     $F013
0001A6r 1  A0 03        	ldy     #$03
0001A8r 1  20 rr rr     	jsr     ldeaxysp
0001ABr 1  A0 00        	ldy     #$00
0001ADr 1  A6 rr        	ldx     sreg+1
0001AFr 1  A5 rr        	lda     sreg
0001B1r 1  84 rr        	sty     sreg+1
0001B3r 1  84 rr        	sty     sreg
0001B5r 1  A2 00        	ldx     #$00
0001B7r 1  8D 14 F0     	sta     $F014
0001BAr 1  20 rr rr     	jsr     _readBlock
0001BDr 1  20 rr rr     	jsr     incsp4
0001C0r 1  60           	rts
0001C1r 1               
0001C1r 1               .endproc
0001C1r 1               
0001C1r 1               ; ---------------------------------------------------------------
0001C1r 1               ; void __near__ setSRAMBank (unsigned char)
0001C1r 1               ; ---------------------------------------------------------------
0001C1r 1               
0001C1r 1               .segment	"CODE"
0001C1r 1               
0001C1r 1               .proc	_setSRAMBank: near
0001C1r 1               
0001C1r 1               .segment	"CODE"
0001C1r 1               
0001C1r 1  20 rr rr     	jsr     pusha
0001C4r 1  A0 00        	ldy     #$00
0001C6r 1  A2 00        	ldx     #$00
0001C8r 1  B1 rr        	lda     (sp),y
0001CAr 1  8D 05 F0     	sta     $F005
0001CDr 1  20 rr rr     	jsr     incsp1
0001D0r 1  60           	rts
0001D1r 1               
0001D1r 1               .endproc
0001D1r 1               
0001D1r 1               ; ---------------------------------------------------------------
0001D1r 1               ; void __near__ readFile (unsigned short)
0001D1r 1               ; ---------------------------------------------------------------
0001D1r 1               
0001D1r 1               .segment	"CODE"
0001D1r 1               
0001D1r 1               .proc	_readFile: near
0001D1r 1               
0001D1r 1               .segment	"CODE"
0001D1r 1               
0001D1r 1  20 rr rr     	jsr     pushax
0001D4r 1  A0 01        	ldy     #$01
0001D6r 1  20 rr rr     	jsr     ldaxysp
0001D9r 1  20 rr rr     	jsr     shlax4
0001DCr 1  20 rr rr     	jsr     shlax1
0001DFr 1  20 rr rr     	jsr     pushax
0001E2r 1  A2 E0        	ldx     #$E0
0001E4r 1  A9 00        	lda     #$00
0001E6r 1  20 rr rr     	jsr     tosaddax
0001E9r 1  A0 14        	ldy     #$14
0001EBr 1  20 rr rr     	jsr     incaxy
0001EEr 1  A0 01        	ldy     #$01
0001F0r 1  20 rr rr     	jsr     ldaxidx
0001F3r 1  8D rr rr     	sta     _DIR_FstClusHI_16
0001F6r 1  8E rr rr     	stx     _DIR_FstClusHI_16+1
0001F9r 1  A0 01        	ldy     #$01
0001FBr 1  20 rr rr     	jsr     ldaxysp
0001FEr 1  20 rr rr     	jsr     shlax4
000201r 1  20 rr rr     	jsr     shlax1
000204r 1  20 rr rr     	jsr     pushax
000207r 1  A2 E0        	ldx     #$E0
000209r 1  A9 00        	lda     #$00
00020Br 1  20 rr rr     	jsr     tosaddax
00020Er 1  A0 1A        	ldy     #$1A
000210r 1  20 rr rr     	jsr     incaxy
000213r 1  A0 01        	ldy     #$01
000215r 1  20 rr rr     	jsr     ldaxidx
000218r 1  8D rr rr     	sta     _DIR_FstClusLo_16
00021Br 1  8E rr rr     	stx     _DIR_FstClusLo_16+1
00021Er 1  AD rr rr     	lda     _DIR_FstClusHI_16
000221r 1  AE rr rr     	ldx     _DIR_FstClusHI_16+1
000224r 1  20 rr rr     	jsr     axulong
000227r 1  8D rr rr     	sta     _fileSectorNum_32
00022Ar 1  8E rr rr     	stx     _fileSectorNum_32+1
00022Dr 1  A4 rr        	ldy     sreg
00022Fr 1  8C rr rr     	sty     _fileSectorNum_32+2
000232r 1  A4 rr        	ldy     sreg+1
000234r 1  8C rr rr     	sty     _fileSectorNum_32+3
000237r 1  AD rr rr     	lda     _fileSectorNum_32+3
00023Ar 1  85 rr        	sta     sreg+1
00023Cr 1  AD rr rr     	lda     _fileSectorNum_32+2
00023Fr 1  85 rr        	sta     sreg
000241r 1  AE rr rr     	ldx     _fileSectorNum_32+1
000244r 1  AD rr rr     	lda     _fileSectorNum_32
000247r 1  86 rr        	stx     sreg+1
000249r 1  85 rr        	sta     sreg
00024Br 1  A9 00        	lda     #$00
00024Dr 1  AA           	tax
00024Er 1  8D rr rr     	sta     _fileSectorNum_32
000251r 1  8E rr rr     	stx     _fileSectorNum_32+1
000254r 1  A4 rr        	ldy     sreg
000256r 1  8C rr rr     	sty     _fileSectorNum_32+2
000259r 1  A4 rr        	ldy     sreg+1
00025Br 1  8C rr rr     	sty     _fileSectorNum_32+3
00025Er 1  AD rr rr     	lda     _fileSectorNum_32+3
000261r 1  85 rr        	sta     sreg+1
000263r 1  AD rr rr     	lda     _fileSectorNum_32+2
000266r 1  85 rr        	sta     sreg
000268r 1  AE rr rr     	ldx     _fileSectorNum_32+1
00026Br 1  AD rr rr     	lda     _fileSectorNum_32
00026Er 1  20 rr rr     	jsr     pusheax
000271r 1  AD rr rr     	lda     _DIR_FstClusLo_16
000274r 1  AE rr rr     	ldx     _DIR_FstClusLo_16+1
000277r 1  20 rr rr     	jsr     axulong
00027Ar 1  20 rr rr     	jsr     tosaddeax
00027Dr 1  8D rr rr     	sta     _fileSectorNum_32
000280r 1  8E rr rr     	stx     _fileSectorNum_32+1
000283r 1  A4 rr        	ldy     sreg
000285r 1  8C rr rr     	sty     _fileSectorNum_32+2
000288r 1  A4 rr        	ldy     sreg+1
00028Ar 1  8C rr rr     	sty     _fileSectorNum_32+3
00028Dr 1  AD rr rr     	lda     _fileSectorNum_32+3
000290r 1  85 rr        	sta     sreg+1
000292r 1  AD rr rr     	lda     _fileSectorNum_32+2
000295r 1  85 rr        	sta     sreg
000297r 1  AE rr rr     	ldx     _fileSectorNum_32+1
00029Ar 1  AD rr rr     	lda     _fileSectorNum_32
00029Dr 1  20 rr rr     	jsr     pusheax
0002A0r 1  A2 FF        	ldx     #$FF
0002A2r 1  86 rr        	stx     sreg
0002A4r 1  86 rr        	stx     sreg+1
0002A6r 1  A9 FE        	lda     #$FE
0002A8r 1  20 rr rr     	jsr     tosaddeax
0002ABr 1  20 rr rr     	jsr     pusheax
0002AEr 1  A2 00        	ldx     #$00
0002B0r 1  AD rr rr     	lda     _BPB_SecPerClus_8
0002B3r 1  20 rr rr     	jsr     axulong
0002B6r 1  20 rr rr     	jsr     tosumuleax
0002B9r 1  8D rr rr     	sta     _fileSectorNum_32
0002BCr 1  8E rr rr     	stx     _fileSectorNum_32+1
0002BFr 1  A4 rr        	ldy     sreg
0002C1r 1  8C rr rr     	sty     _fileSectorNum_32+2
0002C4r 1  A4 rr        	ldy     sreg+1
0002C6r 1  8C rr rr     	sty     _fileSectorNum_32+3
0002C9r 1  AD rr rr     	lda     _fileSectorNum_32+3
0002CCr 1  85 rr        	sta     sreg+1
0002CEr 1  AD rr rr     	lda     _fileSectorNum_32+2
0002D1r 1  85 rr        	sta     sreg
0002D3r 1  AE rr rr     	ldx     _fileSectorNum_32+1
0002D6r 1  AD rr rr     	lda     _fileSectorNum_32
0002D9r 1  20 rr rr     	jsr     pusheax
0002DCr 1  AD rr rr     	lda     _firstDataSectorNum_32+3
0002DFr 1  85 rr        	sta     sreg+1
0002E1r 1  AD rr rr     	lda     _firstDataSectorNum_32+2
0002E4r 1  85 rr        	sta     sreg
0002E6r 1  AE rr rr     	ldx     _firstDataSectorNum_32+1
0002E9r 1  AD rr rr     	lda     _firstDataSectorNum_32
0002ECr 1  20 rr rr     	jsr     tosaddeax
0002EFr 1  8D rr rr     	sta     _fileSectorNum_32
0002F2r 1  8E rr rr     	stx     _fileSectorNum_32+1
0002F5r 1  A4 rr        	ldy     sreg
0002F7r 1  8C rr rr     	sty     _fileSectorNum_32+2
0002FAr 1  A4 rr        	ldy     sreg+1
0002FCr 1  8C rr rr     	sty     _fileSectorNum_32+3
0002FFr 1  AD rr rr     	lda     _fileSectorNum_32+3
000302r 1  85 rr        	sta     sreg+1
000304r 1  AD rr rr     	lda     _fileSectorNum_32+2
000307r 1  85 rr        	sta     sreg
000309r 1  AE rr rr     	ldx     _fileSectorNum_32+1
00030Cr 1  AD rr rr     	lda     _fileSectorNum_32
00030Fr 1  20 rr rr     	jsr     _readSector
000312r 1  20 rr rr     	jsr     incsp2
000315r 1  60           	rts
000316r 1               
000316r 1               .endproc
000316r 1               
000316r 1               ; ---------------------------------------------------------------
000316r 1               ; void __near__ main (void)
000316r 1               ; ---------------------------------------------------------------
000316r 1               
000316r 1               .segment	"CODE"
000316r 1               
000316r 1               .proc	_main: near
000316r 1               
000316r 1               .segment	"CODE"
000316r 1               
000316r 1  A9 00        	lda     #$00
000318r 1  20 rr rr     	jsr     _setSRAMBank
00031Br 1  A2 00        	ldx     #$00
00031Dr 1  86 rr        	stx     sreg
00031Fr 1  86 rr        	stx     sreg+1
000321r 1  A9 00        	lda     #$00
000323r 1  20 rr rr     	jsr     _readSector
000326r 1  AD 0E E0     	lda     $E00E
000329r 1  AE 0F E0     	ldx     $E00E+1
00032Cr 1  8D rr rr     	sta     _BPB_RsvdSecCnt_16
00032Fr 1  8E rr rr     	stx     _BPB_RsvdSecCnt_16+1
000332r 1  A2 00        	ldx     #$00
000334r 1  AD 10 E0     	lda     $E010
000337r 1  8D rr rr     	sta     _BPB_NumFATs_8
00033Ar 1  AD 27 E0     	lda     $E024+3
00033Dr 1  85 rr        	sta     sreg+1
00033Fr 1  AD 26 E0     	lda     $E024+2
000342r 1  85 rr        	sta     sreg
000344r 1  AE 25 E0     	ldx     $E024+1
000347r 1  AD 24 E0     	lda     $E024
00034Ar 1  8D rr rr     	sta     _BPB_FATSz32_32
00034Dr 1  8E rr rr     	stx     _BPB_FATSz32_32+1
000350r 1  A4 rr        	ldy     sreg
000352r 1  8C rr rr     	sty     _BPB_FATSz32_32+2
000355r 1  A4 rr        	ldy     sreg+1
000357r 1  8C rr rr     	sty     _BPB_FATSz32_32+3
00035Ar 1  A2 00        	ldx     #$00
00035Cr 1  AD 0D E0     	lda     $E00D
00035Fr 1  8D rr rr     	sta     _BPB_SecPerClus_8
000362r 1  AD rr rr     	lda     _BPB_RsvdSecCnt_16
000365r 1  AE rr rr     	ldx     _BPB_RsvdSecCnt_16+1
000368r 1  20 rr rr     	jsr     pushax
00036Br 1  AD rr rr     	lda     _BPB_FATSz32_32+3
00036Er 1  85 rr        	sta     sreg+1
000370r 1  AD rr rr     	lda     _BPB_FATSz32_32+2
000373r 1  85 rr        	sta     sreg
000375r 1  AE rr rr     	ldx     _BPB_FATSz32_32+1
000378r 1  AD rr rr     	lda     _BPB_FATSz32_32
00037Br 1  20 rr rr     	jsr     shleax1
00037Er 1  20 rr rr     	jsr     tosulong
000381r 1  20 rr rr     	jsr     tosaddeax
000384r 1  8D rr rr     	sta     _firstDataSectorNum_32
000387r 1  8E rr rr     	stx     _firstDataSectorNum_32+1
00038Ar 1  A4 rr        	ldy     sreg
00038Cr 1  8C rr rr     	sty     _firstDataSectorNum_32+2
00038Fr 1  A4 rr        	ldy     sreg+1
000391r 1  8C rr rr     	sty     _firstDataSectorNum_32+3
000394r 1  AD rr rr     	lda     _firstDataSectorNum_32+3
000397r 1  85 rr        	sta     sreg+1
000399r 1  AD rr rr     	lda     _firstDataSectorNum_32+2
00039Cr 1  85 rr        	sta     sreg
00039Er 1  AE rr rr     	ldx     _firstDataSectorNum_32+1
0003A1r 1  AD rr rr     	lda     _firstDataSectorNum_32
0003A4r 1  20 rr rr     	jsr     _readSector
0003A7r 1  A2 00        	ldx     #$00
0003A9r 1  A9 04        	lda     #$04
0003ABr 1  20 rr rr     	jsr     _readFile
0003AEr 1  60           	rts
0003AFr 1               
0003AFr 1               .endproc
0003AFr 1               
0003AFr 1               
