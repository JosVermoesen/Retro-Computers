ca65 V2.17 - Git de519b9
Main file   : hello.s
Current file: hello.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git de519b9
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git de519b9"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_clrscr
000000r 1               	.import		_cprintf
000000r 1               	.import		_cgetc
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0046:
000000r 1  0A 0D 43 6F  	.byte	$0A,$0D,$43,$6F,$6D,$6D,$61,$6E,$64,$73,$3A,$20,$4D,$6F,$75,$6E
000004r 1  6D 6D 61 6E  
000008r 1  64 73 3A 20  
000010r 1  74 2F 44 69  	.byte	$74,$2F,$44,$69,$72,$2F,$43,$68,$64,$69,$72,$2F,$4C,$6F,$61,$64
000014r 1  72 2F 43 68  
000018r 1  64 69 72 2F  
000020r 1  2F 52 75 6E  	.byte	$2F,$52,$75,$6E,$2F,$53,$61,$76,$65,$2F,$42,$61,$73,$69,$63,$2F
000024r 1  2F 53 61 76  
000028r 1  65 2F 42 61  
000030r 1  57 61 72 6D  	.byte	$57,$61,$72,$6D,$2F,$65,$58,$69,$74,$00
000034r 1  2F 65 58 69  
000038r 1  74 00        
00003Ar 1               L000C:
00003Ar 1  0A 0D 43 6F  	.byte	$0A,$0D,$43,$6F,$6D,$6D,$61,$6E,$64,$20,$28,$4D,$2F,$44,$2F,$43
00003Er 1  6D 6D 61 6E  
000042r 1  64 20 28 4D  
00004Ar 1  2F 4C 2F 52  	.byte	$2F,$4C,$2F,$52,$2F,$42,$2F,$57,$2F,$3F,$2F,$58,$29,$20,$3E,$20
00004Er 1  2F 42 2F 57  
000052r 1  2F 3F 2F 58  
00005Ar 1  00           	.byte	$00
00005Br 1               L0042:
00005Br 1  57 61 72 6D  	.byte	$57,$61,$72,$6D,$20,$53,$74,$61,$72,$74,$20,$00
00005Fr 1  20 53 74 61  
000063r 1  72 74 20 00  
000067r 1               L0024:
000067r 1  43 68 64 69  	.byte	$43,$68,$64,$69,$72,$20,$00
00006Br 1  72 20 00     
00006Er 1               L003C:
00006Er 1  42 61 73 69  	.byte	$42,$61,$73,$69,$63,$20,$00
000072r 1  63 20 00     
000075r 1               L0018:
000075r 1  4D 6F 75 6E  	.byte	$4D,$6F,$75,$6E,$74,$20,$00
000079r 1  74 20 00     
00007Cr 1               L002A:
00007Cr 1  4C 6F 61 64  	.byte	$4C,$6F,$61,$64,$20,$00
000080r 1  20 00        
000082r 1               L0036:
000082r 1  53 61 76 65  	.byte	$53,$61,$76,$65,$20,$00
000086r 1  20 00        
000088r 1               L0030:
000088r 1  52 75 6E 20  	.byte	$52,$75,$6E,$20,$00
00008Cr 1  00           
00008Dr 1               L001E:
00008Dr 1  44 69 72 20  	.byte	$44,$69,$72,$20,$00
000091r 1  00           
000092r 1               
000092r 1               ; ---------------------------------------------------------------
000092r 1               ; int __near__ main (void)
000092r 1               ; ---------------------------------------------------------------
000092r 1               
000092r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp1
000003r 1  A9 01        	lda     #$01
000005r 1  20 rr rr     	jsr     pusha
000008r 1  A9 00        	lda     #$00
00000Ar 1  20 rr rr     	jsr     pusha
00000Dr 1  4C rr rr     	jmp     L0048
000010r 1  A0 00        L0004:	ldy     #$00
000012r 1  A2 00        	ldx     #$00
000014r 1  B1 rr        	lda     (sp),y
000016r 1  C9 00        	cmp     #$00
000018r 1  20 rr rr     	jsr     booleq
00001Br 1  D0 03 4C rr  	jeq     L0008
00001Fr 1  rr           
000020r 1  20 rr rr     	jsr     _clrscr
000023r 1  A9 rr        L0008:	lda     #<(L000C)
000025r 1  A2 rr        	ldx     #>(L000C)
000027r 1  20 rr rr     	jsr     pushax
00002Ar 1  A0 02        	ldy     #$02
00002Cr 1  20 rr rr     	jsr     _cprintf
00002Fr 1  20 rr rr     	jsr     _cgetc
000032r 1  A0 02        	ldy     #$02
000034r 1  91 rr        	sta     (sp),y
000036r 1  A0 02        	ldy     #$02
000038r 1  A2 00        	ldx     #$00
00003Ar 1  B1 rr        	lda     (sp),y
00003Cr 1  C9 58        	cmp     #$58
00003Er 1  20 rr rr     	jsr     booleq
000041r 1  D0 03 4C rr  	jeq     L0010
000045r 1  rr           
000046r 1  A2 00        	ldx     #$00
000048r 1  A9 00        	lda     #$00
00004Ar 1  A0 01        	ldy     #$01
00004Cr 1  91 rr        	sta     (sp),y
00004Er 1  4C rr rr     	jmp     L0044
000051r 1  A0 02        L0010:	ldy     #$02
000053r 1  A2 00        	ldx     #$00
000055r 1  B1 rr        	lda     (sp),y
000057r 1  C9 4D        	cmp     #$4D
000059r 1  20 rr rr     	jsr     booleq
00005Cr 1  D0 03 4C rr  	jeq     L0015
000060r 1  rr           
000061r 1  A9 rr        	lda     #<(L0018)
000063r 1  A2 rr        	ldx     #>(L0018)
000065r 1  20 rr rr     	jsr     pushax
000068r 1  A0 02        	ldy     #$02
00006Ar 1  20 rr rr     	jsr     _cprintf
00006Dr 1  4C rr rr     	jmp     L0044
000070r 1  A0 02        L0015:	ldy     #$02
000072r 1  A2 00        	ldx     #$00
000074r 1  B1 rr        	lda     (sp),y
000076r 1  C9 44        	cmp     #$44
000078r 1  20 rr rr     	jsr     booleq
00007Br 1  D0 03 4C rr  	jeq     L001B
00007Fr 1  rr           
000080r 1  A9 rr        	lda     #<(L001E)
000082r 1  A2 rr        	ldx     #>(L001E)
000084r 1  20 rr rr     	jsr     pushax
000087r 1  A0 02        	ldy     #$02
000089r 1  20 rr rr     	jsr     _cprintf
00008Cr 1  4C rr rr     	jmp     L0044
00008Fr 1  A0 02        L001B:	ldy     #$02
000091r 1  A2 00        	ldx     #$00
000093r 1  B1 rr        	lda     (sp),y
000095r 1  C9 43        	cmp     #$43
000097r 1  20 rr rr     	jsr     booleq
00009Ar 1  D0 03 4C rr  	jeq     L0021
00009Er 1  rr           
00009Fr 1  A9 rr        	lda     #<(L0024)
0000A1r 1  A2 rr        	ldx     #>(L0024)
0000A3r 1  20 rr rr     	jsr     pushax
0000A6r 1  A0 02        	ldy     #$02
0000A8r 1  20 rr rr     	jsr     _cprintf
0000ABr 1  4C rr rr     	jmp     L0044
0000AEr 1  A0 02        L0021:	ldy     #$02
0000B0r 1  A2 00        	ldx     #$00
0000B2r 1  B1 rr        	lda     (sp),y
0000B4r 1  C9 4C        	cmp     #$4C
0000B6r 1  20 rr rr     	jsr     booleq
0000B9r 1  D0 03 4C rr  	jeq     L0027
0000BDr 1  rr           
0000BEr 1  A9 rr        	lda     #<(L002A)
0000C0r 1  A2 rr        	ldx     #>(L002A)
0000C2r 1  20 rr rr     	jsr     pushax
0000C5r 1  A0 02        	ldy     #$02
0000C7r 1  20 rr rr     	jsr     _cprintf
0000CAr 1  4C rr rr     	jmp     L0044
0000CDr 1  A0 02        L0027:	ldy     #$02
0000CFr 1  A2 00        	ldx     #$00
0000D1r 1  B1 rr        	lda     (sp),y
0000D3r 1  C9 52        	cmp     #$52
0000D5r 1  20 rr rr     	jsr     booleq
0000D8r 1  D0 03 4C rr  	jeq     L002D
0000DCr 1  rr           
0000DDr 1  A9 rr        	lda     #<(L0030)
0000DFr 1  A2 rr        	ldx     #>(L0030)
0000E1r 1  20 rr rr     	jsr     pushax
0000E4r 1  A0 02        	ldy     #$02
0000E6r 1  20 rr rr     	jsr     _cprintf
0000E9r 1  4C rr rr     	jmp     L0044
0000ECr 1  A0 02        L002D:	ldy     #$02
0000EEr 1  A2 00        	ldx     #$00
0000F0r 1  B1 rr        	lda     (sp),y
0000F2r 1  C9 53        	cmp     #$53
0000F4r 1  20 rr rr     	jsr     booleq
0000F7r 1  D0 03 4C rr  	jeq     L0033
0000FBr 1  rr           
0000FCr 1  A9 rr        	lda     #<(L0036)
0000FEr 1  A2 rr        	ldx     #>(L0036)
000100r 1  20 rr rr     	jsr     pushax
000103r 1  A0 02        	ldy     #$02
000105r 1  20 rr rr     	jsr     _cprintf
000108r 1  4C rr rr     	jmp     L0044
00010Br 1  A0 02        L0033:	ldy     #$02
00010Dr 1  A2 00        	ldx     #$00
00010Fr 1  B1 rr        	lda     (sp),y
000111r 1  C9 42        	cmp     #$42
000113r 1  20 rr rr     	jsr     booleq
000116r 1  D0 03 4C rr  	jeq     L0039
00011Ar 1  rr           
00011Br 1  A9 rr        	lda     #<(L003C)
00011Dr 1  A2 rr        	ldx     #>(L003C)
00011Fr 1  20 rr rr     	jsr     pushax
000122r 1  A0 02        	ldy     #$02
000124r 1  20 rr rr     	jsr     _cprintf
000127r 1  4C rr rr     	jmp     L0044
00012Ar 1  A0 02        L0039:	ldy     #$02
00012Cr 1  A2 00        	ldx     #$00
00012Er 1  B1 rr        	lda     (sp),y
000130r 1  C9 57        	cmp     #$57
000132r 1  20 rr rr     	jsr     booleq
000135r 1  D0 03 4C rr  	jeq     L003F
000139r 1  rr           
00013Ar 1  A9 rr        	lda     #<(L0042)
00013Cr 1  A2 rr        	ldx     #>(L0042)
00013Er 1  20 rr rr     	jsr     pushax
000141r 1  A0 02        	ldy     #$02
000143r 1  20 rr rr     	jsr     _cprintf
000146r 1  4C rr rr     	jmp     L0044
000149r 1  A9 rr        L003F:	lda     #<(L0046)
00014Br 1  A2 rr        	ldx     #>(L0046)
00014Dr 1  20 rr rr     	jsr     pushax
000150r 1  A0 02        	ldy     #$02
000152r 1  20 rr rr     	jsr     _cprintf
000155r 1  A0 00        L0044:	ldy     #$00
000157r 1  A2 00        	ldx     #$00
000159r 1  B1 rr        	lda     (sp),y
00015Br 1  48           	pha
00015Cr 1  18           	clc
00015Dr 1  69 01        	adc     #$01
00015Fr 1  A0 00        	ldy     #$00
000161r 1  91 rr        	sta     (sp),y
000163r 1  68           	pla
000164r 1  C9 0E        	cmp     #$0E
000166r 1  20 rr rr     	jsr     booleq
000169r 1  D0 03 4C rr  	jeq     L0048
00016Dr 1  rr           
00016Er 1  A2 00        	ldx     #$00
000170r 1  A9 00        	lda     #$00
000172r 1  A0 00        	ldy     #$00
000174r 1  91 rr        	sta     (sp),y
000176r 1  A0 01        L0048:	ldy     #$01
000178r 1  A2 00        	ldx     #$00
00017Ar 1  B1 rr        	lda     (sp),y
00017Cr 1  C9 01        	cmp     #$01
00017Er 1  20 rr rr     	jsr     booleq
000181r 1  F0 03 4C rr  	jne     L0004
000185r 1  rr           
000186r 1  A2 00        	ldx     #$00
000188r 1  A9 00        	lda     #$00
00018Ar 1  4C rr rr     	jmp     L0001
00018Dr 1  20 rr rr     L0001:	jsr     incsp3
000190r 1  60           	rts
000191r 1               
000191r 1               .endproc
000191r 1               
000191r 1               
