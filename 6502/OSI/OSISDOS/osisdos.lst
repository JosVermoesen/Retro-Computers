ca65 V2.17 - Git de519b9
Main file   : OSISDOS.s
Current file: OSISDOS.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git de519b9
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git de519b9"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.export		_main
000000r 1               	.export		_setLBA0
000000r 1               	.export		_setLBA1
000000r 1               	.export		_setLBA2
000000r 1               	.export		_readBlock
000000r 1               	.export		_issueSDCardCommand
000000r 1               	.export		_waitSDCardReady
000000r 1               	.export		_waitSDCardRcvDataReady
000000r 1               	.export		_waitSDCardTxDataEmpty
000000r 1               	.export		_readByteFromSDCard
000000r 1               	.export		_writeByteToSDCard
000000r 1               	.export		_writeBlock
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A2 00        	ldx     #$00
000002r 1  A9 00        	lda     #$00
000004r 1  8D 05 F0     	sta     $F005
000007r 1  A9 00        	lda     #$00
000009r 1  20 rr rr     	jsr     _setLBA0
00000Cr 1  A9 00        	lda     #$00
00000Er 1  20 rr rr     	jsr     _setLBA1
000011r 1  A9 00        	lda     #$00
000013r 1  20 rr rr     	jsr     _setLBA2
000016r 1  20 rr rr     	jsr     _readBlock
000019r 1  60           	rts
00001Ar 1               
00001Ar 1               .endproc
00001Ar 1               
00001Ar 1               ; ---------------------------------------------------------------
00001Ar 1               ; void __near__ setLBA0 (unsigned char)
00001Ar 1               ; ---------------------------------------------------------------
00001Ar 1               
00001Ar 1               .segment	"CODE"
00001Ar 1               
00001Ar 1               .proc	_setLBA0: near
00001Ar 1               
00001Ar 1               .segment	"CODE"
00001Ar 1               
00001Ar 1  20 rr rr     	jsr     pusha
00001Dr 1  A0 00        	ldy     #$00
00001Fr 1  A2 00        	ldx     #$00
000021r 1  B1 rr        	lda     (sp),y
000023r 1  8D 02 F0     	sta     $F002
000026r 1  20 rr rr     	jsr     incsp1
000029r 1  60           	rts
00002Ar 1               
00002Ar 1               .endproc
00002Ar 1               
00002Ar 1               ; ---------------------------------------------------------------
00002Ar 1               ; void __near__ setLBA1 (unsigned char)
00002Ar 1               ; ---------------------------------------------------------------
00002Ar 1               
00002Ar 1               .segment	"CODE"
00002Ar 1               
00002Ar 1               .proc	_setLBA1: near
00002Ar 1               
00002Ar 1               .segment	"CODE"
00002Ar 1               
00002Ar 1  20 rr rr     	jsr     pusha
00002Dr 1  A0 00        	ldy     #$00
00002Fr 1  A2 00        	ldx     #$00
000031r 1  B1 rr        	lda     (sp),y
000033r 1  8D 03 F0     	sta     $F003
000036r 1  20 rr rr     	jsr     incsp1
000039r 1  60           	rts
00003Ar 1               
00003Ar 1               .endproc
00003Ar 1               
00003Ar 1               ; ---------------------------------------------------------------
00003Ar 1               ; void __near__ setLBA2 (unsigned char)
00003Ar 1               ; ---------------------------------------------------------------
00003Ar 1               
00003Ar 1               .segment	"CODE"
00003Ar 1               
00003Ar 1               .proc	_setLBA2: near
00003Ar 1               
00003Ar 1               .segment	"CODE"
00003Ar 1               
00003Ar 1  20 rr rr     	jsr     pusha
00003Dr 1  A0 00        	ldy     #$00
00003Fr 1  A2 00        	ldx     #$00
000041r 1  B1 rr        	lda     (sp),y
000043r 1  8D 04 F0     	sta     $F004
000046r 1  20 rr rr     	jsr     incsp1
000049r 1  60           	rts
00004Ar 1               
00004Ar 1               .endproc
00004Ar 1               
00004Ar 1               ; ---------------------------------------------------------------
00004Ar 1               ; void __near__ readBlock (void)
00004Ar 1               ; ---------------------------------------------------------------
00004Ar 1               
00004Ar 1               .segment	"CODE"
00004Ar 1               
00004Ar 1               .proc	_readBlock: near
00004Ar 1               
00004Ar 1               .segment	"CODE"
00004Ar 1               
00004Ar 1  20 rr rr     	jsr     decsp4
00004Dr 1  A2 E0        	ldx     #$E0
00004Fr 1  A9 00        	lda     #$00
000051r 1  A0 00        	ldy     #$00
000053r 1  20 rr rr     	jsr     staxysp
000056r 1  20 rr rr     	jsr     _waitSDCardReady
000059r 1  A9 00        	lda     #$00
00005Br 1  20 rr rr     	jsr     _issueSDCardCommand
00005Er 1  A2 00        	ldx     #$00
000060r 1  A9 00        	lda     #$00
000062r 1  A0 02        	ldy     #$02
000064r 1  20 rr rr     	jsr     staxysp
000067r 1  A0 03        L0036:	ldy     #$03
000069r 1  20 rr rr     	jsr     ldaxysp
00006Cr 1  E0 02        	cpx     #$02
00006Er 1  20 rr rr     	jsr     boolult
000071r 1  F0 03 4C rr  	jne     L0039
000075r 1  rr           
000076r 1  4C rr rr     	jmp     L0037
000079r 1  A0 01        L0039:	ldy     #$01
00007Br 1  20 rr rr     	jsr     ldaxysp
00007Er 1  85 rr        	sta     regsave
000080r 1  86 rr        	stx     regsave+1
000082r 1  20 rr rr     	jsr     incax1
000085r 1  A0 00        	ldy     #$00
000087r 1  20 rr rr     	jsr     staxysp
00008Ar 1  A5 rr        	lda     regsave
00008Cr 1  A6 rr        	ldx     regsave+1
00008Er 1  20 rr rr     	jsr     pushax
000091r 1  20 rr rr     	jsr     _readByteFromSDCard
000094r 1  A0 00        	ldy     #$00
000096r 1  20 rr rr     	jsr     staspidx
000099r 1  A0 03        	ldy     #$03
00009Br 1  20 rr rr     	jsr     ldaxysp
00009Er 1  85 rr        	sta     regsave
0000A0r 1  86 rr        	stx     regsave+1
0000A2r 1  20 rr rr     	jsr     incax1
0000A5r 1  A0 02        	ldy     #$02
0000A7r 1  20 rr rr     	jsr     staxysp
0000AAr 1  A5 rr        	lda     regsave
0000ACr 1  A6 rr        	ldx     regsave+1
0000AEr 1  4C rr rr     	jmp     L0036
0000B1r 1  20 rr rr     L0037:	jsr     incsp4
0000B4r 1  60           	rts
0000B5r 1               
0000B5r 1               .endproc
0000B5r 1               
0000B5r 1               ; ---------------------------------------------------------------
0000B5r 1               ; void __near__ issueSDCardCommand (unsigned char)
0000B5r 1               ; ---------------------------------------------------------------
0000B5r 1               
0000B5r 1               .segment	"CODE"
0000B5r 1               
0000B5r 1               .proc	_issueSDCardCommand: near
0000B5r 1               
0000B5r 1               .segment	"CODE"
0000B5r 1               
0000B5r 1  20 rr rr     	jsr     pusha
0000B8r 1  A0 00        	ldy     #$00
0000BAr 1  A2 00        	ldx     #$00
0000BCr 1  B1 rr        	lda     (sp),y
0000BEr 1  8D 01 F0     	sta     $F001
0000C1r 1  20 rr rr     	jsr     incsp1
0000C4r 1  60           	rts
0000C5r 1               
0000C5r 1               .endproc
0000C5r 1               
0000C5r 1               ; ---------------------------------------------------------------
0000C5r 1               ; void __near__ waitSDCardReady (void)
0000C5r 1               ; ---------------------------------------------------------------
0000C5r 1               
0000C5r 1               .segment	"CODE"
0000C5r 1               
0000C5r 1               .proc	_waitSDCardReady: near
0000C5r 1               
0000C5r 1               .segment	"CODE"
0000C5r 1               
0000C5r 1  4C rr rr     	jmp     L0018
0000C8r 1  A2 00        L0018:	ldx     #$00
0000CAr 1  AD 01 F0     	lda     $F001
0000CDr 1  C9 80        	cmp     #$80
0000CFr 1  20 rr rr     	jsr     boolne
0000D2r 1  D0 F4        	jne     L0018
0000D4r 1  60           	rts
0000D5r 1               
0000D5r 1               .endproc
0000D5r 1               
0000D5r 1               ; ---------------------------------------------------------------
0000D5r 1               ; void __near__ waitSDCardRcvDataReady (void)
0000D5r 1               ; ---------------------------------------------------------------
0000D5r 1               
0000D5r 1               .segment	"CODE"
0000D5r 1               
0000D5r 1               .proc	_waitSDCardRcvDataReady: near
0000D5r 1               
0000D5r 1               .segment	"CODE"
0000D5r 1               
0000D5r 1  4C rr rr     	jmp     L001D
0000D8r 1  A2 00        L001D:	ldx     #$00
0000DAr 1  AD 01 F0     	lda     $F001
0000DDr 1  C9 E0        	cmp     #$E0
0000DFr 1  20 rr rr     	jsr     boolne
0000E2r 1  D0 F4        	jne     L001D
0000E4r 1  60           	rts
0000E5r 1               
0000E5r 1               .endproc
0000E5r 1               
0000E5r 1               ; ---------------------------------------------------------------
0000E5r 1               ; void __near__ waitSDCardTxDataEmpty (void)
0000E5r 1               ; ---------------------------------------------------------------
0000E5r 1               
0000E5r 1               .segment	"CODE"
0000E5r 1               
0000E5r 1               .proc	_waitSDCardTxDataEmpty: near
0000E5r 1               
0000E5r 1               .segment	"CODE"
0000E5r 1               
0000E5r 1  4C rr rr     	jmp     L0022
0000E8r 1  A2 00        L0022:	ldx     #$00
0000EAr 1  AD 01 F0     	lda     $F001
0000EDr 1  C9 A0        	cmp     #$A0
0000EFr 1  20 rr rr     	jsr     boolne
0000F2r 1  D0 F4        	jne     L0022
0000F4r 1  60           	rts
0000F5r 1               
0000F5r 1               .endproc
0000F5r 1               
0000F5r 1               ; ---------------------------------------------------------------
0000F5r 1               ; unsigned char __near__ readByteFromSDCard (void)
0000F5r 1               ; ---------------------------------------------------------------
0000F5r 1               
0000F5r 1               .segment	"CODE"
0000F5r 1               
0000F5r 1               .proc	_readByteFromSDCard: near
0000F5r 1               
0000F5r 1               .segment	"CODE"
0000F5r 1               
0000F5r 1  20 rr rr     	jsr     decsp1
0000F8r 1  20 rr rr     	jsr     _waitSDCardRcvDataReady
0000FBr 1  A2 00        	ldx     #$00
0000FDr 1  AD 00 F0     	lda     $F000
000100r 1  A0 00        	ldy     #$00
000102r 1  91 rr        	sta     (sp),y
000104r 1  A0 00        	ldy     #$00
000106r 1  A2 00        	ldx     #$00
000108r 1  B1 rr        	lda     (sp),y
00010Ar 1  4C rr rr     	jmp     L0026
00010Dr 1  20 rr rr     L0026:	jsr     incsp1
000110r 1  60           	rts
000111r 1               
000111r 1               .endproc
000111r 1               
000111r 1               ; ---------------------------------------------------------------
000111r 1               ; void __near__ writeByteToSDCard (unsigned char)
000111r 1               ; ---------------------------------------------------------------
000111r 1               
000111r 1               .segment	"CODE"
000111r 1               
000111r 1               .proc	_writeByteToSDCard: near
000111r 1               
000111r 1               .segment	"CODE"
000111r 1               
000111r 1  20 rr rr     	jsr     pusha
000114r 1  20 rr rr     	jsr     _waitSDCardTxDataEmpty
000117r 1  A0 00        	ldy     #$00
000119r 1  A2 00        	ldx     #$00
00011Br 1  B1 rr        	lda     (sp),y
00011Dr 1  8D 00 F0     	sta     $F000
000120r 1  20 rr rr     	jsr     incsp1
000123r 1  60           	rts
000124r 1               
000124r 1               .endproc
000124r 1               
000124r 1               ; ---------------------------------------------------------------
000124r 1               ; void __near__ writeBlock (void)
000124r 1               ; ---------------------------------------------------------------
000124r 1               
000124r 1               .segment	"CODE"
000124r 1               
000124r 1               .proc	_writeBlock: near
000124r 1               
000124r 1               .segment	"CODE"
000124r 1               
000124r 1  20 rr rr     	jsr     decsp4
000127r 1  A2 E2        	ldx     #$E2
000129r 1  A9 00        	lda     #$00
00012Br 1  A0 00        	ldy     #$00
00012Dr 1  20 rr rr     	jsr     staxysp
000130r 1  20 rr rr     	jsr     _waitSDCardReady
000133r 1  A9 01        	lda     #$01
000135r 1  20 rr rr     	jsr     _issueSDCardCommand
000138r 1  A2 00        	ldx     #$00
00013Ar 1  A9 00        	lda     #$00
00013Cr 1  A0 02        	ldy     #$02
00013Er 1  20 rr rr     	jsr     staxysp
000141r 1  A0 03        L0046:	ldy     #$03
000143r 1  20 rr rr     	jsr     ldaxysp
000146r 1  E0 02        	cpx     #$02
000148r 1  20 rr rr     	jsr     boolult
00014Br 1  F0 03 4C rr  	jne     L0049
00014Fr 1  rr           
000150r 1  4C rr rr     	jmp     L0047
000153r 1  A0 01        L0049:	ldy     #$01
000155r 1  20 rr rr     	jsr     ldaxysp
000158r 1  85 rr        	sta     regsave
00015Ar 1  86 rr        	stx     regsave+1
00015Cr 1  20 rr rr     	jsr     incax1
00015Fr 1  A0 00        	ldy     #$00
000161r 1  20 rr rr     	jsr     staxysp
000164r 1  A5 rr        	lda     regsave
000166r 1  A6 rr        	ldx     regsave+1
000168r 1  A0 00        	ldy     #$00
00016Ar 1  20 rr rr     	jsr     ldauidx
00016Dr 1  20 rr rr     	jsr     _writeByteToSDCard
000170r 1  A0 03        	ldy     #$03
000172r 1  20 rr rr     	jsr     ldaxysp
000175r 1  85 rr        	sta     regsave
000177r 1  86 rr        	stx     regsave+1
000179r 1  20 rr rr     	jsr     incax1
00017Cr 1  A0 02        	ldy     #$02
00017Er 1  20 rr rr     	jsr     staxysp
000181r 1  A5 rr        	lda     regsave
000183r 1  A6 rr        	ldx     regsave+1
000185r 1  4C rr rr     	jmp     L0046
000188r 1  20 rr rr     L0047:	jsr     incsp4
00018Br 1  60           	rts
00018Cr 1               
00018Cr 1               .endproc
00018Cr 1               
00018Cr 1               
