ca65 V2.17 - Git de519b9
Main file   : osisdos.s
Current file: osisdos.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git de519b9
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git de519b9"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.export		_issueSDCardCommand
000000r 1               	.export		_setLBA0
000000r 1               	.export		_setLBA1
000000r 1               	.export		_setLBA2
000000r 1               	.export		_waitSDCardReady
000000r 1               	.export		_waitSDCardRcvDataReady
000000r 1               	.export		_waitSDCardTxDataEmpty
000000r 1               	.export		_readByteFromSDCard
000000r 1               	.export		_writeByteToSDCard
000000r 1               	.export		_readBlock
000000r 1               	.export		_writeBlock
000000r 1               	.export		_readSector
000000r 1               	.export		_setSRAMBank
000000r 1               	.export		_main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ issueSDCardCommand (unsigned char)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_issueSDCardCommand: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pusha
000003r 1  A0 00        	ldy     #$00
000005r 1  A2 00        	ldx     #$00
000007r 1  B1 rr        	lda     (sp),y
000009r 1  8D 11 F0     	sta     $F011
00000Cr 1  20 rr rr     	jsr     incsp1
00000Fr 1  60           	rts
000010r 1               
000010r 1               .endproc
000010r 1               
000010r 1               ; ---------------------------------------------------------------
000010r 1               ; void __near__ setLBA0 (unsigned char)
000010r 1               ; ---------------------------------------------------------------
000010r 1               
000010r 1               .segment	"CODE"
000010r 1               
000010r 1               .proc	_setLBA0: near
000010r 1               
000010r 1               .segment	"CODE"
000010r 1               
000010r 1  20 rr rr     	jsr     pusha
000013r 1  A0 00        	ldy     #$00
000015r 1  A2 00        	ldx     #$00
000017r 1  B1 rr        	lda     (sp),y
000019r 1  8D 12 F0     	sta     $F012
00001Cr 1  20 rr rr     	jsr     incsp1
00001Fr 1  60           	rts
000020r 1               
000020r 1               .endproc
000020r 1               
000020r 1               ; ---------------------------------------------------------------
000020r 1               ; void __near__ setLBA1 (unsigned char)
000020r 1               ; ---------------------------------------------------------------
000020r 1               
000020r 1               .segment	"CODE"
000020r 1               
000020r 1               .proc	_setLBA1: near
000020r 1               
000020r 1               .segment	"CODE"
000020r 1               
000020r 1  20 rr rr     	jsr     pusha
000023r 1  A0 00        	ldy     #$00
000025r 1  A2 00        	ldx     #$00
000027r 1  B1 rr        	lda     (sp),y
000029r 1  8D 13 F0     	sta     $F013
00002Cr 1  20 rr rr     	jsr     incsp1
00002Fr 1  60           	rts
000030r 1               
000030r 1               .endproc
000030r 1               
000030r 1               ; ---------------------------------------------------------------
000030r 1               ; void __near__ setLBA2 (unsigned char)
000030r 1               ; ---------------------------------------------------------------
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1               .proc	_setLBA2: near
000030r 1               
000030r 1               .segment	"CODE"
000030r 1               
000030r 1  20 rr rr     	jsr     pusha
000033r 1  A0 00        	ldy     #$00
000035r 1  A2 00        	ldx     #$00
000037r 1  B1 rr        	lda     (sp),y
000039r 1  8D 14 F0     	sta     $F014
00003Cr 1  20 rr rr     	jsr     incsp1
00003Fr 1  60           	rts
000040r 1               
000040r 1               .endproc
000040r 1               
000040r 1               ; ---------------------------------------------------------------
000040r 1               ; void __near__ waitSDCardReady (void)
000040r 1               ; ---------------------------------------------------------------
000040r 1               
000040r 1               .segment	"CODE"
000040r 1               
000040r 1               .proc	_waitSDCardReady: near
000040r 1               
000040r 1               .segment	"CODE"
000040r 1               
000040r 1  A2 00        	ldx     #$00
000042r 1  A9 01        	lda     #$01
000044r 1  8D 04 F0     	sta     $F004
000047r 1  4C rr rr     	jmp     L0010
00004Ar 1  A2 00        L0010:	ldx     #$00
00004Cr 1  AD 11 F0     	lda     $F011
00004Fr 1  C9 80        	cmp     #$80
000051r 1  20 rr rr     	jsr     boolne
000054r 1  D0 F4        	jne     L0010
000056r 1  A2 00        	ldx     #$00
000058r 1  A9 00        	lda     #$00
00005Ar 1  8D 04 F0     	sta     $F004
00005Dr 1  60           	rts
00005Er 1               
00005Er 1               .endproc
00005Er 1               
00005Er 1               ; ---------------------------------------------------------------
00005Er 1               ; void __near__ waitSDCardRcvDataReady (void)
00005Er 1               ; ---------------------------------------------------------------
00005Er 1               
00005Er 1               .segment	"CODE"
00005Er 1               
00005Er 1               .proc	_waitSDCardRcvDataReady: near
00005Er 1               
00005Er 1               .segment	"CODE"
00005Er 1               
00005Er 1  4C rr rr     	jmp     L0017
000061r 1  A2 00        L0017:	ldx     #$00
000063r 1  AD 11 F0     	lda     $F011
000066r 1  C9 E0        	cmp     #$E0
000068r 1  20 rr rr     	jsr     boolne
00006Br 1  D0 F4        	jne     L0017
00006Dr 1  60           	rts
00006Er 1               
00006Er 1               .endproc
00006Er 1               
00006Er 1               ; ---------------------------------------------------------------
00006Er 1               ; void __near__ waitSDCardTxDataEmpty (void)
00006Er 1               ; ---------------------------------------------------------------
00006Er 1               
00006Er 1               .segment	"CODE"
00006Er 1               
00006Er 1               .proc	_waitSDCardTxDataEmpty: near
00006Er 1               
00006Er 1               .segment	"CODE"
00006Er 1               
00006Er 1  4C rr rr     	jmp     L001C
000071r 1  A2 00        L001C:	ldx     #$00
000073r 1  AD 11 F0     	lda     $F011
000076r 1  C9 A0        	cmp     #$A0
000078r 1  20 rr rr     	jsr     boolne
00007Br 1  D0 F4        	jne     L001C
00007Dr 1  60           	rts
00007Er 1               
00007Er 1               .endproc
00007Er 1               
00007Er 1               ; ---------------------------------------------------------------
00007Er 1               ; unsigned char __near__ readByteFromSDCard (void)
00007Er 1               ; ---------------------------------------------------------------
00007Er 1               
00007Er 1               .segment	"CODE"
00007Er 1               
00007Er 1               .proc	_readByteFromSDCard: near
00007Er 1               
00007Er 1               .segment	"CODE"
00007Er 1               
00007Er 1  20 rr rr     	jsr     decsp1
000081r 1  20 rr rr     	jsr     _waitSDCardRcvDataReady
000084r 1  A2 00        	ldx     #$00
000086r 1  AD 10 F0     	lda     $F010
000089r 1  A0 00        	ldy     #$00
00008Br 1  91 rr        	sta     (sp),y
00008Dr 1  A0 00        	ldy     #$00
00008Fr 1  A2 00        	ldx     #$00
000091r 1  B1 rr        	lda     (sp),y
000093r 1  4C rr rr     	jmp     L0020
000096r 1  20 rr rr     L0020:	jsr     incsp1
000099r 1  60           	rts
00009Ar 1               
00009Ar 1               .endproc
00009Ar 1               
00009Ar 1               ; ---------------------------------------------------------------
00009Ar 1               ; void __near__ writeByteToSDCard (unsigned char)
00009Ar 1               ; ---------------------------------------------------------------
00009Ar 1               
00009Ar 1               .segment	"CODE"
00009Ar 1               
00009Ar 1               .proc	_writeByteToSDCard: near
00009Ar 1               
00009Ar 1               .segment	"CODE"
00009Ar 1               
00009Ar 1  20 rr rr     	jsr     pusha
00009Dr 1  20 rr rr     	jsr     _waitSDCardTxDataEmpty
0000A0r 1  A0 00        	ldy     #$00
0000A2r 1  A2 00        	ldx     #$00
0000A4r 1  B1 rr        	lda     (sp),y
0000A6r 1  8D 10 F0     	sta     $F010
0000A9r 1  20 rr rr     	jsr     incsp1
0000ACr 1  60           	rts
0000ADr 1               
0000ADr 1               .endproc
0000ADr 1               
0000ADr 1               ; ---------------------------------------------------------------
0000ADr 1               ; void __near__ readBlock (void)
0000ADr 1               ; ---------------------------------------------------------------
0000ADr 1               
0000ADr 1               .segment	"CODE"
0000ADr 1               
0000ADr 1               .proc	_readBlock: near
0000ADr 1               
0000ADr 1               .segment	"CODE"
0000ADr 1               
0000ADr 1  20 rr rr     	jsr     decsp4
0000B0r 1  A2 E0        	ldx     #$E0
0000B2r 1  A9 00        	lda     #$00
0000B4r 1  A0 00        	ldy     #$00
0000B6r 1  20 rr rr     	jsr     staxysp
0000B9r 1  20 rr rr     	jsr     _waitSDCardReady
0000BCr 1  A9 00        	lda     #$00
0000BEr 1  20 rr rr     	jsr     _issueSDCardCommand
0000C1r 1  A2 00        	ldx     #$00
0000C3r 1  A9 00        	lda     #$00
0000C5r 1  A0 02        	ldy     #$02
0000C7r 1  20 rr rr     	jsr     staxysp
0000CAr 1  A0 03        L0030:	ldy     #$03
0000CCr 1  20 rr rr     	jsr     ldaxysp
0000CFr 1  E0 02        	cpx     #$02
0000D1r 1  20 rr rr     	jsr     boolult
0000D4r 1  F0 03 4C rr  	jne     L0033
0000D8r 1  rr           
0000D9r 1  4C rr rr     	jmp     L0031
0000DCr 1  A0 01        L0033:	ldy     #$01
0000DEr 1  20 rr rr     	jsr     ldaxysp
0000E1r 1  85 rr        	sta     regsave
0000E3r 1  86 rr        	stx     regsave+1
0000E5r 1  20 rr rr     	jsr     incax1
0000E8r 1  A0 00        	ldy     #$00
0000EAr 1  20 rr rr     	jsr     staxysp
0000EDr 1  A5 rr        	lda     regsave
0000EFr 1  A6 rr        	ldx     regsave+1
0000F1r 1  20 rr rr     	jsr     pushax
0000F4r 1  20 rr rr     	jsr     _readByteFromSDCard
0000F7r 1  A0 00        	ldy     #$00
0000F9r 1  20 rr rr     	jsr     staspidx
0000FCr 1  A0 03        	ldy     #$03
0000FEr 1  20 rr rr     	jsr     ldaxysp
000101r 1  85 rr        	sta     regsave
000103r 1  86 rr        	stx     regsave+1
000105r 1  20 rr rr     	jsr     incax1
000108r 1  A0 02        	ldy     #$02
00010Ar 1  20 rr rr     	jsr     staxysp
00010Dr 1  A5 rr        	lda     regsave
00010Fr 1  A6 rr        	ldx     regsave+1
000111r 1  4C rr rr     	jmp     L0030
000114r 1  20 rr rr     L0031:	jsr     incsp4
000117r 1  60           	rts
000118r 1               
000118r 1               .endproc
000118r 1               
000118r 1               ; ---------------------------------------------------------------
000118r 1               ; void __near__ writeBlock (void)
000118r 1               ; ---------------------------------------------------------------
000118r 1               
000118r 1               .segment	"CODE"
000118r 1               
000118r 1               .proc	_writeBlock: near
000118r 1               
000118r 1               .segment	"CODE"
000118r 1               
000118r 1  20 rr rr     	jsr     decsp4
00011Br 1  A2 E2        	ldx     #$E2
00011Dr 1  A9 00        	lda     #$00
00011Fr 1  A0 00        	ldy     #$00
000121r 1  20 rr rr     	jsr     staxysp
000124r 1  20 rr rr     	jsr     _waitSDCardReady
000127r 1  A9 01        	lda     #$01
000129r 1  20 rr rr     	jsr     _issueSDCardCommand
00012Cr 1  A2 00        	ldx     #$00
00012Er 1  A9 00        	lda     #$00
000130r 1  A0 02        	ldy     #$02
000132r 1  20 rr rr     	jsr     staxysp
000135r 1  A0 03        L0040:	ldy     #$03
000137r 1  20 rr rr     	jsr     ldaxysp
00013Ar 1  E0 02        	cpx     #$02
00013Cr 1  20 rr rr     	jsr     boolult
00013Fr 1  F0 03 4C rr  	jne     L0043
000143r 1  rr           
000144r 1  4C rr rr     	jmp     L0041
000147r 1  A0 01        L0043:	ldy     #$01
000149r 1  20 rr rr     	jsr     ldaxysp
00014Cr 1  85 rr        	sta     regsave
00014Er 1  86 rr        	stx     regsave+1
000150r 1  20 rr rr     	jsr     incax1
000153r 1  A0 00        	ldy     #$00
000155r 1  20 rr rr     	jsr     staxysp
000158r 1  A5 rr        	lda     regsave
00015Ar 1  A6 rr        	ldx     regsave+1
00015Cr 1  A0 00        	ldy     #$00
00015Er 1  20 rr rr     	jsr     ldauidx
000161r 1  20 rr rr     	jsr     _writeByteToSDCard
000164r 1  A0 03        	ldy     #$03
000166r 1  20 rr rr     	jsr     ldaxysp
000169r 1  85 rr        	sta     regsave
00016Br 1  86 rr        	stx     regsave+1
00016Dr 1  20 rr rr     	jsr     incax1
000170r 1  A0 02        	ldy     #$02
000172r 1  20 rr rr     	jsr     staxysp
000175r 1  A5 rr        	lda     regsave
000177r 1  A6 rr        	ldx     regsave+1
000179r 1  4C rr rr     	jmp     L0040
00017Cr 1  20 rr rr     L0041:	jsr     incsp4
00017Fr 1  60           	rts
000180r 1               
000180r 1               .endproc
000180r 1               
000180r 1               ; ---------------------------------------------------------------
000180r 1               ; void __near__ readSector (unsigned long)
000180r 1               ; ---------------------------------------------------------------
000180r 1               
000180r 1               .segment	"CODE"
000180r 1               
000180r 1               .proc	_readSector: near
000180r 1               
000180r 1               .segment	"CODE"
000180r 1               
000180r 1  20 rr rr     	jsr     pusheax
000183r 1  A0 00        	ldy     #$00
000185r 1  B1 rr        	lda     (sp),y
000187r 1  20 rr rr     	jsr     _setLBA0
00018Ar 1  A0 03        	ldy     #$03
00018Cr 1  20 rr rr     	jsr     ldeaxysp
00018Fr 1  8A           	txa
000190r 1  A6 rr        	ldx     sreg
000192r 1  A4 rr        	ldy     sreg+1
000194r 1  84 rr        	sty     sreg
000196r 1  A0 00        	ldy     #$00
000198r 1  84 rr        	sty     sreg+1
00019Ar 1  A2 00        	ldx     #$00
00019Cr 1  20 rr rr     	jsr     _setLBA1
00019Fr 1  A0 03        	ldy     #$03
0001A1r 1  20 rr rr     	jsr     ldeaxysp
0001A4r 1  A0 00        	ldy     #$00
0001A6r 1  A6 rr        	ldx     sreg+1
0001A8r 1  A5 rr        	lda     sreg
0001AAr 1  84 rr        	sty     sreg+1
0001ACr 1  84 rr        	sty     sreg
0001AEr 1  A2 00        	ldx     #$00
0001B0r 1  20 rr rr     	jsr     _setLBA2
0001B3r 1  20 rr rr     	jsr     _readBlock
0001B6r 1  20 rr rr     	jsr     incsp4
0001B9r 1  60           	rts
0001BAr 1               
0001BAr 1               .endproc
0001BAr 1               
0001BAr 1               ; ---------------------------------------------------------------
0001BAr 1               ; void __near__ setSRAMBank (unsigned char)
0001BAr 1               ; ---------------------------------------------------------------
0001BAr 1               
0001BAr 1               .segment	"CODE"
0001BAr 1               
0001BAr 1               .proc	_setSRAMBank: near
0001BAr 1               
0001BAr 1               .segment	"CODE"
0001BAr 1               
0001BAr 1  20 rr rr     	jsr     pusha
0001BDr 1  A0 00        	ldy     #$00
0001BFr 1  A2 00        	ldx     #$00
0001C1r 1  B1 rr        	lda     (sp),y
0001C3r 1  8D 05 F0     	sta     $F005
0001C6r 1  20 rr rr     	jsr     incsp1
0001C9r 1  60           	rts
0001CAr 1               
0001CAr 1               .endproc
0001CAr 1               
0001CAr 1               ; ---------------------------------------------------------------
0001CAr 1               ; void __near__ main (void)
0001CAr 1               ; ---------------------------------------------------------------
0001CAr 1               
0001CAr 1               .segment	"CODE"
0001CAr 1               
0001CAr 1               .proc	_main: near
0001CAr 1               
0001CAr 1               .segment	"CODE"
0001CAr 1               
0001CAr 1  A0 0B        	ldy     #$0B
0001CCr 1  20 rr rr     	jsr     subysp
0001CFr 1  A9 00        	lda     #$00
0001D1r 1  20 rr rr     	jsr     _setSRAMBank
0001D4r 1  A2 00        	ldx     #$00
0001D6r 1  86 rr        	stx     sreg
0001D8r 1  86 rr        	stx     sreg+1
0001DAr 1  A9 00        	lda     #$00
0001DCr 1  20 rr rr     	jsr     _readSector
0001DFr 1  AD 0E E0     	lda     $E00E
0001E2r 1  AE 0F E0     	ldx     $E00E+1
0001E5r 1  A0 05        	ldy     #$05
0001E7r 1  20 rr rr     	jsr     staxysp
0001EAr 1  A2 00        	ldx     #$00
0001ECr 1  AD 10 E0     	lda     $E010
0001EFr 1  A0 04        	ldy     #$04
0001F1r 1  91 rr        	sta     (sp),y
0001F3r 1  AD 27 E0     	lda     $E024+3
0001F6r 1  85 rr        	sta     sreg+1
0001F8r 1  AD 26 E0     	lda     $E024+2
0001FBr 1  85 rr        	sta     sreg
0001FDr 1  AE 25 E0     	ldx     $E024+1
000200r 1  AD 24 E0     	lda     $E024
000203r 1  A0 00        	ldy     #$00
000205r 1  20 rr rr     	jsr     steaxysp
000208r 1  A0 06        	ldy     #$06
00020Ar 1  20 rr rr     	jsr     ldaxysp
00020Dr 1  20 rr rr     	jsr     pushax
000210r 1  A0 05        	ldy     #$05
000212r 1  20 rr rr     	jsr     ldeaxysp
000215r 1  20 rr rr     	jsr     shleax1
000218r 1  20 rr rr     	jsr     tosulong
00021Br 1  20 rr rr     	jsr     tosaddeax
00021Er 1  A0 07        	ldy     #$07
000220r 1  20 rr rr     	jsr     steaxysp
000223r 1  A0 0A        	ldy     #$0A
000225r 1  20 rr rr     	jsr     ldeaxysp
000228r 1  20 rr rr     	jsr     _readSector
00022Br 1  A0 0B        	ldy     #$0B
00022Dr 1  20 rr rr     	jsr     addysp
000230r 1  60           	rts
000231r 1               
000231r 1               .endproc
000231r 1               
000231r 1               
