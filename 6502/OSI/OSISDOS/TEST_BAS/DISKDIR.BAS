 100 REM OSISDOS READ DIR FROM SD CARD IN BASIC
 110 SAVE:REM TURN ON LOGGING TO SERIAL PORT
 120 REM SDCARD BASE ADDRESS = $F010 (61456 DEC)
 130 DT=61456:ST=61457:A0=61458:A1=61459:A2=61460:REM SD INTERFACE REGISTER ADDRESSES
 140 DIM MA(512):REM RESERVE ARRAY SPACE FOR SD CARD DATA
 150 GOSUB 2200:REM CHECK CARD INIT STATUS
 160 REM READ FIRST LBA
 170 L0=0:L1=0:L2=0
 180 GOSUB 3800:REM POKE LBA VALS
 190 GOSUB 2200:REM CHECK CARD INIT STATUS
 200 GOSUB 2400:REM READ IN BLOCK
 210 REM GOSUB 3000:REM DUMP ARRAY
 220 GOSUB 3600:REM PRINT FIRST SECTOR KEY VALUES
 230 GOSUB 3800:REM POKE LBA VALS
 240 GOSUB 2200:REM CHECK CARD INIT STATUS
 250 GOSUB 2400:REM READ IN BLOCK
 260 PRINT "FIRST BLOCK"
 270 REM GOSUB 3000:REM DUMP ARRAY
 280 REM GOSUB 4000:REM PRINT RESERVED SECTOR KEY VALUES
 290 REM CALCULATE DIR SECTOR VALUES
 300 GOSUB 4200
 310 L0=DS AND 255:L1=DS/256:L2=0:L3=0
 320 GOSUB 3800:REM POKE LBA VALS
 330 GOSUB 2200:REM CHECK CARD INIT STATUS
 340 GOSUB 2400:REM READ IN BLOCK
 350 GOSUB 3000:REM DUMP ARRAY
 360 GOSUB 4600
 1990 END
 2200 REM CHECK CARD INIT STATUS
 2210 IF PEEK(ST) = 128 THEN RETURN
 2220 PRINT "BAD INIT STATUS"
 2230 PRINT PEEK(ST)
 2240 END
 2400 REM READ BLOCK TO ARRAY
 2410 POKE ST,0
 2420 REM WAIT FOR READ VALUE READY
 2430 FOR MO=0 TO 511
 2440 SV=PEEK(ST)
 2450 IF SV <> 224 GOTO 2440
 2460 MA(MO)=PEEK(DT)
 2470 NEXT MO
 2480 RETURN
 3000 REM DUMP TO SCREEN
 3010 FOR I=0 TO 31
 3020 DV=I
 3030 GOSUB 3200
 3040 PRINT "0 ";
 3050 SA=(I*16)
 3060 FOR J=0 TO 15
 3070 DV=MA(SA+J)
 3080 GOSUB 3200
 3090 PRINT " ";
 3100 NEXT J
 3110 GOSUB 3400 
 3120 NEXT I
 3130 RETURN
 3200 REM PRINT DECIMAL NUMBER AS TWO HEX DIGITS
 3210 NB=(DV AND 240)/16
 3220 GOSUB 3300
 3230 NB=DV AND 15
 3240 GOSUB 3300
 3250 RETURN
 3300 REM PRINT NIBBLE
 3310 IF NB>9 GOTO 3350
 3320 VL=NB+48
 3330 PRINT CHR$(VL);
 3340 RETURN
 3350 REM CHARACTER IS LETTER A-F
 3360 VL=NB+55
 3370 PRINT CHR$(VL);
 3380 RETURN
 3400 REM PRINT THE ASCII TABLE TO THE RIGHT
 3410 PRINT " ";
 3420 FOR OF=SA TO (SA+15)
 3430 IF MA(OF)<32 THEN PRINT ".";
 3450 IF MA(OF)>126 THEN PRINT ".";
 3460 IF MA(OF)>31 AND MA(OF)<127 THEN PRINT CHR$(MA(OF));
 3470 NEXT OF
 3480 PRINT
 3490 RETURN
 3600 REM PRINT FIRST SECTOR KEY VALUES
 3610 PRINT "FIRST SECTOR KEY VALUES"
 3620 PRINT "LBA0";MA(454)
 3630 PRINT "LBA1";MA(455)
 3640 PRINT "LBA2";MA(456)
 3650 PRINT "LBA3";MA(457)
 3660 L0=MA(454):L1=MA(455):L2=MA(456)
 3670 FS=((L1*256)+L0):REM FIRST SECTOR
 3680 REM:PRINT "FIRST SECTOR LBA ";:PRINT FS
 3690 RETURN
 3800 REM POKE LBA VALUES
 3810 POKE A0,L0
 3820 POKE A1,L1
 3830 POKE A2,L2
 3840 PRINT "READING LBA  ";:PRINT ((65536*L2)+(L1*256)+L0)
 3850 RETURN
 4000 REM PRINT RESERVED SECTOR KEY VALUES
 4010 PRINT "ID S/B FAT32, IS: ";
 4020 FOR I=82 TO 86
 4030 PRINT CHR$(MA(I));
 4040 NEXT I
 4050 PRINT
 4100 RETURN
 4200 REM PRINT DIR SECTOR VALUES
 4210 SC=MA(13):REM SECTORS PER CLUSTER
 4220 PRINT "SECTORS/CLUSTER";:PRINT SC
 4230 B0=MA(14):B1=MA(15):REM
 4240 NF=MA(16)
 4250 S0=MA(36):S1=MA(37):S2=MA(38):S3=MA(39)
 4260 RS=((256*B1)+B0)
 4270 SZ=((256*S1)+S0)
 4280 PRINT "BPB_RsvdSecCnt ";:PRINT RS
 4290 PRINT "BPB_NumFATs    ";:PRINT NF
 4300 PRINT "BPB_FATSz32    ";:PRINT SZ
 4310 DS=FS+RS+(NF*SZ)
 4320 PRINT "DIR SECTOR #   ";:PRINT DS;
 4330 PRINT (DS/256);:PRINT (DS AND 255)
 4340 RETURN
 4400 REM PRINT DIR ENTRY
 4410 FOR I=0 TO 7
 4420 IF MA(DF+I)<>32 THEN PRINT CHR$(MA(DF+I));
 4430 NEXT I
 4440 PRINT ".";
 4450 FOR I=8 TO 10
 4460 IF MA(DF+I)<> 32 THEN PRINT CHR$(MA(DF+I));
 4470 NEXT I
 4480 REM PRINT
 4490 PRINT " ";:PRINT ((MA(DF+30)*65536)+(MA(DF+29)*256)+MA(DF+28))
 4500 RETURN
 4600 PRINT "*** DIRECTORY ***"
 4610 DF=128:REM DIR OFFSET
 4620 GOSUB 4400:REM PRINT CURRENT DIR ENTRY
 4630 DF=DF+64
 4640 IF DF<512 GOTO 4620
 4650 FF=DS+((9-2)*SC):REM MANUALLY ADDING FILE OFFSET
 4660 L0=FF AND 255:L1=FF/256:L2=0:L3=0
 4670 GOSUB 3800:REM POKE LBA VALS
 4680 GOSUB 2200:REM CHECK CARD INIT STATUS
 4690 GOSUB 2400:REM READ IN BLOCK
 4700 GOSUB 3000:REM DUMP ARRAY
 4710 RETURN
 