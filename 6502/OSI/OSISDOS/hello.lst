ca65 V2.17 - Git de519b9
Main file   : hello.s
Current file: hello.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git de519b9
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git de519b9"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_clrscr
000000r 1               	.import		_cprintf
000000r 1               	.import		_cgetc
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L000C:
000000r 1  50 72 65 73  	.byte	$50,$72,$65,$73,$73,$20,$78,$20,$74,$6F,$20,$65,$78,$69,$74,$20
000004r 1  73 20 78 20  
000008r 1  74 6F 20 65  
000010r 1  3C 52 45 54  	.byte	$3C,$52,$45,$54,$55,$52,$4E,$3E,$2E,$00
000014r 1  55 52 4E 3E  
000018r 1  2E 00        
00001Ar 1               L0015:
00001Ar 1  25 63 0A 0D  	.byte	$25,$63,$0A,$0D,$00
00001Er 1  00           
00001Fr 1               
00001Fr 1               ; ---------------------------------------------------------------
00001Fr 1               ; int __near__ main (void)
00001Fr 1               ; ---------------------------------------------------------------
00001Fr 1               
00001Fr 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp1
000003r 1  A9 01        	lda     #$01
000005r 1  20 rr rr     	jsr     pusha
000008r 1  A9 00        	lda     #$00
00000Ar 1  20 rr rr     	jsr     pusha
00000Dr 1  4C rr rr     	jmp     L0018
000010r 1  A0 00        L0004:	ldy     #$00
000012r 1  A2 00        	ldx     #$00
000014r 1  B1 rr        	lda     (sp),y
000016r 1  C9 00        	cmp     #$00
000018r 1  20 rr rr     	jsr     booleq
00001Br 1  D0 03 4C rr  	jeq     L0008
00001Fr 1  rr           
000020r 1  20 rr rr     	jsr     _clrscr
000023r 1  A9 rr        L0008:	lda     #<(L000C)
000025r 1  A2 rr        	ldx     #>(L000C)
000027r 1  20 rr rr     	jsr     pushax
00002Ar 1  A0 02        	ldy     #$02
00002Cr 1  20 rr rr     	jsr     _cprintf
00002Fr 1  20 rr rr     	jsr     _cgetc
000032r 1  A0 02        	ldy     #$02
000034r 1  91 rr        	sta     (sp),y
000036r 1  A0 02        	ldy     #$02
000038r 1  A2 00        	ldx     #$00
00003Ar 1  B1 rr        	lda     (sp),y
00003Cr 1  C9 58        	cmp     #$58
00003Er 1  20 rr rr     	jsr     booleq
000041r 1  D0 03 4C rr  	jeq     L0010
000045r 1  rr           
000046r 1  A2 00        	ldx     #$00
000048r 1  A9 00        	lda     #$00
00004Ar 1  A0 01        	ldy     #$01
00004Cr 1  91 rr        	sta     (sp),y
00004Er 1  A9 rr        L0010:	lda     #<(L0015)
000050r 1  A2 rr        	ldx     #>(L0015)
000052r 1  20 rr rr     	jsr     pushax
000055r 1  A0 04        	ldy     #$04
000057r 1  A2 00        	ldx     #$00
000059r 1  B1 rr        	lda     (sp),y
00005Br 1  20 rr rr     	jsr     pushax
00005Er 1  A0 04        	ldy     #$04
000060r 1  20 rr rr     	jsr     _cprintf
000063r 1  A0 00        	ldy     #$00
000065r 1  A2 00        	ldx     #$00
000067r 1  B1 rr        	lda     (sp),y
000069r 1  48           	pha
00006Ar 1  18           	clc
00006Br 1  69 01        	adc     #$01
00006Dr 1  A0 00        	ldy     #$00
00006Fr 1  91 rr        	sta     (sp),y
000071r 1  68           	pla
000072r 1  C9 0E        	cmp     #$0E
000074r 1  20 rr rr     	jsr     booleq
000077r 1  D0 03 4C rr  	jeq     L0018
00007Br 1  rr           
00007Cr 1  A2 00        	ldx     #$00
00007Er 1  A9 00        	lda     #$00
000080r 1  A0 00        	ldy     #$00
000082r 1  91 rr        	sta     (sp),y
000084r 1  A0 01        L0018:	ldy     #$01
000086r 1  A2 00        	ldx     #$00
000088r 1  B1 rr        	lda     (sp),y
00008Ar 1  C9 01        	cmp     #$01
00008Cr 1  20 rr rr     	jsr     booleq
00008Fr 1  F0 03 4C rr  	jne     L0004
000093r 1  rr           
000094r 1  A2 00        	ldx     #$00
000096r 1  A9 00        	lda     #$00
000098r 1  4C rr rr     	jmp     L0001
00009Br 1  20 rr rr     L0001:	jsr     incsp3
00009Er 1  60           	rts
00009Fr 1               
00009Fr 1               .endproc
00009Fr 1               
00009Fr 1               
