;
; File generated by cc65 v 2.17 - Git de519b9
;
	.fopt		compiler,"cc65 v 2.17 - Git de519b9"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_issueSDCardCommand
	.export		_setLBA0
	.export		_setLBA1
	.export		_setLBA2
	.export		_waitSDCardReady
	.export		_waitSDCardRcvDataReady
	.export		_waitSDCardTxDataEmpty
	.export		_readByteFromSDCard
	.export		_writeByteToSDCard
	.export		_readBlock
	.export		_writeBlock
	.export		_main

; ---------------------------------------------------------------
; void __near__ issueSDCardCommand (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_issueSDCardCommand: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $F001
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setLBA0 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setLBA0: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $F002
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setLBA1 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setLBA1: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $F003
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setLBA2 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setLBA2: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $F004
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitSDCardReady (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitSDCardReady: near

.segment	"CODE"

	jmp     L000E
L000E:	ldx     #$00
	lda     $F001
	cmp     #$80
	jsr     boolne
	jne     L000E
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitSDCardRcvDataReady (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitSDCardRcvDataReady: near

.segment	"CODE"

	jmp     L0013
L0013:	ldx     #$00
	lda     $F001
	cmp     #$E0
	jsr     boolne
	jne     L0013
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ waitSDCardTxDataEmpty (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitSDCardTxDataEmpty: near

.segment	"CODE"

	jmp     L0018
L0018:	ldx     #$00
	lda     $F001
	cmp     #$A0
	jsr     boolne
	jne     L0018
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ readByteFromSDCard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readByteFromSDCard: near

.segment	"CODE"

	jsr     decsp1
	jsr     _waitSDCardRcvDataReady
	ldx     #$00
	lda     $F000
	ldy     #$00
	sta     (sp),y
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jmp     L001C
L001C:	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ writeByteToSDCard (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeByteToSDCard: near

.segment	"CODE"

	jsr     pusha
	jsr     _waitSDCardTxDataEmpty
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	sta     $F000
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ readBlock (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readBlock: near

.segment	"CODE"

	jsr     decsp4
	ldx     #$E0
	lda     #$00
	ldy     #$00
	jsr     staxysp
	jsr     _waitSDCardReady
	lda     #$00
	jsr     _issueSDCardCommand
	ldx     #$00
	lda     #$00
	ldy     #$02
	jsr     staxysp
L002C:	ldy     #$03
	jsr     ldaxysp
	cpx     #$02
	jsr     boolult
	jne     L002F
	jmp     L002D
L002F:	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jsr     pushax
	jsr     _readByteFromSDCard
	ldy     #$00
	jsr     staspidx
	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L002C
L002D:	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ writeBlock (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_writeBlock: near

.segment	"CODE"

	jsr     decsp4
	ldx     #$E2
	lda     #$00
	ldy     #$00
	jsr     staxysp
	jsr     _waitSDCardReady
	lda     #$01
	jsr     _issueSDCardCommand
	ldx     #$00
	lda     #$00
	ldy     #$02
	jsr     staxysp
L003C:	ldy     #$03
	jsr     ldaxysp
	cpx     #$02
	jsr     boolult
	jne     L003F
	jmp     L003D
L003F:	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	ldy     #$00
	jsr     ldauidx
	jsr     _writeByteToSDCard
	ldy     #$03
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$02
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L003C
L003D:	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $F005
	lda     #$00
	jsr     _setLBA0
	lda     #$00
	jsr     _setLBA1
	lda     #$00
	jsr     _setLBA2
	jsr     _readBlock
	rts

.endproc

