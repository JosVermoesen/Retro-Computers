 text
* #include "putchar2.c"
* 
* /*
* 
* #ifndef ERROR
* #define ERROR   -1
* #endif
* 
* int     fout    = 1;
 data
 global fout
fout fdb 1
 text
* char    _obuf[512];
* char    *_opos  = _obuf;
 data
 global _opos
_opos fdb _obuf
 text
* 
* flush() {
 global flush
flush
 pshs y,u
 jmp 1f
2
*         int n;
* 
*         n = (int)_opos - (int)&_obuf[0];
 leas -2,s
 ldd #_obuf
 pshs d
 ldd _opos
 subd ,s++
 std ,s
*         _opos = _obuf;
 ldx #_obuf
 stx _opos
*         if (n > 0)
 ldd ,s
 lble _1
*                 if (write(fout, _obuf, n) != n)
_2
 ldd ,s
 pshs d
 ldd #_obuf
 pshs d
 ldd fout
 pshs d
 jsr write
 leas 6,s
 cmpd ,s
 lbeq _3
*                         return(ERROR);
_4
 ldd #-1
 leas 2,s
 puls y,u,pc

*         return(0);
_3
_1
 ldd #0
 leas 2,s
 puls y,u,pc

* }
1 ldd #-142
 jsr _stkcheck
 jmp 2b


* 
* _flsbuf(c) {
 global _flsbuf
_flsbuf
 pshs y,u
 jmp 1f
2
*         if (flush() == ERROR)
 jsr flush
 cmpd #-1
 lbne _5
*                 return(ERROR);
_6
 ldd #-1
 puls y,u,pc

*         *_opos++ = c;
_5
 ldd 6,s
 ldx _opos
 leax 1,x
 stx _opos
 stb -1,x
*         return(c);
 ldd 6,s
 puls y,u,pc

* }
1 ldd #-134
 jsr _stkcheck
 jmp 2b


* 
* #ifndef CLEANUP
* _cleanup() {
 global _cleanup
_cleanup
 pshs y,u
 jmp 1f
2
*         flush();
 jsr flush
* }
 puls y,u,pc

1 ldd #-134
 jsr _stkcheck
 jmp 2b


* #endif
* 
* putchar(c) {
 global putchar
putchar
 pshs y,u
 jmp 1f
2
* #define putchar(x) (_opos<&_obuf[sizeof _obuf]?((*_opos++=(x))&0377):_flsbuf((x)))
*         return(putchar(c));
 ldd #_obuf
 addd #512
 cmpd _opos
 lbls _7
_8
 ldd 6,s
 ldx _opos
 leax 1,x
 stx _opos
 stb -1,x
 sex
 andb #255
 clra
 jmp _9
_7
 ldd 6,s
 pshs d
 jsr _flsbuf
 leas 2,s
_9
 puls y,u,pc

* }
1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* #define ERROR -1
* #define R 0
* #define BUFSIZ 512
* 
* int fd;
* int address;
* char buffer[BUFSIZ];
* 
* main(argc, argv)
* 
* int argc;
* char *argv[];
* 
* {
 global main
main
 pshs y,u
 jmp 1f
2
*   int count, i;
* 
*   if (argc != 2) {
 leas -4,s
 ldd 10,s
 cmpd #2
 lbeq _10
_11
*     ostring(2,"Syntax error: dump filename\n");
 data
_12 fcb 83,121,110,116,97,120,32,101,114,114,111,114,58,32,100,117,109
 fcb 112,32,102,105,108,101,110,97,109,101,13,0
 text
 ldd #_12
 pshs d
 ldd #2
 pshs d
 jsr ostring
 leas 4,s
*     exit(255);
 ldd #255
 pshs d
 jsr exit
 leas 2,s
*   }
*   if ( (fd=open(argv[1], R)) == ERROR ) {
_10
 ldd #0
 pshs d
 ldx 14,s
 ldd 2,x
 pshs d
 jsr open
 leas 4,s
 std fd
 cmpd #-1
 lbne _13
_14
*     ostring(2,"Can't open '");
 data
_15 fcb 67,97,110,39,116,32,111,112,101,110,32,39,0
 text
 ldd #_15
 pshs d
 ldd #2
 pshs d
 jsr ostring
 leas 4,s
*     ostring(2,argv[1]);
 ldx 12,s
 ldd 2,x
 pshs d
 ldd #2
 pshs d
 jsr ostring
 leas 4,s
*     ostring(2,"'.\n");
 data
_16 fcb 39,46,13,0
 text
 ldd #_16
 pshs d
 ldd #2
 pshs d
 jsr ostring
 leas 4,s
*     exit(255);
 ldd #255
 pshs d
 jsr exit
 leas 2,s
*   }
*   address = 0;
_13
 ldd #0
 std address
*   while (count = read(fd, buffer, BUFSIZ)) {
_18
 ldd #512
 pshs d
 ldd #buffer
 pshs d
 ldd fd
 pshs d
 jsr read
 leas 6,s
 std 2,s
 lbeq _17
_19
*     if (count == ERROR) {
 ldd 2,s
 cmpd #-1
 lbne _20
_21
*       ostring(2,"I/O error while reading file.\n");
 data
_22 fcb 73,47,79,32,101,114,114,111,114,32,119,104,105,108,101,32,114
 fcb 101,97,100,105,110,103,32,102,105,108,101,46,13,0
 text
 ldd #_22
 pshs d
 ldd #2
 pshs d
 jsr ostring
 leas 4,s
*       exit(255);
 ldd #255
 pshs d
 jsr exit
 leas 2,s
*     }
*     display(count);
_20
 ldd 2,s
 pshs d
 jsr display
 leas 2,s
*   }
*   flush();
 jmp _18
_17
 jsr flush
* }
 leas 4,s
 puls y,u,pc

1 ldd #-144
 jsr _stkcheck
 jmp 2b


* 
* display(count) {
 global display
display
 pshs y,u
 jmp 1f
2
*   char *p;
*   int i;
*   int a;
* 
*   p = buffer;
 leas -6,s
 ldx #buffer
 stx 4,s
*   while (count) {
_24
 ldd 12,s
 lbeq _23
_25
*     i = ( (count >= 16) ? 16 : count );
 ldd 12,s
 cmpd #16
 lblt _26
_27
 ldd #16
 jmp _28
_26
 ldd 12,s
_28
 std 2,s
*     count = ( (count >= 16) ? count-16 : 0);
 ldd 12,s
 cmpd #16
 lblt _29
_30
 ldd 12,s
 subd #16
 jmp _31
_29
 ldd #0
_31
 std 12,s
*     hexword(address);
 ldd address
 pshs d
 jsr hexword
 leas 2,s
*     outch(' ');
 ldd #32
 pshs d
 jsr outch
 leas 2,s
*     for (a=0; a != i; ++a) {
 ldd #0
 std ,s
_34
 ldd ,s
 cmpd 2,s
 lbeq _33
_32
*       outch(' ');
 ldd #32
 pshs d
 jsr outch
 leas 2,s
*       hexbyte(*p++);
 ldx 4,s
 leax 1,x
 stx 4,s
 ldb -1,x
 sex
 pshs d
 jsr hexbyte
 leas 2,s
*       if (a == 7) outch(' ');
 ldd ,s
 cmpd #7
 lbne _36
_37
 ldd #32
 pshs d
 jsr outch
 leas 2,s
*     }
_36
*     while (a < 16) {
_35
 ldd ,s
 addd #1
 std ,s
 jmp _34
_33
_39
 ldd ,s
 cmpd #16
 lbge _38
_40
*       ostring("   ");
 data
_41 fcb 32,32,32,0
 text
 ldd #_41
 pshs d
 jsr ostring
 leas 2,s
*       if (a == 7) outch(' ');
 ldd ,s
 cmpd #7
 lbne _42
_43
 ldd #32
 pshs d
 jsr outch
 leas 2,s
*       ++a;
_42
 ldd ,s
 addd #1
 std ,s
*     }
*     p -= i;
 jmp _39
_38
 ldd 4,s
 subd 2,s
 std 4,s
*     ostring("  ");
 data
_44 fcb 32,32,0
 text
 ldd #_44
 pshs d
 jsr ostring
 leas 2,s
*     for (a=0; a != i; ++a) {
 ldd #0
 std ,s
_47
 ldd ,s
 cmpd 2,s
 lbeq _46
_45
*       wc(*p++);
 ldx 4,s
 leax 1,x
 stx 4,s
 ldb -1,x
 sex
 pshs d
 jsr wc
 leas 2,s
*     }
*     address += i;
_48
 ldd ,s
 addd #1
 std ,s
 jmp _47
_46
 ldd address
 addd 2,s
 std address
*     outch('\n');
 ldd #13
 pshs d
 jsr outch
 leas 2,s
*   }
* }
 jmp _24
_23
 leas 6,s
 puls y,u,pc

1 ldd #-142
 jsr _stkcheck
 jmp 2b


* 
* wc(c)
* char c;
* {
 global wc
wc
 pshs y,u
 jmp 1f
2
*   c &= 0x7f;
 ldb 7,s
 sex
 andb #127
 clra
 stb 7,s
*   if ( c < ' ' || c == 0x7f)
 ldb 7,s
 sex
 cmpd #32
 lblt _50
_51
 ldb 7,s
 sex
 cmpd #127
 lbne _49
*     outch('.');
_50
 ldd #46
 pshs d
 jsr outch
 leas 2,s
*   else
*     outch(c);
 jmp _52
_49
 ldb 7,s
 sex
 pshs d
 jsr outch
 leas 2,s
* }
_52
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* hexbyte(byte)
* char byte;
* {
 global hexbyte
hexbyte
 pshs y,u
 jmp 1f
2
*   static char hex[] = "0123456789abcdef";
 data
_53 fcb 48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0

 text
* 
*   outch(hex[byte/16]);
 ldb 7,s
 sex
 asra
 rorb
 asra
 rorb
 asra
 rorb
 asra
 rorb
 ldx #_53
 leax d,x
 ldb ,x
 sex
 pshs d
 jsr outch
 leas 2,s
*   outch(hex[byte & 0xf]);
 ldb 7,s
 sex
 andb #15
 clra
 ldx #_53
 leax d,x
 ldb ,x
 sex
 pshs d
 jsr outch
 leas 2,s
* }
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* hexword(word)
* unsigned word;
* {
 global hexword
hexword
 pshs y,u
 jmp 1f
2
*   hexbyte(word/256);
 ldd 6,s
 pshs d
 ldd #8
 jsr cclsr
 pshs d
 jsr hexbyte
 leas 2,s
*   hexbyte(word & 0xff);
 ldd 6,s
 andb #255
 clra
 pshs d
 jsr hexbyte
 leas 2,s
* }
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* ostring(arg) {
 global ostring
ostring
 pshs y,u
 jmp 1f
2
*   int *p, f;
*   char *ap, c;
* 
*   p = &arg;
 leas -7,s
 leax 13,s
 stx 5,s
*   f = *p;
 ldd [5,s]
 std 3,s
*   if ((unsigned) f < 16) {
 ldd 3,s
 cmpd #16
 lbhs _54
_55
*     ++p;
 ldd 5,s
 addd #2
 std 5,s
*     if (f != fout) {
 ldd 3,s
 cmpd fout
 lbeq _56
_57
*       flush();
 jsr flush
*       fout = f;
 ldd 3,s
 std fout
*     }
*   }
_56
*   ap = (char *) *p++;
_54
 ldx 5,s
 leax 2,x
 stx 5,s
 ldd -2,x
 std 1,s
*   while ( c = *ap++ ) outch(c);
_59
 ldx 1,s
 leax 1,x
 stx 1,s
 ldb -1,x
 stb ,s
 lbeq _58
_60
 ldb ,s
 sex
 pshs d
 jsr outch
 leas 2,s
*   if (fout != 1) flush();
 jmp _59
_58
 ldd fout
 cmpd #1
 lbeq _61
_62
 jsr flush
*   fout = 1;
_61
 ldd #1
 std fout
* }
 leas 7,s
 puls y,u,pc

1 ldd #-143
 jsr _stkcheck
 jmp 2b


* 
* outch(c)
* char c;
* {
 global outch
outch
 pshs y,u
 jmp 1f
2
*   putchar(c);
 ldd #_obuf
 addd #512
 cmpd _opos
 lbls _63
_64
 ldb 7,s
 ldx _opos
 leax 1,x
 stx _opos
 stb -1,x
 sex
 andb #255
 clra
 jmp _65
_63
 ldb 7,s
 sex
 pshs d
 jsr _flsbuf
 leas 2,s
_65
* }
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


 bss
 name d_c
 define
buffer rmb 512
address rmb 2
fd rmb 2
 enddef
putchar2 common
_obuf rmb 512
 endcom
