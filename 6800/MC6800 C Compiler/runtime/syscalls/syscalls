  text

* system calls library for TSC 6809 C Compiler

  lib sysdef

* error number return cell

  bss
_errno rmb 2
  text

* general purpose return routines

  global ret3
  global ret3a
ret3 pshs b
  ldd #0
  std _errno
ret3a leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
  bra 2f
1 ldd #0
2 leas 3,s
  rts

  global ret5
  global ret5a
ret5 pshs b
  ldd #0
  std _errno
ret5a leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
  bra 2f
1 ldd #0
2 leas 5,s
  rts

* ABORT()

 global _abort
_abort swi

* ACCESS(path, perms)

 global _access
_access ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldb #chacc
  jmp ret5

* ACCT(path)

 global _acct
_acct ldd 2,s
  pshs d
  ldb #sacct
  jmp ret3

* ALARM(sec)

 global _alarm
_alarm ldd 2,s
  sys alarm
  rts

* BRK(addr)

 global _brk
_brk ldd 2,s
  pshs d
  ldb #break
  jmp ret3

* CDATA(addr)

  global _cdata
_cdata ldd 2,s
  pshs d
  ldb #cdata
  jmp ret3

* CHDIR(path)

  global _chdir
_chdir ldd 2,s
  pshs d
  ldb #chdir
  jmp ret3

* CHMOD(path, perms)

  global _chmod
_chmod ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldb #chprm
  jmp ret5

* CHOWN(path, uid)

  global _chown
_chown ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldb #chown
  jmp ret5

* CHTIM(path, time)

  global _chtim
_chtim ldd 2,s
  pshs d
  ldb #filtim
  pshs b
  ldd #0
  std _errno
  ldd 6,s
  ldx 8,s
  jmp ret3a

* CLOSE(fildes)

  global _close
_close ldx #0
  stx _errno
  sys close
  bec 1f
  std _errno
  ldd #-1
  bra 2f
1 ldd #0
2 rts

* CREAT(path, perms)

  global _creat
_creat ldd #0
  std _errno
  ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldb #create
  pshs b
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
1 leas 5,s
  rts

* DUP(fildes)

  global _dup
_dup ldd #0
  std _errno
  ldd 2,s
  sys dup
  bec 2f
  std _errno
  ldd #-1
2 leas 2,s
  rts

* DUP2(src, dest)

  global _dup2
_dup2 ldx 4,s
  ldd #0
  std _errno
  ldd 2,s
  sys dups
  bec 2f
  std _errno
  ldd #-1
2 rts

* EXECS left to later

* FORK()

  global _fork
_fork ldd #0
  std _errno
  sys fork
  bra 2f
  bec 1f
  std _errno
  ldd #-1
1 rts
2 ldd #0
  rts

* FSTAT(fildes, bufad)

  global _fstat
_fstat ldd #0
  std _errno
  ldd 4,s
  pshs d
  ldb #ofstat
  pshs b
  ldd 5,s
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
  leas 3,s
  rts
1 leas 3,s
  ldx 4,s
  ldb #17
  leax 16,x
2 ldb 0,x
  stb 1,x
  leax -1,x
  decb
  bne 2b
  clr 0,x
  ldd #0
  rts

* FTIME(bufaddr)

  global _ftime
_ftime sys time,tbuf
  ldx 2,s
  pshs u
  ldu #tbuf
  ldd 0,u
  std 0,x
  ldd 2,u
  std 2,x
  ldb 4,u
  stb 4,x
  ldb 7,u
  stb 5,x
  ldd 5,u
  std 6,u
  ldd #0
  puls u,pc

  bss
tbuf rmb 8
  text

* GETEUID()

  global _geteuid
_geteuid sys guid
  tfr x,d
  rts

* GETPID()

  global _getpid
_getpid sys gtid
  rts

* GETUID()

  global _getuid
_getuid sys guid
  rts

* GTTY(fildes, buf)

  global _gtty
_gtty ldd #0
  std _errno
  ldd 4,s
  pshs d
  ldb #ttyget
  pshs b
  ldd 5,s
  jmp ret3a

* KILL(taskid, signum)

  global _kill
_kill ldd #0
  std _errno
  ldd 4,s
  pshs d
  ldb #spint
  pshs b
  ldd 5,s
  jmp ret3a

* LINK(path, newlink)

  global _link
_link ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldb #link
  pshs b
  jmp ret5a

* LOCK(flag)

  global _lock
_lock ldd 2,s
  pshs d
  ldb #lock
  pshs b
  jmp ret3a

* LREC(fildes, count)

  global _lrec
_lrec ldd #0
  std _errno
  ldd 4,s
  pshs d
  ldb #lrec
  pshs b
  ldd 5,s
  jmp ret3a

* LSEEK(fildes, offset, type)

  global _lseek
_lseek ldd #0
  std _errno
  ldd 8,s
  pshs d
  ldd 8,s
  pshs d
  ldd 8,s
  pshs d
  ldb #seek
  pshs b
  ldd 9,s
  leax 0,s
  sys indx
  bec 2f
  std _errno
  ldd #-1
  std sretb
  std sretb+2
  bra 3f
2 std sretb+2
  stx sretb
3 leas 7,s
  ldx #sretb
  rts

  bss
sretb rmb 4
  text

* MKNOD(path, desc, devnum)

  global _mknod
_mknod ldd #0
  std _errno
  ldd 8,s
  pshs d
  ldd 8,s
  pshs d
  ldd 8,s
  pshs d
  ldb #crtsd
  pshs b
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
  bra 2f
1 ldd #0
2 leas 7,s
  rts

* MOUNT(spcnam, dirnam, rwflag)

  global _mount
_mount ldd 8,s
  pshs d
  ldd 8,s
  pshs d
  ldd 8,s
  pshs d
  ldb #mount
  pshs b
  ldd #0
  std _errno
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
  bra 2f
1 ldd #0
2 leas 7,s
  rts

* NICE(incr)

  global _nice
_nice ldd 2,s
  sys setpr
  ldd #0
  std _errno
  rts

* OPEN(pathnam, mode)

  global _open
_open ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldb #open
  pshs b
  ldd #0
  std _errno
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
1 leas 5,s
  rts

* PAUSE()

  global _pause
_pause sys stop
  std _errno
  ldd #-1
  rts

* PIPE(fds)

  global _pipe
_pipe ldd #0
  std _errno
  sys crpipe
  bec 1f
  std _errno
  ldd #-1
  rts
1 pshs u
  ldu 2,s
  std 0,u
  stx 2,u
  ldd #0
  puls u,pc

* PROFILE(bufad, bufsiz, lowpc, scale)

  global _profil
_profil ldd 8,s
  pshs d
  ldd 6,s
  pshs d
  ldd 6,s
  pshs d
  ldd 12,s
  pshs d
  ldb #profil
  pshs b
  leax 0,s
  sys indx
  leas 9,s
  ldd #0
  rts

* READ(fildes, bufad, nbytes)

  global _read
  global read2
_read ldd #0
  std _errno
  ldd 6,s
  pshs d
  ldd 6,s
  pshs d
  ldb #read
read2 pshs b
  ldd 7,s
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
1 leas 5,s
  rts

* SBRK(incr)

  global _sbrk
_sbrk swi

* SET_FTM(pathnam, ptime)

  global _set_ftm
_set_ftm ldx 4,s
  ldd 2,s
  pshs d
  ldb #filtim
  pshs b
  ldd #0
  std _errno
  ldd 2,x
  ldx 0,x
  jmp ret3a

* SETUID(uid)

  global _setuid
_setuid ldd #0
  std _errno
  ldd 2,s
  sys suid
  bec 1f
  std _errno
  ldd #-1
  rts
1 ldd #0
  rts

* SIGNAL(signum, handler)

  global _signal
_signal ldd #0
  std _errno
  ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldb #cpint
  pshs b
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
  bra 2f
1 tfr d,x
2 leas 5,s
  rts

* STACK(nbytes)

  global _stack
_stack swi

* STAT(pathnam, bufad)

  global _stat
_stat ldd 4,s
  pshs d
  ldd 4,s
  pshs d
  ldd #0
  std _errno
  ldb #status
  leax 0,s
  sys indx
  bec 1f
  std _errno
  ldd #-1
  leas 5,s
  rts
1 leas 5,s
  ldx 4,s
  ldb #17
  leax 16,x
2 ldb 0,x
  stb 1,x
  leax -1,x
  decb
  bne 2b
  clr 0,x
  ldd #0
  rts

* STIME(ptime)

  global _stime
_stime ldd #0
  std _errno
  ldx 2,s
  ldd 2,x
  ldx 0,x
  sys stime
  bec 1f
  std _errno
  ldd #-1
  rts
1 ldd #0
  rts

* STTY(fildes, buf)

  global _stty
_stty ldd #0
  std _errno
  ldd 4,s
  pshs d
  ldb #ttyset
  pshs b
  ldd 5,s
  jmp ret3a

* SYNC()

  global _sync
_sync sys update
  ldd #0
  rts

* TIME(ptime)

  global _time
_time ldx 2,s
  beq 1f
  ldd 2,x
  ldx 0,x
  sys stime
1 sys time,tbuf2
  ldx #tbuf2
  rts
  bss
tbuf2 rmb 8
  text

* TIMES(ptimes)

  global _times
_times sys ttime,tmsbuf
  ldx 2,s
  clr 0,x
  ldd tmsbuf
  std 1,x
  ldb tmsbuf+2
  stb 3,x
  clr 4,x
  ldd tmsbuf+3
  std 5,x
  ldb tmsbuf+5
  stb 7,x
  ldd tmsbuf+6
  std 8,x
  ldd tmsbuf+8
  std 10,x
  ldd tmsbuf+10
  std 12,x
  ldd tmsbuf+12
  std 14,x
  ldd #0
  rts
  bss
tmsbuf rmb 14
  text

* TTYSLOT()

  global _ttyslot
_ttyslot sys ttynum
  rts

* UMASK(perms)

  global _umask
_umask ldd 2,s
  pshs d
  ldb #defacc
  pshs b
  leax 0,s
  sys indx
  leas 3,s
  ldd #0
  rts

* UMOUNT(pathnam)

  global _umount
_umount ldd 2,s
  pshs d
  ldb #unmnt
  jmp ret3

* UNLINK(pathnam)

  global _unlink
_unlink ldd 2,s
  pshs d
  ldb #unlink
  jmp ret3

* UREC(fildes)

  global _urec
_urec ldd #0
  std _errno
  ldd 2,s
  sys urec
  bec 1f
  std _errno
  ldd #-1
  rts
1 ldd #0
  rts

* UTIME(pathnam, ptime)

  global _utime
_utime equ _set_ftm

* VFORK()

  global _vfork
_vfork equ _fork

* WAIT(ptaskid)

  global _wait
_wait sys wait
  bec 1f
  ldd #-1
  rts
1 pshs u
  ldu 4,s
  beq 2f
  stx 0,u
2 puls u,pc

* WRITE(fildes, bufad, nbytes)

  global _write
_write ldd #0
  std _errno
  ldd 6,s
  pshs d
  ldd 6,s
  pshs d
  ldb #write
  jmp read2

