 text
* char  outbuf[80];
* int  outp;
* int   cont;
* 
* outcode(p) char *p; {
 global outcode
outcode
 pshs y,u
 jmp 1f
2
*  int i,j,c,c1;
*    char *q;
*     if( p == 0 ){
 leas -10,s
 ldd 16,s
 lbne _1
_2
*        outbuf[outp] = '\0';
 ldd outp
 ldx #outbuf
 leax d,x
 ldd #0
 stb ,x
*         printf("%s\n", outbuf);
 ldd #outbuf
 pshs d
 data
_3
 fcb 37,115,13,0
 text
 ldd #_3
 pshs d
 jsr printf
 leas 4,s
*      outp = cont = 0;
 ldd #0
 std cont
 std outp
*         return;
 leas 10,s
 puls y,u,pc

*  }
*    while( (c = *p++) ){
_1
_5
 ldx 16,s
 leax 1,x
 stx 16,s
 ldb -1,x
 sex
 std 4,s
 lbeq _4
_6
*         c1 = *p;
 ldb [16,s]
 sex
 std 2,s
*         switch(c){
 ldd 4,s
 jmp _8
* 
*       case '"':
*        case '\'':
_9
*           for( q=p; *q != c; q++ );
_10
 ldd 16,s
 std ,s
_13
 ldb [,s]
 sex
 cmpd 4,s
 lbeq _12
_11
*            outnum(q-p);
_14
 ldd ,s
 addd #1
 std ,s
 jmp _13
_12
 ldd ,s
 subd 16,s
 pshs d
 jsr outnum
 leas 2,s
*             ptc('h');
 ldd #104
 pshs d
 jsr ptc
 leas 2,s
*            while( p != q )
_16
 ldd 16,s
 cmpd ,s
 lbeq _15
*              ptc(*p++);
_17
 ldx 16,s
 leax 1,x
 stx 16,s
 ldb -1,x
 sex
 pshs d
 jsr ptc
 leas 2,s
*           p++;
 jmp _16
_15
 ldd 16,s
 addd #1
 std 16,s
*             break;
 jmp _7
*       case '>':
*            if( c1=='=' ){
_18
 ldd 2,s
 cmpd #61
 lbne _19
_20
*               pts(".ge."); p++;
 data
_21
 fcb 46,103,101,46,0
 text
 ldd #_21
 pshs d
 jsr pts
 leas 2,s
 ldd 16,s
 addd #1
 std 16,s
*            } else
*               pts(".gt.");
 jmp _22
_19
 data
_23
 fcb 46,103,116,46,0
 text
 ldd #_23
 pshs d
 jsr pts
 leas 2,s
*             break;
_22
 jmp _7
*       case '<':
*            if( c1=='=' ){
_24
 ldd 2,s
 cmpd #61
 lbne _25
_26
*               pts(".le."); p++;
 data
_27
 fcb 46,108,101,46,0
 text
 ldd #_27
 pshs d
 jsr pts
 leas 2,s
 ldd 16,s
 addd #1
 std 16,s
*            } else if( c1=='>' ){
 jmp _28
_25
 ldd 2,s
 cmpd #62
 lbne _29
_30
*                pts(".ne."); p++;
 data
_31
 fcb 46,110,101,46,0
 text
 ldd #_31
 pshs d
 jsr pts
 leas 2,s
 ldd 16,s
 addd #1
 std 16,s
*            } else
*               pts(".lt.");
 jmp _32
_29
 data
_33
 fcb 46,108,116,46,0
 text
 ldd #_33
 pshs d
 jsr pts
 leas 2,s
*             break;
_32
_28
 jmp _7
*       case '=':
*            if( c1=='=' ){
_34
 ldd 2,s
 cmpd #61
 lbne _35
_36
*               pts(".eq."); p++;
 data
_37
 fcb 46,101,113,46,0
 text
 ldd #_37
 pshs d
 jsr pts
 leas 2,s
 ldd 16,s
 addd #1
 std 16,s
*            } else
*               ptc('=');
 jmp _38
_35
 ldd #61
 pshs d
 jsr ptc
 leas 2,s
*            break;
_38
 jmp _7
*       case '!':
*            if( c1=='=' ){
_39
 ldd 2,s
 cmpd #61
 lbne _40
_41
*               pts(".ne."); p++;
 data
_42
 fcb 46,110,101,46,0
 text
 ldd #_42
 pshs d
 jsr pts
 leas 2,s
 ldd 16,s
 addd #1
 std 16,s
*            } else
*               pts(".not.");
 jmp _43
_40
 data
_44
 fcb 46,110,111,116,46,0
 text
 ldd #_44
 pshs d
 jsr pts
 leas 2,s
*            break;
_43
 jmp _7
*       case '&':
*            if( c1=='&' )
_45
 ldd 2,s
 cmpd #38
 lbne _46
*                p++;
_47
 ldd 16,s
 addd #1
 std 16,s
*             pts(".and.");
_46
 data
_48
 fcb 46,97,110,100,46,0
 text
 ldd #_48
 pshs d
 jsr pts
 leas 2,s
*            break;
 jmp _7
*       case '|':
*            if( c1=='|' )
_49
 ldd 2,s
 cmpd #124
 lbne _50
*                p++;
_51
 ldd 16,s
 addd #1
 std 16,s
*             pts(".or.");
_50
 data
_52
 fcb 46,111,114,46,0
 text
 ldd #_52
 pshs d
 jsr pts
 leas 2,s
*             break;
 jmp _7
*       case '\t':
*           tabs();
_53
 jsr tabs
*          break;
 jmp _7
*       case '\n':
*           ptc(' ');
_54
 ldd #32
 pshs d
 jsr ptc
 leas 2,s
*            break;
 jmp _7
*       default:
_55
*             ptc(c);
 ldd 4,s
 pshs d
 jsr ptc
 leas 2,s
*          break;
 jmp _7
*       }
*    }
_8
 cmpd #34
 lbeq _9
 cmpd #39
 lbeq _10
 cmpd #62
 lbeq _18
 cmpd #60
 lbeq _24
 cmpd #61
 lbeq _34
 cmpd #33
 lbeq _39
 cmpd #38
 lbeq _45
 cmpd #124
 lbeq _49
 cmpd #9
 lbeq _53
 cmpd #13
 lbeq _54
 jmp _55
_7
* }
 jmp _5
_4
 leas 10,s
 puls y,u,pc

1 ldd #-148
 jsr _stkcheck
 jmp 2b


* 
* ptc(c) char c; {
 global ptc
ptc
 pshs y,u
 jmp 1f
2
*   if( outp > 71 )
 ldd outp
 cmpd #71
 lble _56
*      contcard();
_57
 jsr contcard
*  outbuf[outp++] = c;
_56
 ldd outp
 addd #1
 std outp
 subd #1
 ldx #outbuf
 leax d,x
 ldb 7,s
 stb ,x
* }
 puls y,u,pc

1 ldd #-134
 jsr _stkcheck
 jmp 2b


* 
* pts(s) char *s; {
 global pts
pts
 pshs y,u
 jmp 1f
2
*    while(*s)
_59
 ldb [6,s]
 lbeq _58
*        ptc(*s++);
_60
 ldx 6,s
 leax 1,x
 stx 6,s
 ldb -1,x
 sex
 pshs d
 jsr ptc
 leas 2,s
* }
 jmp _59
_58
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* int  contfld;
* 
* contcard(){
 global contcard
contcard
 pshs y,u
 jmp 1f
2
*    outbuf[outp] = '\0';
 ldd outp
 ldx #outbuf
 leax d,x
 ldd #0
 stb ,x
*     printf("%s\n", outbuf);
 ldd #outbuf
 pshs d
 data
_61
 fcb 37,115,13,0
 text
 ldd #_61
 pshs d
 jsr printf
 leas 4,s
*  for( outp=0; outp<contfld-1; outbuf[outp++] = ' ' );
 ldd #0
 std outp
_64
 ldd contfld
 subd #1
 cmpd outp
 lble _63
_62
*     outbuf[outp++] = '&';
_65
 ldd outp
 addd #1
 std outp
 subd #1
 ldx #outbuf
 leax d,x
 ldd #32
 stb ,x
 jmp _64
_63
 ldd outp
 addd #1
 std outp
 subd #1
 ldx #outbuf
 leax d,x
 ldd #38
 stb ,x
* }
 puls y,u,pc

1 ldd #-138
 jsr _stkcheck
 jmp 2b


* 
* tabs(){
 global tabs
tabs
 pshs y,u
 jmp 1f
2
*    ptc(' ');
 ldd #32
 pshs d
 jsr ptc
 leas 2,s
*    while( outp<7 )
_67
 ldd outp
 cmpd #7
 lbge _66
*      ptc(' ');
_68
 ldd #32
 pshs d
 jsr ptc
 leas 2,s
*    while( outp%3 != 1)
 jmp _67
_66
_70
 ldd outp
 pshs d
 ldd #3
 jsr ccdiv
 exg d,x
 cmpd #1
 lbeq _69
*      ptc(' ');
_71
 ldd #32
 pshs d
 jsr ptc
 leas 2,s
* }
 jmp _70
_69
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* outnum(n) int n; {
 global outnum
outnum
 pshs y,u
 jmp 1f
2
*     int a;
*   if( a = n/10 )
 leas -2,s
 ldd 8,s
 pshs d
 ldd #10
 jsr ccdiv
 std ,s
 lbeq _72
*       outnum(a);
_73
 ldd ,s
 pshs d
 jsr outnum
 leas 2,s
*   ptc(n%10 + '0');
_72
 ldd 8,s
 pshs d
 ldd #10
 jsr ccdiv
 exg d,x
 addd #48
 pshs d
 jsr ptc
 leas 2,s
* }
 leas 2,s
 puls y,u,pc

1 ldd #-138
 jsr _stkcheck
 jmp 2b


* 
* outcont(n) int n; {
 global outcont
outcont
 pshs y,u
 jmp 1f
2
*     if( n > 0 )
 ldd 6,s
 lble _74
*      outnum(n);
_75
 ldd 6,s
 pshs d
 jsr outnum
 leas 2,s
*   outcode("\tcontinue");
_74
 data
_76
 fcb 9,99,111,110,116,105,110,117,101,0
 text
 ldd #_76
 pshs d
 jsr outcode
 leas 2,s
*   outcode(0);
 ldd #0
 pshs d
 jsr outcode
 leas 2,s
* }
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* outgoto(n) int n; {
 global outgoto
outgoto
 pshs y,u
 jmp 1f
2
*  outcode("\tgoto ");
 data
_77
 fcb 9,103,111,116,111,32,0
 text
 ldd #_77
 pshs d
 jsr outcode
 leas 2,s
*  outnum(n);
 ldd 6,s
 pshs d
 jsr outnum
 leas 2,s
*   outcode(0);
 ldd #0
 pshs d
 jsr outcode
 leas 2,s
* }
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


 bss
 name r2_c
 define
contfld rmb 2
cont rmb 2
outp rmb 2
outbuf rmb 80
 enddef
 text
