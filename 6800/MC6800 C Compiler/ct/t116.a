 text
* main(argc, argv)   /* sort input lines */
* int argc;
* char *argv[];
* {
 global main
main
 pshs y,u
 jmp 1f
2
*    char *lineptr[100];
*    int nlines;
*    int strcmp(), numcmp();
*    int swap();
*    int numeric; /* = 0 */
* 
*    if (argc>1 && argv[1][0] == '-' && argv[1][1] == 'n')
 leas -204,s
 ldd 210,s
 cmpd #1
 lble _1
_4
 ldx 212,s
 ldb [2,x]
 sex
 cmpd #45
 lbne _1
_3
 ldx 212,s
 ldx 2,x
 ldb 1,x
 sex
 cmpd #110
 lbne _1
*       numeric = 1;
_2
 ldd #1
 std ,s
*    if ((nlines = readlines(lineptr, 100)) >= 0) {
_1
 ldd #100
 pshs d
 leax 6,s
 tfr x,d
 pshs d
 jsr readline
 leas 4,s
 std 2,s
 lblt _5
_6
*       if (numeric)
 ldd ,s
 lbeq _7
*          sort(lineptr, nlines, numcmp, swap);
_8
 ldd #swap
 pshs d
 ldd #numcmp
 pshs d
 ldd 6,s
 pshs d
 leax 10,s
 tfr x,d
 pshs d
 jsr sort
 leas 8,s
*       else
*          sort(lineptr, nlines, strcmp, swap);
 jmp _9
_7
 ldd #swap
 pshs d
 ldd #strcmp
 pshs d
 ldd 6,s
 pshs d
 leax 10,s
 tfr x,d
 pshs d
 jsr sort
 leas 8,s
*       writelines(lineptr, nlines);
_9
 ldd 2,s
 pshs d
 leax 6,s
 tfr x,d
 pshs d
 jsr writelin
 leas 4,s
*    } else
*       printf("input too big to sort\n");
 jmp _10
_5
 data
_11
 fcb 105,110,112,117,116,32,116,111,111,32,98,105,103,32,116,111,32
 fcb 115,111,114,116,13,0
 text
 ldd #_11
 pshs d
 jsr printf
 leas 2,s
* }
_10
 leas 204,s
 puls y,u,pc

1 ldd #-346
 jsr _stkcheck
 jmp 2b


* 
* sort(v, n, comp, exch)   /* sort strings v[0]...v[n-1] */
* char *v[];               /* into increasing order */
* int n;
* int (*comp) (), (*exch) ();
* {
 global sort
sort
 pshs y,u
 jmp 1f
2
*    int gap, i, j;
* 
*    for (gap = n/2; gap > 0; gap /= 2)
 leas -6,s
 ldd 14,s
 pshs d
 ldd #2
 jsr ccdiv
 std 4,s
_14
 ldd 4,s
 lble _13
*       for (i = gap; i < n; i++)
_12
 ldd 4,s
 std 2,s
_18
 ldd 2,s
 cmpd 14,s
 lbge _17
*          for (j = i-gap; j>= 0; j -= gap) {
_16
 ldd 2,s
 subd 4,s
 std ,s
_22
 ldd ,s
 lblt _21
_20
*             if ((*comp) (v[j], v[j+gap]) <= 0)
 ldd ,s
 addd 4,s
 aslb
 rola
 addd 12,s
 tfr d,x
 ldd ,x
 pshs d
 ldd 2,s
 aslb
 rola
 addd 14,s
 tfr d,x
 ldd ,x
 pshs d
 jsr [20,s]
 leas 4,s
 cmpd #0
 lbgt _24
*                break;
_25
 jmp _21
*             (*exch) (&v[j], &v[j+gap]);
_24
 ldd ,s
 addd 4,s
 aslb
 rola
 addd 12,s
 pshs d
 ldd 2,s
 aslb
 rola
 addd 14,s
 pshs d
 jsr [22,s]
 leas 4,s
*          }
* }
_23
 ldd ,s
 subd 4,s
 std ,s
 jmp _22
_21
_19
 ldd 2,s
 addd #1
 std 2,s
 jmp _18
_17
_15
 ldd 4,s
 pshs d
 ldd #2
 jsr ccdiv
 std 4,s
 jmp _14
_13
 leas 6,s
 puls y,u,pc

1 ldd #-144
 jsr _stkcheck
 jmp 2b


* 
* numcmp(s1, s2)  /* compare s1 and s2 numerically */
* char *s1, *s2;
* {
 global numcmp
numcmp
 pshs y,u
 jmp 1f
2
*    double atof(), v1, v2;
* 
*    v1 = atof(s1);
 leas -16,s
 leax 8,s
 pshs x
 ldd 24,s
 pshs d
 jsr atof
 leas 2,s
 jsr _dmove
*    v2 = atof(s2);
 leax ,s
 pshs x
 ldd 26,s
 pshs d
 jsr atof
 leas 2,s
 jsr _dmove
*    if (v1 < v2)
 leax 8,s
 jsr _dstack
 leax 8,s
 jsr _dcmpr
 lbge _26
*       return(-1);
_27
 ldd #-1
 leas 16,s
 puls y,u,pc

*    else if (v1 > v2)
 jmp _28
_26
 leax 8,s
 jsr _dstack
 leax 8,s
 jsr _dcmpr
 lble _29
*       return(1);
_30
 ldd #1
 leas 16,s
 puls y,u,pc

*    else
*       return(0);
 jmp _31
_29
 ldd #0
 leas 16,s
 puls y,u,pc

* }
_31
_28
 leas 16,s
 puls y,u,pc

1 ldd #-154
 jsr _stkcheck
 jmp 2b


* 
* swap(px, py)  /* interchange *px and *py */
* char *px[], *py[];
* {
 global swap
swap
 pshs y,u
 jmp 1f
2
*    char *temp;
* 
*    temp = *px;
 leas -2,s
 ldd [8,s]
 std ,s
*    *px = *py;
 ldd [10,s]
 std [8,s]
*    *py = temp;
 ldd ,s
 std [10,s]
* }
 leas 2,s
 puls y,u,pc

1 ldd #-130
 jsr _stkcheck
 jmp 2b


 bss
 name t116_c
 text
