 text
* /* Aliens -- an animated video game
* 
* #include "aliens.h"
* /*
* #define EMPTY 'E'
* #define FULL 'F'
* #define LEFT ','
* #define LLEFT 'z'
* #define RIGHT '/'
* #define LRIGHT 'c'
* #define HALT '.'
* #define LHALT 'x'
* #define FIRE ' '
* #define DELETE '\177'
* #define ABORT '\34'
* #define QUIT 'q'
* #define GAME1 '1'
* #define GAME2 '2'
* #define GAME3 '3'
* #define GAME4 '4'
* #define BOMB_CNT 4
* #define BOMB_MAX 20
* #define MINCOL 1
* 
* /*
*         int vs_cols = 80;
 data
 global vs_cols
vs_cols fdb 80
 text
*         int scores,bases,game;
*         int danger,max_danger;
*         int flip,flop,left,al_num,b;
*         int al_cnt,bmb_cnt;
*         char *barrin1 =
 data
 global barrin1
barrin1* "         ########          ########          ########          ########";
 fdb _1
 text
* 
*         char *barrin2 =
 data
 global barrin2
barrin2* "        ##########        ##########        ##########        ##########";
 fdb _2
 text
* 
*         char *barrin3 =
 data
 global barrin3
barrin3* "        ###    ###        ###    ###        ###    ###        ###    ###";
 fdb _3
 text
* 
*         char *barrin4 =
 data
 global barrin4
barrin4* "        ###    ###        ###    ###        ###    ###        ###    ###";
 fdb _4
 text
* 
*         char barr1[80];
*         char barr2[80];
*         char barr3[80];
*         char barr4[80];
* 
*         int al_row[55];
*         int al_col[55];
* 
*         int bmb_row[BOMB_MAX];
*         int bmb_col[BOMB_MAX];
* 
*         int shp_vel;
*         int shp_val;
*         int shp_col;
* 
*         int bas_row;
*         int bas_col;
*         int bas_vel;
* 
*         int bem_row;
*         int bem_col;
* 
* /*
* over() {
 global over
over
 pshs y,u
 jmp 1f
2
*         int i;
*         /*
*         if (game==4) {
 leas -2,s
 ldd game
 cmpd #4
 lbne _5
_6
*                 game = 3;       /* remove the cloak of invisibility */
 ldd #3
 std game
*                 for (i=0;i<55;i++)   if (al_row[i] !=0) {
 ldd #0
 std ,s
_9
 ldd ,s
 cmpd #55
 lbge _8
_7
 ldd ,s
 aslb
 rola
 ldx #al_row
 leax d,x
 ldd ,x
 lbeq _11
_12
*                         pos(al_row[i],al_col[i]);
 ldd ,s
 aslb
 rola
 ldx #al_col
 leax d,x
 ldd ,x
 pshs d
 ldd 2,s
 aslb
 rola
 ldx #al_row
 leax d,x
 ldd ,x
 pshs d
 jsr pos
 leas 4,s
*                         ds_obj(((al_col[i]+(al_row[i]/2))&1) + (2*(i/22)));
 ldd ,s
 aslb
 rola
 ldx #al_col
 leax d,x
 ldd ,x
 pshs d
 ldd 2,s
 aslb
 rola
 ldx #al_row
 leax d,x
 ldd ,x
 asra
 rorb
 addd ,s++
 andb #1
 clra
 pshs d
 ldd 2,s
 pshs d
 ldd #22
 jsr ccdiv
 aslb
 rola
 addd ,s++
 pshs d
 jsr ds_obj
 leas 2,s
*                 }
*                 game = 4;       /* be tidy */
_11
_10
 ldd ,s
 addd #1
 std ,s
 jmp _9
_8
 ldd #4
 std game
*         }
*         pos(9,20);
_5
 ldd #20
 pshs d
 ldd #9
 pshs d
 jsr pos
 leas 4,s
*         printf(" __________________________ ");
 data
_13 fcb 32,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95
 fcb 95,95,95,95,95,95,95,95,95,95,32,0
 text
 ldd #_13
 pshs d
 jsr printf
 leas 2,s
*         pos(10,20);
 ldd #20
 pshs d
 ldd #10
 pshs d
 jsr pos
 leas 4,s
*         printf("|                          |");
 data
_14 fcb 124,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
 fcb 32,32,32,32,32,32,32,32,32,32,124,0
 text
 ldd #_14
 pshs d
 jsr printf
 leas 2,s
*         pos(11,20);
 ldd #20
 pshs d
 ldd #11
 pshs d
 jsr pos
 leas 4,s
*         printf("| G A M E   O V E R        |");
 data
_15 fcb 124,32,71,32,65,32,77,32,69,32,32,32,79,32,86,32,69
 fcb 32,82,32,32,32,32,32,32,32,32,124,0
 text
 ldd #_15
 pshs d
 jsr printf
 leas 2,s
*         pos(12,20);
 ldd #20
 pshs d
 ldd #12
 pshs d
 jsr pos
 leas 4,s
*         printf("|                          |");
 data
_16 fcb 124,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
 fcb 32,32,32,32,32,32,32,32,32,32,124,0
 text
 ldd #_16
 pshs d
 jsr printf
 leas 2,s
*         pos(13,20);
 ldd #20
 pshs d
 ldd #13
 pshs d
 jsr pos
 leas 4,s
*         printf("| Game type : %d            |",game);
 data
_17 fcb 124,32,71,97,109,101,32,116,121,112,101,32,58,32,37,100,32
 fcb 32,32,32,32,32,32,32,32,32,32,32,124,0
 text
 ldd game
 pshs d
 ldd #_17
 pshs d
 jsr printf
 leas 4,s
*         pos(14,20);
 ldd #20
 pshs d
 ldd #14
 pshs d
 jsr pos
 leas 4,s
*         printf("|  FINAL SCORE  %4d       |",scores);
 data
_18 fcb 124,32,32,70,73,78,65,76,32,83,67,79,82,69,32,32,37
 fcb 52,100,32,32,32,32,32,32,32,124,0
 text
 ldd scores
 pshs d
 ldd #_18
 pshs d
 jsr printf
 leas 4,s
*         pos(15,20);
 ldd #20
 pshs d
 ldd #15
 pshs d
 jsr pos
 leas 4,s
*         printf("|__________________________|");
 data
_19 fcb 124,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95
 fcb 95,95,95,95,95,95,95,95,95,95,124,0
 text
 ldd #_19
 pshs d
 jsr printf
 leas 2,s
*         leave();
 jsr leave
* }
 leas 2,s
 puls y,u,pc

1 ldd #-140
 jsr _stkcheck
 jmp 2b


* 
* /*
* init()
* {
 global init
init
 pshs y,u
 jmp 1f
2
*         /*
*         game = 0;
 ldd #0
 std game
*         instruct();
 jsr instruct
*         while (!game) poll();
_21
 ldd game
 lbne _20
_22
 jsr poll
*         scores = 0;
 jmp _21
_20
 ldd #0
 std scores
*         bases = 3;
 ldd #3
 std bases
*         danger = 11;
 ldd #11
 std danger
*         max_danger = 22;
 ldd #22
 std max_dang
* }
 puls y,u,pc

1 ldd #-134
 jsr _stkcheck
 jmp 2b


* 
* /*
* tabl()
* {
 global tabl
tabl
 pshs y,u
 jmp 1f
2
*         int j,i;
*         clr();
 leas -4,s
 jsr clr
*         pos(0,0);
 ldd #0
 pshs d
 ldd #0
 pshs d
 jsr pos
 leas 4,s
*         printf("Score:");
 data
_23 fcb 83,99,111,114,101,58,0
 text
 ldd #_23
 pshs d
 jsr printf
 leas 2,s
*         pos(0,9);
 ldd #9
 pshs d
 ldd #0
 pshs d
 jsr pos
 leas 4,s
*         printf("%-d",scores);
 data
_24 fcb 37,45,100,0
 text
 ldd scores
 pshs d
 ldd #_24
 pshs d
 jsr printf
 leas 4,s
*         pos(0,18);
 ldd #18
 pshs d
 ldd #0
 pshs d
 jsr pos
 leas 4,s
*         printf("I N V A S I O N   O F   T H E   A L I E N S !");
 data
_25 fcb 73,32,78,32,86,32,65,32,83,32,73,32,79,32,78,32,32
 fcb 32,79,32,70,32,32,32,84,32,72,32,69,32,32,32,65,32
 fcb 76,32,73,32,69,32,78,32,83,32,33,0
 text
 ldd #_25
 pshs d
 jsr printf
 leas 2,s
*         pos(0,70);
 ldd #70
 pshs d
 ldd #0
 pshs d
 jsr pos
 leas 4,s
*         printf("Lasers: %d",bases);
 data
_26 fcb 76,97,115,101,114,115,58,32,37,100,0
 text
 ldd bases
 pshs d
 ldd #_26
 pshs d
 jsr printf
 leas 4,s
*         /* initialize alien co-ords, display */
* 
*         al_cnt = 55;
 ldd #55
 std al_cnt
*         for (j=0;j<=4;j++)
 ldd #0
 std 2,s
_29
 ldd 2,s
 cmpd #4
 lbgt _28
*         {
_27
*                 pos(danger-(2*j),0);
 ldd #0
 pshs d
 ldd 4,s
 aslb
 rola
 pshs d
 ldd danger
 subd ,s++
 pshs d
 jsr pos
 leas 4,s
*                 for (i=0;i<=10;i++)
 ldd #0
 std ,s
_33
 ldd ,s
 cmpd #10
 lbgt _32
*                 {
_31
*                         ds_obj(((i+j)&1)+(2*(j/2)));
 ldd ,s
 addd 2,s
 andb #1
 clra
 pshs d
 ldd 4,s
 asra
 rorb
 aslb
 rola
 addd ,s++
 pshs d
 jsr ds_obj
 leas 2,s
*                         putchar(' ');
 ldd #32
 pshs d
 jsr putchar
 leas 2,s
*                         al_row[(11*j)+i] = danger - (2*j);
 ldd 2,s
 pshs d
 ldd #11
 jsr ccmult
 addd ,s
 aslb
 rola
 ldx #al_row
 leax d,x
 pshs x
 ldd 4,s
 aslb
 rola
 pshs d
 ldd danger
 subd ,s++
 std [,s++]
*                         al_col[(11*j)+i] = (6*i);
 ldd 2,s
 pshs d
 ldd #11
 jsr ccmult
 addd ,s
 aslb
 rola
 ldx #al_col
 leax d,x
 pshs x
 ldd 2,s
 pshs d
 ldd #6
 jsr ccmult
 std [,s++]
*                 }
*         }
_34
 ldd ,s
 addd #1
 std ,s
 jmp _33
_32
*         if (danger<max_danger)   danger++;
_30
 ldd 2,s
 addd #1
 std 2,s
 jmp _29
_28
 ldd danger
 cmpd max_dang
 lbge _35
_36
 ldd danger
 addd #1
 std danger
*         al_num = 54;
_35
 ldd #54
 std al_num
*         flip = 0;
 ldd #0
 std flip
*         flop = 0;
 ldd #0
 std flop
*         left = 0;
 ldd #0
 std left
*         /*
*         bas_row = 23;
 ldd #23
 std bas_row
*         bas_col = 72;
 ldd #72
 std bas_col
*         bas_vel = 0;
 ldd #0
 std bas_vel
*         bem_row = 0;
 ldd #0
 std bem_row
*         /*
*         for (i=0;i<BOMB_CNT;i++)   bmb_row[i] = 0;
 ldd #0
 std ,s
_39
 ldd ,s
 cmpd #4
 lbge _38
_37
 ldd ,s
 aslb
 rola
 ldx #bmb_row
 leax d,x
 ldd #0
 std ,x
*         b = 0;
_40
 ldd ,s
 addd #1
 std ,s
 jmp _39
_38
 ldd #0
 std b_
*         bmb_cnt = 0;
 ldd #0
 std bmb_cnt
*         /*
*         for (j=0; j < 79; j++) {
 ldd #0
 std 2,s
_43
 ldd 2,s
 cmpd #79
 lbge _42
_41
*                 barr1[j]=' ';
 ldd 2,s
 ldx #barr1
 leax d,x
 ldd #32
 stb ,x
*                 barr2[j]=' ';
 ldd 2,s
 ldx #barr2
 leax d,x
 ldd #32
 stb ,x
*                 barr3[j]=' ';
 ldd 2,s
 ldx #barr3
 leax d,x
 ldd #32
 stb ,x
*                 barr4[j]=' ';
 ldd 2,s
 ldx #barr4
 leax d,x
 ldd #32
 stb ,x
*         }
*         barr1[79]=barr2[79]=barr3[79]=barr4[79]=0;
_44
 ldd 2,s
 addd #1
 std 2,s
 jmp _43
_42
 ldd #0
 ldx #barr4
 stb 79,x
 ldx #barr3
 stb 79,x
 ldx #barr2
 stb 79,x
 ldx #barr1
 stb 79,x
* 
* 
*         pos(19,0);
 ldd #0
 pshs d
 ldd #19
 pshs d
 jsr pos
 leas 4,s
* 
*         for(j=0;barrin1[j];j++)
 ldd #0
 std 2,s
_47
 ldx barrin1
 ldd 2,s
 leax d,x
 ldb ,x
 lbeq _46
*                 barr1[j] = barrin1[j];
_45
 ldd 2,s
 ldx #barr1
 leax d,x
 pshs x
 ldx barrin1
 ldd 4,s
 leax d,x
 ldb ,x
 stb [,s++]
*         printf(barr1);
_48
 ldd 2,s
 addd #1
 std 2,s
 jmp _47
_46
 ldd #barr1
 pshs d
 jsr printf
 leas 2,s
* 
*         pos(20,0);
 ldd #0
 pshs d
 ldd #20
 pshs d
 jsr pos
 leas 4,s
*         for(j=0;barrin2[j];j++)
 ldd #0
 std 2,s
_51
 ldx barrin2
 ldd 2,s
 leax d,x
 ldb ,x
 lbeq _50
*                 barr2[j] = barrin2[j];
_49
 ldd 2,s
 ldx #barr2
 leax d,x
 pshs x
 ldx barrin2
 ldd 4,s
 leax d,x
 ldb ,x
 stb [,s++]
*         printf(barr2);
_52
 ldd 2,s
 addd #1
 std 2,s
 jmp _51
_50
 ldd #barr2
 pshs d
 jsr printf
 leas 2,s
* 
*         pos(21,0);
 ldd #0
 pshs d
 ldd #21
 pshs d
 jsr pos
 leas 4,s
*         for(j=0;barrin3[j];j++)
 ldd #0
 std 2,s
_55
 ldx barrin3
 ldd 2,s
 leax d,x
 ldb ,x
 lbeq _54
*                 barr3[j] = barrin3[j];
_53
 ldd 2,s
 ldx #barr3
 leax d,x
 pshs x
 ldx barrin3
 ldd 4,s
 leax d,x
 ldb ,x
 stb [,s++]
*         printf(barr3);
_56
 ldd 2,s
 addd #1
 std 2,s
 jmp _55
_54
 ldd #barr3
 pshs d
 jsr printf
 leas 2,s
* 
*         pos(22,0);
 ldd #0
 pshs d
 ldd #22
 pshs d
 jsr pos
 leas 4,s
*         for(j=0;barrin4[j];j++)
 ldd #0
 std 2,s
_59
 ldx barrin4
 ldd 2,s
 leax d,x
 ldb ,x
 lbeq _58
*                 barr4[j] = barrin4[j];
_57
 ldd 2,s
 ldx #barr4
 leax d,x
 pshs x
 ldx barrin4
 ldd 4,s
 leax d,x
 ldb ,x
 stb [,s++]
*         printf(barr4);
_60
 ldd 2,s
 addd #1
 std 2,s
 jmp _59
_58
 ldd #barr4
 pshs d
 jsr printf
 leas 2,s
* 
* 
*         /*
*         return(shp_vel = 0);
 ldd #0
 std shp_vel
 leas 4,s
 puls y,u,pc

* }
1 ldd #-142
 jsr _stkcheck
 jmp 2b


* /*
* poll() {
 global poll
poll
 pshs y,u
 jmp 1f
2
*         int cbuf;
*         if (game==1) {
 leas -2,s
 ldd game
 cmpd #1
 lbne _61
_62
*                 if (bas_col<=1)   bas_vel = 1;
 ldd bas_col
 cmpd #1
 lbgt _63
_64
 ldd #1
 std bas_vel
*                 if (bas_col>=72)  bas_vel = -1;
_63
 ldd bas_col
 cmpd #72
 lblt _65
_66
 ldd #-1
 std bas_vel
*         }
_65
* 
*         if (!chaready())
_61
 jsr chaready
 cmpd #0
 lbne _67
*                 return;
_68
 leas 2,s
 puls y,u,pc

* 
*         cbuf=getchar();
_67
 jsr getchar
 std ,s
* 
*         switch (cbuf&0177) {     /* do case char */
 ldd ,s
 andb #127
 clra
 jmp _70
*                 case FIRE:      if (bem_row==0)   bem_row = 22;
_71
 ldd bem_row
 lbne _72
_73
 ldd #22
 std bem_row
*                                 return;
_72
 leas 2,s
 puls y,u,pc

*                 case LLEFT:     ;
_74
*                 case LEFT:      if (game==1)   return;
_75
 ldd game
 cmpd #1
 lbne _76
_77
 leas 2,s
 puls y,u,pc

*                                 return(bas_vel = -1);
_76
 ldd #-1
 std bas_vel
 leas 2,s
 puls y,u,pc

*                 case LRIGHT:    ;
_78
*                 case RIGHT:     if (game==1)   return;
_79
 ldd game
 cmpd #1
 lbne _80
_81
 leas 2,s
 puls y,u,pc

*                                 return(bas_vel = 1);
_80
 ldd #1
 std bas_vel
 leas 2,s
 puls y,u,pc

*                 case LHALT:     ;
_82
*                 case HALT:      if (game==1)   return;
_83
 ldd game
 cmpd #1
 lbne _84
_85
 leas 2,s
 puls y,u,pc

*                                 return(bas_vel = 0);
_84
 ldd #0
 std bas_vel
 leas 2,s
 puls y,u,pc

*                 case DELETE:
*                 case ABORT:
_86
*                 case QUIT:      over();
_87
_88
 jsr over
*                 case GAME1:     if (game!=0)   return;
_89
 ldd game
 lbeq _90
_91
 leas 2,s
 puls y,u,pc

*                                 return(game = 1);
_90
 ldd #1
 std game
 leas 2,s
 puls y,u,pc

*                 case GAME2:     if (game!=0)   return;
_92
 ldd game
 lbeq _93
_94
 leas 2,s
 puls y,u,pc

*                                 return(game = 2);
_93
 ldd #2
 std game
 leas 2,s
 puls y,u,pc

*                 case GAME3:     if (game!=0)   return;
_95
 ldd game
 lbeq _96
_97
 leas 2,s
 puls y,u,pc

*                                 return(game = 3);
_96
 ldd #3
 std game
 leas 2,s
 puls y,u,pc

*                 case GAME4:     if (game!=0)   return;
_98
 ldd game
 lbeq _99
_100
 leas 2,s
 puls y,u,pc

*                                 return(game = 4);
_99
 ldd #4
 std game
 leas 2,s
 puls y,u,pc

*         }
* }
_70
 cmpd #32
 lbeq _71
 cmpd #122
 lbeq _74
 cmpd #44
 lbeq _75
 cmpd #99
 lbeq _78
 cmpd #47
 lbeq _79
 cmpd #120
 lbeq _82
 cmpd #46
 lbeq _83
 cmpd #15
 lbeq _86
 cmpd #7
 lbeq _87
 cmpd #113
 lbeq _88
 cmpd #49
 lbeq _89
 cmpd #50
 lbeq _92
 cmpd #51
 lbeq _95
 cmpd #52
 lbeq _98
_69
 leas 2,s
 puls y,u,pc

1 ldd #-136
 jsr _stkcheck
 jmp 2b


* 
* /*
* main()
* {
 global main
main
 pshs y,u
 jmp 1f
2
*         noecho();
 jsr noecho
*         init();
 jsr init
*         nonl();
 jsr nonl
*         while (1)
_102
*         {
_103
*                 tabl();
 jsr tabl
*                 while (1)
_105
*                 {
_106
*                         poll();
 jsr poll
*                         beam();
 jsr beam
*                         base();
 jsr base
*                         bomb();
 jsr bomb
*                         ship();
 jsr ship
*                         alien();
 jsr alien
*                         alien();
 jsr alien
*                         if (al_cnt==0)   break;
 ldd al_cnt
 lbne _107
_108
 jmp _104
*                 }
_107
*         }
 jmp _105
_104
* }
 jmp _102
_101
 puls y,u,pc

1 ldd #-134
 jsr _stkcheck
 jmp 2b


* barrx(row,col)  /* Simulate a two dimensional index into an array */
* int row,col;
* {
 global barrx
barrx
 pshs y,u
 jmp 1f
2
*         switch(row) {
 ldd 6,s
 jmp _110
* 
*                 case 0: return(barr1[col]);
_111
 ldd 8,s
 ldx #barr1
 leax d,x
 ldb ,x
 sex
 puls y,u,pc

*                 case 1: return(barr2[col]);
_112
 ldd 8,s
 ldx #barr2
 leax d,x
 ldb ,x
 sex
 puls y,u,pc

*                 case 2: return(barr3[col]);
_113
 ldd 8,s
 ldx #barr3
 leax d,x
 ldb ,x
 sex
 puls y,u,pc

*                 case 3: return(barr4[col]);
_114
 ldd 8,s
 ldx #barr4
 leax d,x
 ldb ,x
 sex
 puls y,u,pc

*         }
* }
_110
 cmpd #0
 lbeq _111
 cmpd #1
 lbeq _112
 cmpd #2
 lbeq _113
 cmpd #3
 lbeq _114
_109
 puls y,u,pc

1 jmp 2b


* barrxp(row,col,val)  /* Simulate a two dimensional index into an array */
* int row,col;
* char val;
* {
 global barrxp
barrxp
 pshs y,u
 jmp 1f
2
*         switch(row) {
 ldd 6,s
 jmp _116
* 
*                 case 0: return(barr1[col]=val);
_117
 ldd 8,s
 ldx #barr1
 leax d,x
 ldb 11,s
 stb ,x
 sex
 puls y,u,pc

*                 case 1: return(barr2[col]=val);
_118
 ldd 8,s
 ldx #barr2
 leax d,x
 ldb 11,s
 stb ,x
 sex
 puls y,u,pc

*                 case 2: return(barr3[col]=val);
_119
 ldd 8,s
 ldx #barr3
 leax d,x
 ldb 11,s
 stb ,x
 sex
 puls y,u,pc

*                 case 3: return(barr4[col]=val);
_120
 ldd 8,s
 ldx #barr4
 leax d,x
 ldb 11,s
 stb ,x
 sex
 puls y,u,pc

*         }
* }
_116
 cmpd #0
 lbeq _117
 cmpd #1
 lbeq _118
 cmpd #2
 lbeq _119
 cmpd #3
 lbeq _120
_115
 puls y,u,pc

1 jmp 2b


 bss
 name aliens_c
 define
bem_col rmb 2
bem_row rmb 2
bas_vel rmb 2
bas_col rmb 2
bas_row rmb 2
shp_col rmb 2
shp_val rmb 2
shp_vel rmb 2
bmb_col rmb 40
bmb_row rmb 40
al_col rmb 110
al_row rmb 110
barr4 rmb 80
barr3 rmb 80
barr2 rmb 80
barr1 rmb 80
bmb_cnt rmb 2
al_cnt rmb 2
b_ rmb 2
al_num rmb 2
left rmb 2
flop rmb 2
flip rmb 2
max_dang rmb 2
danger rmb 2
game rmb 2
bases rmb 2
scores rmb 2
 enddef
 data
_1 fcb 32,32,32,32,32,32,32,32,32,35,35,35,35,35,35,35,35
 fcb 32,32,32,32,32,32,32,32,32,32,35,35,35,35,35,35,35
 fcb 35,32,32,32,32,32,32,32,32,32,32,35,35,35,35,35,35
 fcb 35,35,32,32,32,32,32,32,32,32,32,32,35,35,35,35,35
 fcb 35,35,35,0
_2 fcb 32,32,32,32,32,32,32,32,35,35,35,35,35,35,35,35,35
 fcb 35,32,32,32,32,32,32,32,32,35,35,35,35,35,35,35,35
 fcb 35,35,32,32,32,32,32,32,32,32,35,35,35,35,35,35,35
 fcb 35,35,35,32,32,32,32,32,32,32,32,35,35,35,35,35,35
 fcb 35,35,35,35,0
_3 fcb 32,32,32,32,32,32,32,32,35,35,35,32,32,32,32,35,35
 fcb 35,32,32,32,32,32,32,32,32,35,35,35,32,32,32,32,35
 fcb 35,35,32,32,32,32,32,32,32,32,35,35,35,32,32,32,32
 fcb 35,35,35,32,32,32,32,32,32,32,32,35,35,35,32,32,32
 fcb 32,35,35,35,0
_4 fcb 32,32,32,32,32,32,32,32,35,35,35,32,32,32,32,35,35
 fcb 35,32,32,32,32,32,32,32,32,35,35,35,32,32,32,32,35
 fcb 35,35,32,32,32,32,32,32,32,32,35,35,35,32,32,32,32
 fcb 35,35,35,32,32,32,32,32,32,32,32,35,35,35,32,32,32
 fcb 32,35,35,35,0
