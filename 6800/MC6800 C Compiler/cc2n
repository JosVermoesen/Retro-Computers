
 data


* storage

m1 fcc '* Begin expression - ',0
m2 fcc ' pshs u,y,x',$d
 fcc ' leay 4,s',$d,0
m3 fcc ' leas -4,y',$d
 fcc ' puls x,y,u,pc',$d,0
m4 fcc ' lbra L',0
m5 fcc 'L',0
m6 fcc '* Switch ',0
m7 fcc '  ',0
m8 fcc '*    ( ',0
m9 fcc 'Node ',0
m10 fcc 'Var ',0
m11 fcc 'Con ',0
m12 fcc ')  ',0
m13 fcc ' - ',0
m14 fcc '" ',0
m15 fcc '* Cbranch ',0
m16 fcc ' fcb ',0
m17 fcc '"',$d,0
m18 fcc ' leas -L',0
m185 fcc ',s',$d,0
m19 fcc 'equ ',0
m195 fcc ' leas ',0
m196 fcc ',s',$d,0
m20 fcc ' name ',0
m21 fcc ' end',$d,0
m22 fcc ' text',$d,0
m23 fcc ' data',$d,0
m24 fcc ' bss',$d,0
m25 fcc ' global ',0
m26 fcc '* Static ',0
m27 fcc '* Auto ',0
m28 fcc '* Register ',0
m29 fcc ' rmb ',0
m30 fcb 0
m31 fcc ' fcb ',0
m32 fcc ' fdb ',0
m33 fcc '* Label data -',0
m34 fcc ' ldx #',0
m341 fcc ' std ',0
m342 fcc ' cmpd 0,x++',$d
 fcc ' bne ',0
m343 fcc ' jmp [L',0
m344 fcc '-L',0
m345 fcc ',x]',$d
 fcc ' data',$d,0
m346 fcc ' fdb 0',$d,0
m35 fcc ' lbne L',0
m355 fcc ' lbeq L',0
m36 fcc ',y',0
m37 fcc ' ldb ',0
m38 fcc ' ldd ',0
m39 fcc ' addb ',0
m40 fcc ' addd ',0
m41 fcc ' stb ',0
m42 fcc ' negb',$d,0
m43 fcc ' nega',$d
 fcc ' negb',$d
 fcc ' sbca #0',$d,0
m44 fcc ' subb ',0
m45 fcc ' subd ',0
m46 fcc ' lda ',0
m47 fcc ' mul',$d,0
m48 fcc ' jsr imul',$d,0
m49 fcc ' pshs d',$d,0
m50 fcc '0,s+',0
m51 fcc ' stb 0,s',$d,0
m52 fcc ' std 0,s',$d,0
m53 fcc ' leas 2,s',$d,0
m54 fcc ' pshs b',$d,0
m55 fcc ' andb ',0
m56 fcc ' anda ',0
m57 fcc ' clrb',$d,0
m58 fcc ' clra',$d,0
m59 fcc '0,s',0
m60 fcc '1,s',0
m61 fcc ' sex',$d,0
m62 fcc ' comb',$d,0
m63 fcc ' coma',$d,0
m64 fcc ' orb ',0
m65 fcc ' ora ',0
m66 fcc ' eorb ',0
m67 fcc ' eora ',0
m68 fcc ' jsr ',0
m69 fcc ' inc ',0
m70 fcc ' addd #1',$d,0
m71 fcc ' bne 1f',$d,0
m72 fcc '1',$d,0
m73 fcc ' dec ',0
m74 fcc ' subd #1',$d,0
m75 fcc ' tst ',0
m76 fcc '1 dec ',0
m77 fcc ' jsr casr',$d,0
m78 fcc ' jsr crasr',$d,0
m79 fcc ' jsr irasr',$d,0
m80 fcc ' jsr irlsr',$d,0
m81 fcc ' jsr iasr',$d,0
m82 fcc ' jsr ilsr',$d,0
m83 fcc ' tfr a,b',$d,0
m84 fcc ' asrb',$d,0
m85 fcc ' asra',$d
 fcc ' rorb',$d,0
m86 fcc ' lsra',$d
 fcc ' rorb',$d,0
m87 fcc ' leas 1,s',$d,0
m88 fcc ' tfr b,a',$d,0
m89 fcc ' lslb',$d
 fcc ' rola',$d,0
m90 fcc ' jsr clsl',$d,0
m91 fcc ' jsr ilsl',$d,0
m92 fcc ' jsr crlsl',$d,0
m93 fcc ' jsr irlsl',$d,0
m94 fcc ' lslb',$d,0
m95 fcc ' lbeq ',0
m96 fcc ' lbne ',0
m97 fcc ' jmp ',0
m98 fcc ' bra ',0
m99 fcc ' cmpb ',0
m100 fcc ' cmpd ',0
m101 fcc ' clra',$d
 fcc ' clrb',$d
 fcc ' bra 2f',$d
 fcc '1 ldd #1',$d
 fcc '2',$d,0
m102 fcc ' cmpb #0',$d,0
m103 fcc ' cmpd #0',$d,0
m104 fcc ' ldx ',0
m105 fcc ' leax ',0
m106 fcc ' stx 0,s',$d,0
m107 fcc ' pshs x',$d,0
m108 fcc '0,s++',0
m109 fcc ' stx ',0
m110 fcc ' leax b',0
m111 fcc ' leax d',0
m112 fcc ',x',$d,0
m113 fcc ' tfr x,d',$d,0
m114 fcc ' tfr d,x',$d,0
m115 fcc ' cmpx ',0
m116 fcc ' puls x',$d,0
m117 fcc ' ldx 0,s',$d,0
m118 fcc ' jsr cdiv',$d,0
m119 fcc ' jsr idiv',$d,0
m120 fcc ' jsr crdiv',$d,0
m121 fcc ' jsr irdiv',$d,0
m122 fcc ' jsr cmod',$d,0
m123 fcc ' jsr imod',$d,0
m124 fcc ' jsr crmod',$d,0
m125 fcc ' jsr irmod',$d,0
m126 fcc ' ldu ',0
m127 fcc ' leau ',0
m128 fcc ' leau b',0
m129 fcc ' leau d',0
m130 fcc ',u',$d,0
m131 fcc ' cmpu ',0
m132 fcc ' cmpx #0',$d,0
m133 fcc ' cmpu #0',$d,0
m134 fcc ' stu ',0
m135 fcc ' pshs u',$d,0
m136 fcc ' stu 0,s',$d,0
m137 fcc ' ldd 0,s',$d
     fcc ' pshs x',$d
     fcc ' subd 0,s++',$d,0
m138 fcc ' tfr x,d',$d
     fcc ' subd 0,s',$d,0
m139 fcc ' tfr u,d',$d,0
m140 fcc ' pshs u',$d
     fcc ' cmpx 0,s++',$d,0
m141 fcc ' pshs x',$d
     fcc ' cmpu 0,s++',$d,0
m200 fcc 'beq ',0
m201 fcc 'bne ',0
m202 fcc 'ble ',0
m203 fcc 'blt ',0
m204 fcc 'bge ',0
m205 fcc 'bgt ',0
m206 fcc 'bls ',0
m207 fcc 'blo ',0
m208 fcc 'bhs ',0
m209 fcc 'bhi ',0

tmpnam fcc 'cc_temp',0

iwrt fcb write
 fdb outchb
iwrt2 fdb 0

revcon fcb 0 conditional sense reversal flag
ndrev fcb 0 need to reverse comparison flag
opcls fcb 0 operator class
oprtor fcb 0 operator
entype fdb 0 entry type
enbtyp fcb 0 basic entry type
lstenb fcb 0 last basic type
stklev fcb 0 stack level counter
stksiz fdb 0 stack size counter
offval fdb 0 offset address value
spctos fcb 0 tos flag
op1ptr fdb 0 op1 pointer
op2ptr fdb 0 op2 pointer
andptr fdb 0 and stack pointer
orptr fdb 0 or stack pointer
cndptr fdb 0 conditional stack pointer
brntyp fcb 0 branch type
redcnt fcb 0 reduce count
condit fcb 0 condition
unscom fcb 0 unsigned flag
curadr fdb 0 current address reg
indrct fcb 0 indirection flag
ptsubf fcb 0 pointer subtract flag
frcind fcb 0 force indirection flag
cleanx fcb 0 cleaning x flag
nofree fcb 0 no free ar flag
mmflag fcb 0 minus dec flag
nxtopr fcb 0 next operator
faknod fdb 0,0 fake node
doind fcb 0 ind flag
uflag fcb 0 u reg flag
autptr fdb 0 auto inc name pointer
llabel fdb 0 local label counter
nxtlab fdb 10000 label values
eof fcb 0
infd fdb 0
outfd fdb 0
inchp fdb 0
inche fdb 0
outchp fdb 0
matlev fdb 0
sprchr fcb 0 spare char holder
braptr fdb 0 branch table pointer
expptr fdb 0 exp table pointer
codptr fdb 0 code gen pointer
ccok fcb 0 cc reg correct?
dcont fdb 0 d contents
xcont fdb 0 x contents
lcont fdb 0 long contents
fcont fdb 0 float contents
drcont fdb 0 remembered d contents
xrcont fdb 0 remembered x contents
nbuf fdb 0,0,0,0,0

 bss

andstk rmb 32 and stack
orstk rmb 32 or stack
cndstk rmb 32 conditional stack
swtlst rmb 1024 switch list buffer
inchb rmb 512
outchb rmb 512
brtbl rmb 4*MAXBRS branch table
exptbl rmb EXPSIZ*MAXEXP
adregs rmb ADRSIZ*NUMADR

 text

 end pass2
