
 ttl code output and code
 pag


*
* output function name
*

oename ldb #8 set max count
 lda #'_ output '_'
 lbsr outobj
outna2 lda sname,x get character
 beq outna4
 leax 1,x
 lbsr outobj print it
 decb
 bne outna2
outna4 rts return

outnam bsr oename output name
 lbra cheaf

otnamp clr plone clear out plus one
 bsr oename print name
 ldx #xplone "+1"
 lbsr probj
 lbra cheaf

otnmsp bsr oename print name
 bra otslb1

*
* output label
*

olable std num save label
 pshs x
 lda #'L
 lbsr outobj print it
 ldx #num point to it
 clrb
 lbsr outdec
 puls x,pc

outlbp clr plone
 bsr olable
 ldx #xplone "+1"
 lbra probj
 lbra cheaf

otslbp pshs x
 bsr olable output label
otslb1 lbsr otplus output '+'
 ldd stoff get str offset
 tst plone plus one?
 beq otslb2
 addd #1 add in 1
 clr plone
otslb2 std num save offset
 lbsr otnum
 puls x
 lbra cheaf

outlb bsr olable
 lbra cheaf

*
* output object code new line
*

objnl pshs x
 tst inaflg indirection?
 bne objnl4
 lbsr pcrlf
objnl4 puls x,pc

*
* print object string
*

probj lda 0,x+ get character
 beq probj2
 lbsr outobj
 bra probj
probj2 rts return

*
* output decimal number
*

otnum ldx #num point to num

outdec tst 0,x negative?
 bpl outde2
 ldd 0,x
 coma
 comb
 addd #1 2's comp it
 std num
 ldx #num
 lda #'- output minus
 lbsr outobj
outde2 clrb
 lbra fotdec output it

*
* output branch instruction
*

outbr leax xlbra,pcr
 bra probj

*
* output beq type instruction
*

outeb leax xlbeq,pcr
 bra probj

*
* output bne type instruction
*

outnb leax xlbne,pcr
 bra probj

*
* output function return code
*

outrt leax xret1,pcr
 bsr probj
 bsr objnl
 leax xret2,pcr
 bsr probj
 bra objnl

*
* output function header code
*

outhdr leax xhdr1,pcr
 lbsr probj
 lbsr objnl
 leax xhdr2,pcr
 lbsr probj
 lbra objnl

*
* output stack init code
*

outist leax xleas,pcr
 lbsr probj
 ldd nxtaut get stack size
 addd #-FSTAUT
 std num
 ldx #num point to it
 lbsr outdec output it
otcms leax xleas2,pcr
 lbsr probj
 lbra objnl

*
* output offset from marker address
*

omrkof std num save offset
 ldx #num
 lbsr outdec output it
 leax xcmu,pcr
 lbsr probj
 lbra objnl

*
* output fdb
*

outfdb pshs x save x
 leax xfdb,pcr point to string
 lbsr probj
 puls x,pc

*
* output constant in d
*

outcon pshs x
 std num save constant
 ldx #num point to it
 clrb
 lbsr outdec output it
 puls x
 lbra objnl do new line

*
* output 'fdb 0'
*

outrm2 leax xfdb0,pcr
 lbsr probj
 lbra objnl do new line

*
* output load pointer instruction
*

outlpt leax xldxi,pcr
 lbra probj output it

*
* output label without new line
*

outlbn lda #'L output label part
 lbsr outobj
 ldx #num point to label number
 clrb
 lbra outdec output it

*
* output store value instruction
*

outstv leax xstd,pcr point to string
 lbra probj output it

*
* Check for e.a. mode
*

cheaf tst eaflg
 lbeq objnl print new line
 clr eaflg
 pshs x
 leax xcpcr,pcr output ',pcr'
 lbsr prcnl
 puls x,pc return

*
* output switch code (2 parts)
*

outswc leax xswc1,pcr point to code
 lbsr probj output ot
 lbsr objnl do new line
 lbra outnb do 'bne'

outsc2 leax xswc2,pcr point to code
 lbsr probj output it
 ldd 4,s get label list label
 std num
 bsr outlbn output label
 lda #'- output '-'
 lbsr outobj
 ldd 6,s get data list label
 std num
 bsr outlbn output label
 leax xswc3,pcr point to code string
 lbsr probj output it
 lbra objnl do new line

*
* output string bytes
*

otstr leax xfcb,pcr point to string
 lbsr probj print it
otstr2 lda 0,y+ get character
 beq otstr4 null character?
 bsr othbyt out hex
 lda #', output comma
 lbsr outobj output byte
 bra otstr2 repeat
otstr4 bsr othbyt out hex
 lbra objnl

*
* output one hex byte
*

othbyt sta num+1 save byte
 clr num
 ldx #num point to it
 lbra outdec

*
* output "pshs b"
*

otpshb leax xpshb,pcr
 bra prcnl

*
* output "pshs d"
*

otpshd leax xpshd,pcr
 bra prcnl

*
* print code at x plus new line
*

prcnl lbsr probj
 lbra objnl

*
* output "ldb"
*

otldb leax xldb,pcr
 lbra probj

*
* output "ldd"
*

otldd leax xldd,pcr
 lbra probj

*
* output "addb"
*

otadb leax xadb,pcr
 lbra probj

*
* output "clra"
*

otclra leax xclra,pcr
 bra prcnl

*
* output "adca #0"
*

otadc0 leax xadc0,pcr
 bra prcnl

*
* output "addd"
*

otadd leax xaddd,pcr
 lbra probj

*
* output "#"
*

otpnd leax xpnd,pcr
 lbra probj

*
* output "0,s+"
*

ot0sp leax xzsp,pcr
 lbra prcnl

*
* output "0,s++"
*

ot0spp leax xzspp,pcr
 lbra prcnl

*
* output "stb"
*

otstb leax xstb,pcr
 lbra probj

*
* output "std"
*

otstd leax xstd,pcr
 lbra probj

*
* output "[0,s++]"
*

ot0spi leax x0spi,pcr
 lbra prcnl

*
* output "comb"
*

otcomb leax xcomb,pcr
 lbra prcnl

*
* output "comd" equiv
*

otcomd bsr otcomb
 leax xcoma,pcr
 lbra prcnl

*
* output "negb"
*

otnegb leax xnegb,pcr
 lbra prcnl

*
* output "negd" equiv
*

otnegd bsr otcomd
 leax xaddi1,pcr
 lbra prcnl

*
* output "a "
*

otaca leax xacca,pcr
 lbra probj

*
* output "b "
*

otacb leax xaccb,pcr
 lbra probj

*
* output "cmpb"
*

otcmpb leax xcmpb,pcr
 lbra probj

*
* output "cmpa"
*

otcmpa leax xcmpa,pcr
 lbra probj

*
* output "cmpd"
*

otcmpd leax xcmpd,pcr
 lbra probj
*
* output "cmpa #0"
*

otcaiz leax xcaiz,pcr
 lbra prcnl

*
* output "bne"
*

otbne leax xbne,pcr
 lbra probj

*
* output "ldd #0"
*

otldiz leax xldiz,pcr
 lbra prcnl

*
* output "bra"
*

otbra leax xbra,pcr
 lbra probj

*
* output "ldd #1"
*

otldio leax xldio,pcr
 lbra prcnl

*
* output "leas"
*

otleas leax xleas,pcr
 lbra probj

*
* output "lbsr"
*

otlbsr leax xlbsr,pcr
 lbra probj

*
* output static space reservation
*

otrsst pshs x
 lbsr outlb output label
 bsr otrmb output 'rmb'
 puls x
 lda stype+1,x get type
 ldb #1 set size
 cmpa #CHR is it character?
 beq otrss2
 incb make int ************
otrss2 clra
otrss4 std num save size
 pshs x
 ldx #num point to size
 lbsr outdec print it
 lbsr objnl print new line
 puls x,pc return

*
* output "rmb"
*

otrmb leax xrmb,pcr
 lbra probj

*
* output external definition
*

otextd ldx symloc point to name
 lbsr oename output name
 bsr otrmb output "rmb"
 ldx #dtype point to size info
 lbsr sizit get size
 bra otrss4

*
* output "["
*

otlsb leax xlsb,pcr
 lbra probj

*
* output "]"
*

otrsb leax xrsb,pcr
 lbra prcnl

*
* output "leax d,x"
*

otledx leax xledx,pcr
 lbra prcnl

*
* output "leay d,y"
*

otledy leax xledy,pcr
 lbra prcnl

*
* output "leax"
*

otleax leax xleax,pcr
 lbra probj

*
* output "leay"
*

otleay leax xleay,pcr
 lbra probj

*
* output ",x"
*

otcmx leax xcmx,pcr
 lbra prcnl

*
* output ",y"
*

otcmy leax xcmy,pcr
 lbra prcnl

*
* output "ldx"
*

otldx leax xldx,pcr
 lbra probj

*
* output "ldy"
*

otldy leax xldy,pcr
 lbra probj

*
* output 'pshs x'
*

otpshx leax xpshsx,pcr
 lbra prcnl

*
* output "ldx [0,x]"
*

otxind leax xxind,pcr
 lbra prcnl

*
* output "ldy [0,y]"
*

otyind leax xyind,pcr
 lbra prcnl

*
* output '+'
*

otplus lda #'+
 lbra outobj

*
* output 'stx'
*

otstx leax xstx,pcr
 lbra probj

*
* output 'sty'
*

otsty leax xsty,pcr
 lbra probj


*
* code table
*

xlbra fcc ' lbra ',0
xlbeq fcc ' lbeq ',0
xlbne fcc ' lbne ',0
xlble fcc ' lble ',0
xlblt fcc ' lblt ',0
xlbge fcc ' lbge ',0
xlbgt fcc ' lbgt ',0
xlbls fcc ' lbls ',0
xlblo fcc ' lblo ',0
xlbhs fcc ' lbhs ',0
xlbhi fcc ' lbhi ',0
xret1 fcc ' leas -4,u',0
xret2 fcc ' puls x,y,u,pc',0
xhdr1 fcc ' pshs u,y,x',0
xhdr2 fcc ' leau 4,s',0
xleas fcc ' leas ',0
xleas2 fcc ',s',0
xldd fcc ' ldd ',0
xcmu fcc ',u',0
xfdb fcc ' fdb ',0
xfcb fcc ' fcb ',0
xldxi fcc ' ldx #',0
xstd fcc ' std ',0
xswc1 fcc ' cmpd 0,x++',0
xswc2 fcc ' jmp [',0
xswc3 fcc ',x]',0
xfdb0 fcc ' fdb 0',0
xpshb fcc ' pshs b',0
xpshd fcc ' pshs d',0
xldb fcc ' ldb ',0
xadb fcc ' addb ',0
xclra fcc ' clra',0
xadc0 fcc ' adca #0',0
xaddd fcc ' addd ',0
xpnd fcc '#',0
xzsp fcc '0,s+',0
xzspp fcc '0,s++',0
xstb fcc ' stb ',0
x0spi fcc '[0,s++]',0
xcomb fcc ' comb',0
xcoma fcc ' coma',0
xaddi1 fcc ' addd #1',0
xnegb fcc ' negb',0
xacca fcc 'a ',0
xaccb fcc 'b ',0
xand fcc ' and',0
xor fcc ' or',0
xeor fcc ' eor',0
xplone fcc '+1',0
xcmpb fcc ' cmpb ',0
xcmpa fcc ' cmpa ',0
xcmpd fcc ' cmpd ',0
xcaiz fcc ' cmpa #0',0
xbne fcc ' bne ',0
xbra fcc ' bra ',0
xldiz fcc ' ldd #0',0
xldio fcc ' ldd #1',0
xlbsr fcc ' lbsr ',0
xrmb fcc ' rmb ',0
xledx fcc ' leax d,x',0
xledy fcc ' leay d,y',0
xleax fcc ' leax ',0
xleay fcc ' leay ',0
xcmx fcc ',x',0
xcmy fcc ',y',0
xldx fcc ' ldx ',0
xldy fcc ' ldy ',0
xlsb fcc '[',0
xrsb fcc ']',0
xpshsx fcc ' pshs x',0
xxind fcc ' ldx [0,x]',0
xyind fcc ' ldy [0,y]',0
xstx fcc ' stx ',0
xsty fcc ' sty ',0
xcpcr fcc ',pcr',0


