= C Compiler for the 6800 (CC6303) =

A C compiler for the 6800 processor from [https://github.com/EtchedPixels/CC6303 EtchedPixels].

This is based upon [https://github.com/cc65/cc65 cc65] but involves doing some fairly brutal things to the original compiler. As such I currently have no plans to merge it back the other way.

In particular cc65 has a model where the code is generated into a big array which is parsed as it goes into all sorts of asm level info which drives optimizer logic. It also uses it to allow the compiler to re-order blocks and generate code then change its mind.

= Status =

The basic structure is now reasonably functional. You can "make" and "make install" to get a complete compiler/assembler/linker/tools that appear to generate actual binaries.

The assembler and linker should be reasonably reliable and complete. The compiler at this point should be reasonably solid on 6803 and 6303 except for 32bit types. The core compiler support for 32bit types is there and mostly tested but the library helpers for shifts, multiply and particularly division are not yet fully debugged.

On the 6800 processor the library routines are far from complete. Note that the 6800 target will generate much slower and larger code because the 6800 lacks 16bit operations and some other important features. 6800 code is about a third larger.

The bundled C library routines are initial code and not fully tested or reviewed. They are intended to provide native versions of key and time critical functions not a full C library.

= How to use =

For a simple test environment the easiest approach at this point is to compile the code with cc68 and then link with a suitable crt.o (entry code)
<pre>
cc68 -m6803 -c foo.c
ld68 -b -C startaddress crt.o mycode.o /opt/cc68/lib/lib6803.a
</pre>

= TODO =

* Strip out lots more unused cc65 code. There is a lot of unused code, and a load of dangling header references and so on left to resolve.
* Remove remaining '6502' references.
* Make embedding C source into asm as comments work for debugging
* The assembler uses 15 char names internally. The compiler does not. This leads to asm errors when the symbols clash.
* Maybe float: cc65 lacks float beyond the basic parsing support, so this   means extending the back end to handle all the fp cases (probably via stack) and using the long handling paths for the non maths ops.
* A proper optimizer

= BIG ISSUES =

* We can make much better use of X in some situations than the cc65 code based generator really understands. In particular we want to be able to tell the expression evaluation "try and evaluate this into X without using D". In practice that means simple constants and stack offsets. That will improve some handling of helpers. We can't do that much with it because we need to be in D for maths. Right now the worst of this is peepholed.
* Fetch pointers via X when we can, especially on 6803. In particular also deal with pre/post-inc of statics (but not alas pre/post inc locals) with

<pre>
ldx $foo
inx
stx $foo
dex
</pre>

* Make sure we can tell if the result of a function is being evaluated or if the function returns void. In those cases we can use D (mostly importantly  B) to use abx to fix the stack offsets.
* copt has no idea about register usage analysis, dead code elimination etc. We could do far better with a proper processor that understood 680x not just a pattern handler. We fudge it a bit with hints but it's not ideal.
* Floating point
** The cc65 front end has some float support although it is not supported by the back end, and I don't know how tested the frontend code is therefore. Adding float should not be hard, it's basically a long with no inlineable operators as far as the compiler code generator is concerned. It would however need someone to volunteer to write the basic IEEE floating point operations (add, negate, multiply, divide, maybe compare, plus conversion to and from float) for a 680x processor.

= Thoughts on 6800 =

The first problem is the lack of PSHX and PULX. The current code uses these to stack arguments more easily, because you can LDX, PSHX but have to LDD PSHA/B (or on 6800 LDAA LDAB PSHA/B).

Almost all of this code goes via CanLoadViaX/CanStoreViaX so you can tell the compiler tough it can't do that.

X is not preserved across function calls so pshx/pulx is only used internally for preserving stuf and that can use an extra  DP value instead (just remember to save/restore it on irqs like @tmp and friends).

Constant loads need optimizing because it's not only a win to use clra/clrb but also to do things like clra ldab #n and also to spot stuff like -1 with
<pre>
ldaa #-1 tab
</pre>

Probably all the ldd statements everywhere would want to become

<pre>
LoadDConst(value, preserve_carry)
LoadDViaX(value)
</pre>

and churn out the right per CPU code, ditto some other cases.

The second problem is adjusting the stack. On the 6803 we can use ABX to recover the stack frame (although we don't yet do it well as we don't usually know in the right place if we called a void function or don't need the arguments). On the 6800 you can't pull into X which also means that since A and B hold your arguments you've not got many options. For smaller values one option might be to have say 32 INS statements in a row with labels and just JMP to the right offset. Big stuff will have to std @tmp sts @tmp2 ldd #-n addd @tmp2 std @tmp2 lds @tmp2 etc

Similar problem building a stack frame but worse in that you can't just jsr/rts. Possibly something like

<pre>
 ldx #label
 jmp growstack
label:	.byte n
 code continues...
</pre>

but still not pretty...

Various other chunks of code need to move between X and D. These should already do the right thing because when you can't work via X the same mess is present on 6803, and only 6303 has xgdx. With some peephole rules a surprisingly large number of these go away.

The painful stuff is dealing with all the code that uses 16bit ops for add/sub/etc as each will need an alternative, or in some cases for size probably a helper jsr. A lot of it doesn't bloat much but becomes add/adc etc.

Stack offsets are uglier because there is no ABX. That means that if it's not within the ,X range you have to do it the hard way and can't use tsx abx patterns . The code is already there for this, it's just ugly and slow but the 6801/6303 almost never use it. Shouldn't be a big problem cc65 on the 6502 just barfs in this case and it handles most stuff!

(Another option for the D reg stuff in many cases might be to add a
<pre>
	.setcpu 6800auto
</pre>

and have the assembler turn the 16bit ops that are trivial into the  equivalent pairs - eg for load, store, rotate, shift, add, sub.)
