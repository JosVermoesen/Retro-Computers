The original 1979 listing from the Forth Interest Group is available online.

Here’s what you have:

= fig-FORTH_6800.asm =

This file is the source code for fig-FORTH for the 6800 with the following modifications:

* Modified to allow it to be assembled using the A68 assembler
* The address of the ACIA control & data ports changed to be the Corsham Tech SS-50 SIO
* The TYPE2 function was changed to make the VLIST command work properly
* MEMTOP extended to $7BFF to allow for 18 screens in RAM above fig-FORTH

= fig-FORTH_6800.lst = 

This file is the listing produced from the AS02 cross-assembler.

= fig-FORTH_s19 = 

This file is the s-record file to be loaded into the 6800 system.

= forth_screens.asm =

This file is the source code for 8 screens of FORTH code to reside in RAM above fig-FORTH. System RAM from $3210 - $7BFF is available to fig-FORTH as a virtual disk system. This configuration will hold screens 0-17. Screens 0-7 are created by this file.

= forth_screens.lst = 

This file is the listing produced from the AS02 cross-assembler.

= forth_screens.s19 =

This file is the s-record file to be loaded into the 6800 system.

= LineEditorCommands.txt =

This file contains all the definitions for a very simple line editor in FORTH. Once fig-FORTH is running, SEND this file from the terminal using 0.250 sec line delay and 0.050 sec character delay. Once all the lines have been read in as if typed by the operator, FORTH will now have screen editing capability. (Please note that I’ve only implemented the Line Editing and Screen Editing commands in the LineEditorCommands.txt file. None of the String Editing commands are there. That will have to be an exercise left to the user.)

= fig-FORTH_Editor.txt =

This file contains all the FORTH code for the simple line editor, including the string editing commands, as well as the User Manual. 

The overall process with a Corsham Technologies 6800 system would be like this:
# Power on and RESET the system into xSWTBUG.
# Type L on the terminal.
# SEND the fig-FORTH_6800.s19 file    (I’ve been using 0.025 sec line delay & 0.010 sec character delay).
# Optional: Type L, and SEND the forth_screens.s19 file.
# Type J 1000
# See the Forth-68 sign-on message.
# Type a CR to see the OK prompt. (fig-FORTH requires input be all capital letters.)
# Type DR0 to assure that fig-FORTH is using drive 0 for screens.
# Type EMPTY-BUFFERS to assure that fig-FORTH is properly set to load screens from RAM-disk.

Once fig-FORTH is running, all the base words are available. Type VLIST to see the dictionary. If you loaded the forth_screens.s19 file, screens 0-7 are in RAM-disk. Type 0 LIST to see the index screen. Type 4 LIST and 5 LIST to see the error messages. Screen 1 contains a command for the system to use the error messages from screens 4 & 5, as well as a simple debug command called DUMPHEX. Type 1 LOAD to load those commands.

Once fig-FORTH is running, if you want to use the simple line editor, you can SEND the LineEditorCommands.txt file from the terminal SLOWLY.    I suggest 0.250 sec line delay and 0.050 sec character delay.    Once all the commands are entered, the editor is invoked by the EDITOR command.    If you loaded the forth_screens.s19 file, any of those screens may be edited, or a new screen can be CLEARed for your use.    For example, type 8 CLEAR to clear screen 8 and prepare it to be edited.    The 32K RAM in the CT 6800 system can hold 18 screens (0-17) in the RAM-disk in the current configuration.

At present, the fig-FORTH memory map shows the dictionary building up from $0183 towards $0F2F.    However, remember that the data stack comes downward from $0F2F.    I don’t know how much the dictionary can hold before a collision will be imminent.    I did check to see that starting from scratch and loading the editor brings up the end of the dictionary from $0183 to $0441.    So creating a significant amount of stuff uses up space in the dictionary, but not too bad.

I envision loading in the editor to create screens containing your application, and then RESETing out of fig-FORTH and saving the block of screens away using the system monitor.    Once your application program is done, just load those screens after you load fig-FORTH, and then within fig-FORTH you can load your screens with your application into the FORTH dictionary and invoke it.    Kind of like editing screens onto a floppy disk, and putting the right floppy disk into the drive 0 in order to have those screens available to FORTH.

Given that the Corsham Technologies 6800 system is a replica of the SWTPC 6800 system, I hope this will be useful for folks who have a real SWTPC system, too.

Good luck!

= VLIST =

<PRE>
TASK   LABTH_____________   NOOP   VLIST   TRIAD   INDEX   LIST   ?   .   D.   D.R   .R   #S   #   SIGN
#>   <#   SPACES   WHILE   ELSE   IF   REPEAT   AGAIN   END   UNTIL   +LOOP   LOOP   DO   THEN   ENDIF
BEGIN   BACK   LABGET____________   '   R/W   HI   LO   BLOCK_READ   BLOCK_WRITE   ?DISC   -->   LOAD
MESSAGE   .LINE   (LINE)   BLOCK   BUFFER   DR1   DR0   EMPTY-BUFFERS   UPDATE   +BUF   PREV   USE
DABS   ABS   M/MOD   */   */MOD   MOD   /   /MOD   *   S->D   COLD   RLABT__________   QUIT   (   DEFINITIONS  
VOCABULARY   IMMEDIATE   INTERPRET   DLITERAL   LITERAL   [COMPILE]   CREATE   ID.   ERROR   OR   -FIND
NUMBER   (NUMBER)   LABD______________   PAD   HOLD   BLANKS   ERASE   FILL      QUERY   EXPECT   ?STACK
."   (.")   -TRAILING   TYPE   COUNT   DOES>   <BUILDS   ;CODE   (:CODE)   DECIMAL   HEX   SMUDGE   ]
[   COMPILE   ?LOADING   ?CSP   ?PAIRS   ?EXEC   ?COMP   ?ERROR   !CSP   PFA   NFA   CFA   LFA   LATEST
TRAVERSE   -DUP   MAX   MIN   SPACE   ROT   >   <   =   -   C,   ,   ALLOT   HERE   2+   1+   COLUMNS
HLD   R#   CSP   FLD   DPL   BASE   STATE   CURRENT   CONTEXT   OFFSET   SCR   OUT   IN   BLK   VOC-LINK
DP   FENCE   WARNING   WIDTH   TIB   R0   S0   LABIGIN___________   B/SCR   B/BUF   LIMIT   FIRST   BL
3   2   1   0   USER   VARIABLE   CONSTANT   ;   :   C!   !   C@   @   TOGGLE   +!   DUP   SWAP   DROP
OVER   DMINUS   MINUS   D+   +   0<   0=   R   R>   >R   LEAVE   ;S   RP!   SP!   SP@   XOR   OR   AND
U/   U*   CMOVE   CR   ?TERMINAL   KEY   EMIT   ENCLOSE   (FIND)   DIGIT   I   (DO)   (+LOOP)   (LOOP)
0BRANCH   BRANCH   EXECUTE   LIT    OK
</PRE>
