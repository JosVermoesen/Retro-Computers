From 41463f7063ba18e1998b5877069c069f5769b79a Mon Sep 17 00:00:00 2001
From: Christian Zietz <czietz@gmx.net>
Date: Sun, 13 Nov 2016 13:02:24 +0000
Subject: [PATCH] Add proper function prototypes

---
 bdos/bdosmain.c | 239 +++++++++++++++++++++++++++++++-------------------------
 1 file changed, 131 insertions(+), 108 deletions(-)

diff --git a/bdos/bdosmain.c b/bdos/bdosmain.c
index ac4ea96..79e8d80 100644
--- a/bdos/bdosmain.c
+++ b/bdos/bdosmain.c
@@ -110,6 +110,29 @@ static const SPECNAME specname_table[] =
 };
 #define SN_ENTRIES  ARRAY_SIZE(specname_table)
 
+/* 
+ * typedefs for function calls with 0 to 7 int parameters 
+*/
+typedef long (*fnproto0)(void);
+typedef long (*fnproto1)(int);
+typedef long (*fnproto2)(int,int);
+typedef long (*fnproto3)(int,int,int);
+typedef long (*fnproto4)(int,int,int,int);
+typedef long (*fnproto5)(int,int,int,int,int);
+typedef long (*fnproto6)(int,int,int,int,int,int);
+typedef long (*fnproto7)(int,int,int,int,int,int,int);
+
+typedef union {
+    fnproto0 fncall0;
+    fnproto1 fncall1;
+    fnproto2 fncall2;
+    fnproto3 fncall3;
+    fnproto4 fncall4;
+    fnproto5 fncall5;
+    fnproto6 fncall6;
+    fnproto7 fncall7;
+} fnproto;
+
 
 /*
  * FND - Function Descriptor
@@ -120,7 +143,7 @@ static const SPECNAME specname_table[] =
  */
 typedef struct
 {
-    long  (*fncall)();
+    fnproto fncall;
     UBYTE stdio_typ;    /* Standard I/O channel (highest bit must be set, too) */
     UBYTE wparms;       /* Size of parameters in WORDs */
 } FND;
@@ -134,7 +157,7 @@ typedef struct
  */
 static const FND funcs[] =
 {
-     { (long(*)()) x0term, 0, 0 }, /* 0x00 */
+     { { .fncall0 = (fnproto0) x0term }, 0, 0 }, /* 0x00 */
 
     /*
      * console functions
@@ -143,17 +166,17 @@ static const FND funcs[] =
      * 0x80 is std in, 0x81 is stdout, 0x82 is stdaux, 0x83 stdprn
      */
 
-    { xconin,   0x80, 0 },   /* 0x01 */
-    { xconout,  0x81, 1 },   /* 0x02 */
-    { xauxin,   0x82, 0 },   /* 0x03 */
-    { xauxout,  0x82, 1 },   /* 0x04 */
-    { xprtout,  0x83, 1 },   /* 0x05 */
-    { xrawio,   0,    1 },   /* 0x06 */
-    { xrawcin,  0x80, 0 },   /* 0x07 */
-    { xnecin,   0x80, 0 },   /* 0x08 */
-    { (long(*)()) xconws, 0x81, 2 }, /* 0x09 */
-    { (long(*)()) xconrs, 0x80, 2 }, /* 0x0A */
-    { xconstat, 0x80, 0 },   /* 0x0B */
+    { { .fncall0 = xconin },   0x80, 0 },   /* 0x01 */
+    { { .fncall1 = xconout },  0x81, 1 },   /* 0x02 */
+    { { .fncall0 = xauxin },   0x82, 0 },   /* 0x03 */
+    { { .fncall1 = xauxout },  0x82, 1 },   /* 0x04 */
+    { { .fncall1 = xprtout },  0x83, 1 },   /* 0x05 */
+    { { .fncall1 = xrawio },   0, 1 },      /* 0x06 */
+    { { .fncall0 = xrawcin },  0x80, 0 },   /* 0x07 */
+    { { .fncall0 = xnecin },   0x80, 0 },   /* 0x08 */
+    { { .fncall2 = (fnproto2) xconws }, 0x81, 2 }, /* 0x09 */
+    { { .fncall2 = (fnproto2) xconrs }, 0x80, 2 }, /* 0x0A */
+    { { .fncall0 = xconstat }, 0x80, 0 },   /* 0x0B */
 
     /*
      * disk functions
@@ -163,12 +186,12 @@ static const FND funcs[] =
      * as usual.
      */
 
-    { ni,       0, 0 },
-    { ni,       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
 
-    { xsetdrv,  0, 1 },      /* 0x0E */
+    { { .fncall1 = xsetdrv },  0, 1 },      /* 0x0E */
 
-    { ni,       0, 0 },
+    { { ni },       0, 0 },
 
     /*
      * extended console functions
@@ -176,99 +199,99 @@ static const FND funcs[] =
      * Here the 0x80 flag indicates std file used, as above
      */
 
-    { xconostat, 0x81, 0 },  /* 0x10 */
-    { xprtostat, 0x83, 0 },  /* 0x11 */
-    { xauxistat, 0x82, 0 },  /* 0x12 */
-    { xauxostat, 0x82, 0 },  /* 0x13 */
+    { { .fncall0 = xconostat }, 0x81, 0 },  /* 0x10 */
+    { { .fncall0 = xprtostat }, 0x83, 0 },  /* 0x11 */
+    { { .fncall0 = xauxistat }, 0x82, 0 },  /* 0x12 */
+    { { .fncall0 = xauxostat }, 0x82, 0 },  /* 0x13 */
 
 #if CONF_WITH_ALT_RAM
-    { xmaddalt, 0, 4 },      /* 0x14 */
+    { { .fncall4 = (fnproto4) xmaddalt }, 0, 4 }, /* 0x14 */
 #else
-    { ni,       0, 0 },      /* 0x14 */
+    { { ni },       0, 0 },                 /* 0x14 */
 #endif
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
 
-    { xgetdrv,  0, 0 },      /* 0x19 */
-    { (long(*)()) xsetdta, 0, 2 }, /* 0x1A */
+    { { .fncall0 = xgetdrv },  0, 0 },           /* 0x19 */
+    { { .fncall2 = (fnproto2) xsetdta }, 0, 2 }, /* 0x1A */
 
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
 
     /* xgsps */
 
-    { ni,       0, 0 },      /* 0x20 */
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-
-    { xgetdate, 0, 0 },      /* 0x2A */
-    { (long(*)()) xsetdate, 0, 1 }, /* 0x2B */
-    { xgettime, 0, 0 },      /* 0x2C */
-    { (long(*)()) xsettime, 0, 1 }, /* 0x2D */
-
-    { ni,       0, 0 },
-
-    { (long(*)()) xgetdta, 0, 0 }, /* 0x2F */
-    { xgetver,  0, 0 },      /* 0x30 */
-    { (long(*)()) xtermres, 0, 3 }, /* 0x31 */
-
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-
-    { xgetfree, 0, 3 },      /* 0x36 */
-
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-
-    { xmkdir,   0, 2 },      /* 0x39 */
-    { xrmdir,   0, 2 },      /* 0x3A */
-    { xchdir,   0, 2 },      /* 0x3B */
-    { (long(*)()) xcreat, 0, 3 },  /* 0x3C */
-    { xopen,    0, 3 },      /* 0x3D */
-    { xclose,   0, 1 },      /* 0x3E - will handle its own redirection */
-    { xread,    0x82, 5 },   /* 0x3F */
-    { xwrite,   0x82, 5 },   /* 0x40 */
-    { xunlink,  0, 2 },      /* 0x41 */
-    { xlseek,   0x81, 4 },   /* 0x42 */
-    { (long(*)()) xchmod, 0, 4 },  /* 0x43 */
-    { (long(*)()) xmxalloc, 0, 3 }, /* 0x44 */
-    { xdup,     0, 1 },      /* 0x45 */
-    { xforce,   0, 2 },      /* 0x46 */
-    { xgetdir,  0, 3 },      /* 0x47 */
-    { (long(*)()) xmalloc,  0, 2 }, /* 0x48 */
-    { xmfree,   0, 2 },      /* 0x49 */
-    { xsetblk,  0, 5 },      /* 0x4A */
-    { (long(*)()) xexec, 0, 7 },   /* 0x4B */
-    { (long(*)()) xterm, 0, 1 },   /* 0x4C */
-
-    { ni,       0, 0 },
-
-    { xsfirst,  0, 3 },      /* 0x4E */
-    { xsnext,   0, 0 },      /* 0x4F */
-
-    { ni,       0, 0 },    /* 0x50 */
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-    { ni,       0, 0 },
-
-    { xrename,  0, 5 },    /* 0x56 */
-    { xgsdtof,  0, 4 }       /* 0x57 */
+    { { ni },       0, 0 },                 /* 0x20 */
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+
+    { { .fncall0 = xgetdate }, 0, 0 },            /* 0x2A */
+    { { .fncall1 = (fnproto1) xsetdate }, 0, 1 }, /* 0x2B */
+    { { .fncall0 = xgettime }, 0, 0 },            /* 0x2C */
+    { { .fncall1 = (fnproto1) xsettime }, 0, 1 }, /* 0x2D */
+
+    { { ni },       0, 0 },
+
+    { { .fncall0 = (fnproto0) xgetdta }, 0, 0 },  /* 0x2F */
+    { { .fncall0 = xgetver },  0, 0 },            /* 0x30 */
+    { { .fncall3 = (fnproto3) xtermres }, 0, 3 }, /* 0x31 */
+
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+
+    { { .fncall3 = (fnproto3) xgetfree }, 0, 3 }, /* 0x36 */
+
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+
+    { { .fncall2 = (fnproto2) xmkdir },   0, 2 },    /* 0x39 */
+    { { .fncall2 = (fnproto2) xrmdir },   0, 2 },    /* 0x3A */
+    { { .fncall2 = (fnproto2) xchdir },   0, 2 },    /* 0x3B */
+    { { .fncall3 = (fnproto3) xcreat },   0, 3 },    /* 0x3C */
+    { { .fncall3 = (fnproto3) xopen },    0, 3 },    /* 0x3D */
+    { { .fncall1 = xclose },   0, 1 }, /* 0x3E - will handle its own redirection */
+    { { .fncall5 = (fnproto5) xread },    0x82, 5 }, /* 0x3F */
+    { { .fncall5 = (fnproto5) xwrite },   0x82, 5 }, /* 0x40 */
+    { { .fncall2 = (fnproto2) xunlink },  0, 2 },    /* 0x41 */
+    { { .fncall4 = (fnproto4) xlseek },   0x81, 4 }, /* 0x42 */
+    { { .fncall4 = (fnproto4) xchmod },   0, 4 },    /* 0x43 */
+    { { .fncall3 = (fnproto3) xmxalloc }, 0, 3 },    /* 0x44 */
+    { { .fncall1 = xdup },     0, 1 },      /* 0x45 */
+    { { .fncall2 = xforce },   0, 2 },      /* 0x46 */
+    { { .fncall3 = (fnproto3) xgetdir },  0, 3 },    /* 0x47 */
+    { { .fncall2 = (fnproto2) xmalloc },  0, 2 },    /* 0x48 */
+    { { .fncall2 = (fnproto2) xmfree },   0, 2 },    /* 0x49 */
+    { { .fncall5 = (fnproto5) xsetblk },  0, 5 },    /* 0x4A */
+    { { .fncall7 = (fnproto7) xexec },    0, 7 },    /* 0x4B */
+    { { .fncall1 = (fnproto1) xterm },    0, 1 },    /* 0x4C */
+
+    { { ni },       0, 0 },
+
+    { { .fncall3 = (fnproto3) xsfirst },  0, 3 },    /* 0x4E */
+    { { .fncall0 = xsnext },   0, 0 },      /* 0x4F */
+
+    { { ni },       0, 0 },    /* 0x50 */
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+    { { ni },       0, 0 },
+
+    { { .fncall5 = (fnproto5) xrename },  0, 5 },    /* 0x56 */
+    { { .fncall4 = (fnproto4) xgsdtof },  0, 4 }     /* 0x57 */
 };
 #define MAX_FNCALL (ARRAY_SIZE(funcs) - 1)
 
@@ -621,31 +644,31 @@ restrt:
         switch(f->wparms)
         {
         case 0:
-            rc = (*f->fncall)();
+            rc = (*f->fncall.fncall0)();
             break;
 
         case 1:
-            rc = (*f->fncall)(pw[1]);
+            rc = (*f->fncall.fncall1)(pw[1]);
             break;
 
         case 2:
-            rc = (*f->fncall)(pw[1],pw[2]);
+            rc = (*f->fncall.fncall2)(pw[1],pw[2]);
             break;
 
         case 3:
-            rc = (*f->fncall)(pw[1],pw[2],pw[3]);
+            rc = (*f->fncall.fncall3)(pw[1],pw[2],pw[3]);
             break;
 
         case 4:
-            rc = (*f->fncall)(pw[1],pw[2],pw[3],pw[4]);
+            rc = (*f->fncall.fncall4)(pw[1],pw[2],pw[3],pw[4]);
             break;
 
         case 5:
-            rc = (*f->fncall)(pw[1],pw[2],pw[3],pw[4],pw[5]);
+            rc = (*f->fncall.fncall5)(pw[1],pw[2],pw[3],pw[4],pw[5]);
             break;
 
         case 7:
-            rc = (*f->fncall)(pw[1],pw[2],pw[3],pw[4],pw[5],pw[6],pw[7]);
+            rc = (*f->fncall.fncall7)(pw[1],pw[2],pw[3],pw[4],pw[5],pw[6],pw[7]);
             break;
 
         default:
-- 
2.8.2.windows.1

