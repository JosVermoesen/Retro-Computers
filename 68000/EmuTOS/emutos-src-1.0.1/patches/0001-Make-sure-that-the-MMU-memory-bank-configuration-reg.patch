From aa6df7b29b78e232723b63c76dbcd1fe96aa9bd8 Mon Sep 17 00:00:00 2001
From: Christian Zietz <czietz@gmx.net>
Date: Fri, 4 Aug 2017 07:26:11 +0100
Subject: [PATCH] Make sure that the MMU memory bank configuration register
 contains a valid value.

This fixes cold boot issues on some ST where RAM would not be available and EmuTOS
would crash at the first exception because the vector could not be read. This updated
patch also compiles on ColdFire.
---
 bios/startup.S | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/bios/startup.S b/bios/startup.S
index 5e9b1b4..d312f56 100644
--- a/bios/startup.S
+++ b/bios/startup.S
@@ -162,6 +162,36 @@ _main:
 amiga_startup_ret:
 #endif
 
+#if (!EMUTOS_LIVES_IN_RAM) && (CONF_WITH_ST_MMU)
+        // Some ST MMUs power up with an invalid memory bank configuration,
+        // inhibiting any RAM access. However, EmuTOS needs at least a
+        // little bit of RAM for the CPU to read the vectors of the
+        // exceptions that are raised below during hardware detection.
+        // At such an early stage we don't know whether we are even running
+        // on an ST. Also we can't use bus errors to detect the machine type.
+        // Thus, check the MMU configuration register for values that
+        // are invalid on an ST and only then write a new (valid) value
+        // into it. This should not interfere with non-ST machines.
+
+        // 0xc and above are an invalid memory bank 0 configuration on the ST.
+        // 0x5 is a valid value for the ST and the TT, the correct configuration
+        // will be found and applied in memory.S. On the Falcon this is a dummy
+        // register, so we can write to it as well without consequences.
+#ifdef __mcoldfire__
+        move.b  0xffff8001.w, d0
+        cmpi.b  #0xc, d0
+        blt.s   valid_st_mmu_config
+        move.b  #0x5, d0
+        move.b  d0, 0xffff8001.w
+#else
+        cmpi.b  #0xc, 0xffff8001.w
+        blt.s   valid_st_mmu_config
+        move.b  #0x5, 0xffff8001.w
+#endif
+
+valid_st_mmu_config:
+#endif
+
         // Initialize an early stack to a valid write address.
         // We use early exceptions for 2 reasons:
         // - detect CPU type and features with illegal instructions
-- 
2.8.2.windows.1

