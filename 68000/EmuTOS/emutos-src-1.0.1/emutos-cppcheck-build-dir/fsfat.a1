<?xml version="1.0"?>
<analyzerinfo checksum="4094699815">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;recnum&apos; can be reduced." verbose="The scope of the variable &apos;recnum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\fsfat.c" file="bdos\fsfat.c" line="177"/>
            <symbol>recnum</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\fsfat.c" file="bdos\fsfat.c" line="177"/>
            <symbol>offset</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\fsfat.c" file="bdos\fsfat.c" line="179"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;recnum&apos; can be reduced." verbose="The scope of the variable &apos;recnum&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\fsfat.c" file="bdos\fsfat.c" line="301"/>
            <symbol>recnum</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;offset&apos; can be reduced." verbose="The scope of the variable &apos;offset&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\fsfat.c" file="bdos\fsfat.c" line="301"/>
            <symbol>offset</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\fsfat.c" file="bdos\fsfat.c" line="303"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\fsfat.c" file="bdos\fsfat.c" line="339"/>
            <symbol>i</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="77" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="80" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="117" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="135" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="188" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fsfat.c:209:13" call-funcname="findfree" call-argnr="1" filename="bdos/fsfat.c" linenr="271" call-argexpr="cl" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path filename="bdos\fsfat.c" linenr="276" info="Assuming that condition 'if(cl)' is not redundant"/>
</function-call><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="312" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/>  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="bufl" size="2"/>
    <ArraySize array="errbuf" size="13"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="bdos/fs.h:412:7" my-argnr="2" my-argname="dm" filename="bdos/fsfat.c" linenr="26"/>
    <unsafe-usage my-id="bdos/fs.h:413:6" my-argnr="3" my-argname="dm" filename="bdos/fsfat.c" linenr="44"/>
    <unsafe-usage my-id="bdos/fs.h:414:6" my-argnr="2" my-argname="dm" filename="bdos/fsfat.c" linenr="114"/>
    <unsafe-usage my-id="bdos/fs.h:415:6" my-argnr="2" my-argname="of" filename="bdos/fsfat.c" linenr="163"/>
    <unsafe-usage my-id="bdos/fsfat.c:175:13" my-argnr="1" my-argname="dm" filename="bdos/fsfat.c" linenr="181"/>
    <unsafe-usage my-id="bdos/fs.h:416:5" my-argnr="1" my-argname="p" filename="bdos/fsfat.c" linenr="253"/>
    <unsafe-usage my-id="bdos/fsfat.c:299:13" my-argnr="1" my-argname="dm" filename="bdos/fsfat.c" linenr="305"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="bdos/fs.h:412:7" my-argnr="2" my-argname="dm" filename="bdos/fsfat.c" linenr="26"/>
  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="77" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="80" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="117" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="135" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="188" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="bdos/fsfat.c:209:13" call-funcname="findfree" call-argnr="1" filename="bdos/fsfat.c" linenr="271" call-argexpr="cl" call-argvaluetype="0" call-argvalue="0" warning="true">
  <path filename="bdos\fsfat.c" linenr="276" info="Assuming that condition 'if(cl)' is not redundant"/>
</function-call><function-call call-id="bdos/fs.h:405:7" call-funcname="getrec" call-argnr="3" filename="bdos/fsfat.c" linenr="312" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/>  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="bufl" size="2"/>
    <ArraySize array="errbuf" size="13"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="bdos/fs.h:412:7" my-argnr="2" my-argname="dm" filename="bdos/fsfat.c" linenr="26"/>
    <unsafe-usage my-id="bdos/fs.h:413:6" my-argnr="3" my-argname="dm" filename="bdos/fsfat.c" linenr="44"/>
    <unsafe-usage my-id="bdos/fs.h:414:6" my-argnr="2" my-argname="dm" filename="bdos/fsfat.c" linenr="114"/>
    <unsafe-usage my-id="bdos/fs.h:415:6" my-argnr="2" my-argname="of" filename="bdos/fsfat.c" linenr="163"/>
    <unsafe-usage my-id="bdos/fsfat.c:175:13" my-argnr="1" my-argname="dm" filename="bdos/fsfat.c" linenr="181"/>
    <unsafe-usage my-id="bdos/fs.h:416:5" my-argnr="1" my-argname="p" filename="bdos/fsfat.c" linenr="253"/>
    <unsafe-usage my-id="bdos/fsfat.c:299:13" my-argnr="1" my-argname="dm" filename="bdos/fsfat.c" linenr="305"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="bdos/fs.h:412:7" my-argnr="2" my-argname="dm" filename="bdos/fsfat.c" linenr="26"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="cl2rec" lineNumber="24"/>
    <functiondecl functionName="clfix" lineNumber="37"/>
    <functiondecl functionName="getrealcl" lineNumber="108"/>
    <functiondecl functionName="getclnum" lineNumber="161"/>
    <functiondecl functionName="findfree16" lineNumber="175"/>
    <functiondecl functionName="findfree" lineNumber="209"/>
    <functiondecl functionName="nextcl" lineNumber="248"/>
    <functiondecl functionName="countfree16" lineNumber="299"/>
    <functiondecl functionName="xgetfree" lineNumber="337"/>
    <functiondecl functionName="cl2rec" lineNumber="24"/>
    <functiondecl functionName="clfix" lineNumber="37"/>
    <functiondecl functionName="getrealcl" lineNumber="108"/>
    <functiondecl functionName="getclnum" lineNumber="161"/>
    <functiondecl functionName="findfree16" lineNumber="175"/>
    <functiondecl functionName="findfree" lineNumber="209"/>
    <functiondecl functionName="nextcl" lineNumber="248"/>
    <functiondecl functionName="countfree16" lineNumber="299"/>
    <functiondecl functionName="xgetfree" lineNumber="337"/>
    <functioncall functionName="asm"/>
    <functioncall functionName="buf"/>
    <functioncall functionName="char"/>
    <functioncall functionName="ckdrv"/>
    <functioncall functionName="cl"/>
    <functioncall functionName="cl2"/>
    <functioncall functionName="cl2rec"/>
    <functioncall functionName="clfix"/>
    <functioncall functionName="countfree16"/>
    <functioncall functionName="dest"/>
    <functioncall functionName="dm"/>
    <functioncall functionName="drv"/>
    <functioncall functionName="f"/>
    <functioncall functionName="findfree"/>
    <functioncall functionName="findfree16"/>
    <functioncall functionName="for"/>
    <functioncall functionName="free"/>
    <functioncall functionName="getrealcl"/>
    <functioncall functionName="getrec"/>
    <functioncall functionName="if"/>
    <functioncall functionName="int"/>
    <functioncall functionName="link"/>
    <functioncall functionName="long"/>
    <functioncall functionName="m_16"/>
    <functioncall functionName="m_clrlog"/>
    <functioncall functionName="m_clsiz"/>
    <functioncall functionName="m_fatofd"/>
    <functioncall functionName="m_numcl"/>
    <functioncall functionName="m_rblog"/>
    <functioncall functionName="m_rbm"/>
    <functioncall functionName="m_recsiz"/>
    <functioncall functionName="n"/>
    <functioncall functionName="o_curcl"/>
    <functioncall functionName="o_dmd"/>
    <functioncall functionName="o_dnode"/>
    <functioncall functionName="o_strtcl"/>
    <functioncall functionName="offset"/>
    <functioncall functionName="p_curdrv"/>
    <functioncall functionName="recnum"/>
    <functioncall functionName="return"/>
    <functioncall functionName="short"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="spans"/>
    <functioncall functionName="src"/>
  </FileInfo>
</analyzerinfo>
