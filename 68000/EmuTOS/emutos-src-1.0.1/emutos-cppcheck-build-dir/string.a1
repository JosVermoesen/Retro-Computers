<?xml version="1.0"?>
<analyzerinfo checksum="2096986514">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;n&apos; can be reduced." verbose="The scope of the variable &apos;n&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="71"/>
            <symbol>n</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s1&apos; can be reduced." verbose="The scope of the variable &apos;s1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="106"/>
            <symbol>s1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="106"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s1&apos; can be reduced." verbose="The scope of the variable &apos;s1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="124"/>
            <symbol>s1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="124"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s1&apos; can be reduced." verbose="The scope of the variable &apos;s1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="138"/>
            <symbol>s1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="138"/>
            <symbol>s2</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s1&apos; can be reduced." verbose="The scope of the variable &apos;s1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="154"/>
            <symbol>s1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\string.c" file="util\string.c" line="154"/>
            <symbol>s2</symbol>
        </error>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:38:25" my-argnr="2" my-argname="src" filename="C:/cygwin/home/czietz/emutos-code/include/string.h" linenr="42"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:25:8" my-argnr="1" my-argname="s" filename="util/string.c" linenr="89"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:27:7" my-argnr="2" my-argname="src" filename="util/string.c" linenr="99"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:38:25" my-argnr="2" my-argname="src" filename="C:/cygwin/home/czietz/emutos-code/include/string.h" linenr="42"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:25:8" my-argnr="1" my-argname="s" filename="util/string.c" linenr="89"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:27:7" my-argnr="2" my-argname="src" filename="util/string.c" linenr="99"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="strlcpy" lineNumber="67"/>
    <functiondecl functionName="strlen" lineNumber="85"/>
    <functiondecl functionName="strcat" lineNumber="93"/>
    <functiondecl functionName="strcmp" lineNumber="104"/>
    <functiondecl functionName="memcmp" lineNumber="120"/>
    <functiondecl functionName="strncmp" lineNumber="136"/>
    <functiondecl functionName="strncasecmp" lineNumber="152"/>
    <functiondecl functionName="toupper" lineNumber="168"/>
    <functiondecl functionName="sprintf_outc" lineNumber="186"/>
    <functiondecl functionName="sprintf" lineNumber="191"/>
    <functiondecl functionName="strlcpy" lineNumber="67"/>
    <functiondecl functionName="strlen" lineNumber="85"/>
    <functiondecl functionName="strcat" lineNumber="93"/>
    <functiondecl functionName="strcmp" lineNumber="104"/>
    <functiondecl functionName="memcmp" lineNumber="120"/>
    <functiondecl functionName="strncmp" lineNumber="136"/>
    <functiondecl functionName="strncasecmp" lineNumber="152"/>
    <functiondecl functionName="toupper" lineNumber="168"/>
    <functiondecl functionName="sprintf_outc" lineNumber="186"/>
    <functiondecl functionName="sprintf" lineNumber="191"/>
    <functioncall functionName="aa"/>
    <functioncall functionName="ap"/>
    <functioncall functionName="bb"/>
    <functioncall functionName="break"/>
    <functioncall functionName="c"/>
    <functioncall functionName="char"/>
    <functioncall functionName="count"/>
    <functioncall functionName="dest"/>
    <functioncall functionName="doprintf"/>
    <functioncall functionName="fmt"/>
    <functioncall functionName="for"/>
    <functioncall functionName="if"/>
    <functioncall functionName="n"/>
    <functioncall functionName="return"/>
    <functioncall functionName="s2"/>
    <functioncall functionName="sprintf_outc"/>
    <functioncall functionName="src"/>
    <functioncall functionName="str"/>
    <functioncall functionName="toupper"/>
    <functioncall functionName="va_end"/>
    <functioncall functionName="va_start"/>
    <functioncall functionName="while"/>
  </FileInfo>
</analyzerinfo>
