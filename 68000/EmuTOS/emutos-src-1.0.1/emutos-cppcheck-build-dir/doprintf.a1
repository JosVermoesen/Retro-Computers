<?xml version="1.0"?>
<analyzerinfo checksum="3135355224">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;quot&apos; can be reduced." verbose="The scope of the variable &apos;quot&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="47"/>
            <symbol>quot</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rem&apos; can be reduced." verbose="The scope of the variable &apos;rem&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="47"/>
            <symbol>rem</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;flags&apos; can be reduced." verbose="The scope of the variable &apos;flags&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="81"/>
            <symbol>flags</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;type&apos; can be reduced." verbose="The scope of the variable &apos;type&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="82"/>
            <symbol>type</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fill_len&apos; can be reduced." verbose="The scope of the variable &apos;fill_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="82"/>
            <symbol>fill_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;precision&apos; can be reduced." verbose="The scope of the variable &apos;precision&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="82"/>
            <symbol>precision</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;width&apos; can be reduced." verbose="The scope of the variable &apos;width&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="82"/>
            <symbol>width</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fill&apos; can be reduced." verbose="The scope of the variable &apos;fill&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="83"/>
            <symbol>fill</symbol>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &apos;buf&apos; is not assigned a value." verbose="Variable &apos;buf&apos; is not assigned a value." cwe="665">
            <location file0="util\doprintf.c" file="util\doprintf.c" line="45"/>
            <symbol>buf</symbol>
        </error>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="numconv" lineNumber="43"/>
    <functiondecl functionName="doprintf" lineNumber="77"/>
    <functioncall functionName="ap"/>
    <functioncall functionName="break"/>
    <functioncall functionName="buf"/>
    <functioncall functionName="bufstart"/>
    <functioncall functionName="c"/>
    <functioncall functionName="default"/>
    <functioncall functionName="fill"/>
    <functioncall functionName="fill_len"/>
    <functioncall functionName="flags"/>
    <functioncall functionName="for"/>
    <functioncall functionName="if"/>
    <functioncall functionName="int"/>
    <functioncall functionName="long"/>
    <functioncall functionName="longval"/>
    <functioncall functionName="n"/>
    <functioncall functionName="numconv"/>
    <functioncall functionName="outc"/>
    <functioncall functionName="p"/>
    <functioncall functionName="precision"/>
    <functioncall functionName="q"/>
    <functioncall functionName="quot"/>
    <functioncall functionName="radix"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="type"/>
    <functioncall functionName="va_arg"/>
    <functioncall functionName="while"/>
  </FileInfo>
</analyzerinfo>
