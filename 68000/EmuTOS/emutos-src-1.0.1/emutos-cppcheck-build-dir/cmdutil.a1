<?xml version="1.0"?>
<analyzerinfo checksum="2119977046">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;m&apos; can be reduced." verbose="The scope of the variable &apos;m&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="cli\cmdutil.c" file="cli\cmdutil.c" line="150"/>
            <symbol>m</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c1&apos; can be reduced." verbose="The scope of the variable &apos;c1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="cli\cmdutil.c" file="cli\cmdutil.c" line="297"/>
            <symbol>c1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c2&apos; can be reduced." verbose="The scope of the variable &apos;c2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="cli\cmdutil.c" file="cli\cmdutil.c" line="297"/>
            <symbol>c2</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="cli/cmd.h:239:6" call-funcname="message" call-argnr="1" filename="cli/cmdutil.c" linenr="48" my-id="cli/cmd.h:240:6" my-argnr="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="user_path" size="128"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="cli/cmd.h:237:6" my-argnr="1" my-argname="pp" filename="cli/cmdutil.c" linenr="238"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:38:25" my-argnr="2" my-argname="src" filename="C:/cygwin/home/czietz/emutos-code/include/string.h" linenr="42"/>
    <unsafe-usage my-id="cli/cmd.h:237:6" my-argnr="1" my-argname="pp" filename="cli/cmdutil.c" linenr="238"/>
  </FileInfo>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s1&apos; can be reduced." verbose="The scope of the variable &apos;s1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="cli\cmdutil.c" file="cli\cmdutil.c" line="395"/>
            <symbol>s1</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;s2&apos; can be reduced." verbose="The scope of the variable &apos;s2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="cli\cmdutil.c" file="cli\cmdutil.c" line="395"/>
            <symbol>s2</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="cli/cmd.h:239:6" call-funcname="message" call-argnr="1" filename="cli/cmdutil.c" linenr="48" my-id="cli/cmd.h:240:6" my-argnr="1"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="user_path" size="256"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="cli/cmd.h:237:6" my-argnr="1" my-argname="pp" filename="cli/cmdutil.c" linenr="238"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:25:8" my-argnr="1" my-argname="s" filename="cli/cmdutil.c" linenr="347"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:21:7" my-argnr="2" my-argname="src" filename="cli/cmdutil.c" linenr="357"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="cli/cmd.h:237:6" my-argnr="1" my-argname="pp" filename="cli/cmdutil.c" linenr="238"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:25:8" my-argnr="1" my-argname="s" filename="cli/cmdutil.c" linenr="347"/>
    <unsafe-usage my-id="C:/cygwin/home/czietz/emutos-code/include/string.h:21:7" my-argnr="2" my-argname="src" filename="cli/cmdutil.c" linenr="357"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="escape" lineNumber="26"/>
    <functiondecl functionName="message" lineNumber="35"/>
    <functiondecl functionName="messagenl" lineNumber="46"/>
    <functiondecl functionName="errmsg" lineNumber="55"/>
    <functiondecl functionName="strlower" lineNumber="117"/>
    <functiondecl functionName="strupper" lineNumber="131"/>
    <functiondecl functionName="getword" lineNumber="147"/>
    <functiondecl functionName="decode_date_time" lineNumber="169"/>
    <functiondecl functionName="get_path_component" lineNumber="230"/>
    <functiondecl functionName="has_wildcard" lineNumber="257"/>
    <functiondecl functionName="program_extension" lineNumber="271"/>
    <functiondecl functionName="strequal" lineNumber="294"/>
    <functiondecl functionName="getjar" lineNumber="315"/>
    <functiondecl functionName="getcookie" lineNumber="323"/>
    <functiondecl functionName="escape" lineNumber="26"/>
    <functiondecl functionName="message" lineNumber="35"/>
    <functiondecl functionName="messagenl" lineNumber="46"/>
    <functiondecl functionName="errmsg" lineNumber="55"/>
    <functiondecl functionName="strlower" lineNumber="117"/>
    <functiondecl functionName="strupper" lineNumber="131"/>
    <functiondecl functionName="getword" lineNumber="147"/>
    <functiondecl functionName="decode_date_time" lineNumber="169"/>
    <functiondecl functionName="get_path_component" lineNumber="230"/>
    <functiondecl functionName="has_wildcard" lineNumber="257"/>
    <functiondecl functionName="program_extension" lineNumber="271"/>
    <functiondecl functionName="strequal" lineNumber="294"/>
    <functiondecl functionName="getjar" lineNumber="315"/>
    <functiondecl functionName="getcookie" lineNumber="323"/>
    <functiondecl functionName="strlen" lineNumber="343"/>
    <functiondecl functionName="strcpy" lineNumber="353"/>
    <functiondecl functionName="memcpy" lineNumber="364"/>
    <functiondecl functionName="memset" lineNumber="375"/>
    <functiondecl functionName="toupper" lineNumber="385"/>
    <functiondecl functionName="strncasecmp" lineNumber="393"/>
    <functiondecl functionName="sprintf_outc" lineNumber="412"/>
    <functiondecl functionName="sprintf" lineNumber="417"/>
    <functioncall functionName="ampm"/>
    <functioncall functionName="ap"/>
    <functioncall functionName="break"/>
    <functioncall functionName="buf"/>
    <functioncall functionName="c"/>
    <functioncall functionName="char"/>
    <functioncall functionName="cookie"/>
    <functioncall functionName="d_fname"/>
    <functioncall functionName="date_sep"/>
    <functioncall functionName="day"/>
    <functioncall functionName="default"/>
    <functioncall functionName="dest"/>
    <functioncall functionName="doprintf"/>
    <functioncall functionName="fmt"/>
    <functioncall functionName="for"/>
    <functioncall functionName="getjar"/>
    <functioncall functionName="hour"/>
    <functioncall functionName="idt_value"/>
    <functioncall functionName="if"/>
    <functioncall functionName="jar"/>
    <functioncall functionName="jmp_bios"/>
    <functioncall functionName="jmp_xbios"/>
    <functioncall functionName="long"/>
    <functioncall functionName="m"/>
    <functioncall functionName="message"/>
    <functioncall functionName="messagenl"/>
    <functioncall functionName="minute"/>
    <functioncall functionName="month"/>
    <functioncall functionName="msg"/>
    <functioncall functionName="n"/>
    <functioncall functionName="name"/>
    <functioncall functionName="p"/>
    <functioncall functionName="pvalue"/>
    <functioncall functionName="rc"/>
    <functioncall functionName="return"/>
    <functioncall functionName="s"/>
    <functioncall functionName="s1"/>
    <functioncall functionName="s2"/>
    <functioncall functionName="second"/>
    <functioncall functionName="short"/>
    <functioncall functionName="sprintf"/>
    <functioncall functionName="sprintf_outc"/>
    <functioncall functionName="src"/>
    <functioncall functionName="str"/>
    <functioncall functionName="strequal"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="toupper"/>
    <functioncall functionName="va_end"/>
    <functioncall functionName="va_start"/>
    <functioncall functionName="value"/>
    <functioncall functionName="while"/>
    <functioncall functionName="year"/>
  </FileInfo>
</analyzerinfo>
