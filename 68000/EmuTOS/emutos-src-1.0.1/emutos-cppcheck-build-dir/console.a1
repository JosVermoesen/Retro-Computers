<?xml version="1.0"?>
<analyzerinfo checksum="1283767252">
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bufptr&apos; can be reduced." verbose="The scope of the variable &apos;bufptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="190"/>
            <symbol>bufptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="191"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="192"/>
            <symbol>c</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bufptr&apos; can be reduced." verbose="The scope of the variable &apos;bufptr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="279"/>
            <symbol>bufptr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temp&apos; can be reduced." verbose="The scope of the variable &apos;temp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="342"/>
            <symbol>temp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="427"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="481"/>
            <symbol>ch</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced." verbose="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="bdos\console.c" file="bdos\console.c" line="528"/>
            <symbol>ch</symbol>
        </error>
  <FileInfo check="ctu">
<function-call call-id="bdos/console.c:70:13" call-funcname="prt_line" call-argnr="2" filename="bdos/console.c" linenr="445" my-id="bdos/console.h:56:6" my-argnr="1"/>
<function-call call-id="bdos/console.c:72:12" call-funcname="backsp" call-argnr="2" filename="bdos/console.c" linenr="542" my-id="bdos/console.h:58:5" my-argnr="3"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="bufl" size="2"/>
    <ArraySize array="errbuf" size="13"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="bdos/console.c:64:13" my-argnr="1" my-argname="bufptr" filename="bdos/console.c" linenr="237"/>
    <unsafe-usage my-id="bdos/console.c:70:13" my-argnr="2" my-argname="p" filename="bdos/console.c" linenr="454"/>
    <unsafe-usage my-id="bdos/console.h:57:6" my-argnr="1" my-argname="p" filename="bdos/console.c" linenr="520"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="bdos/console.c:70:13" my-argnr="2" my-argname="p" filename="bdos/console.c" linenr="454"/>
  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="bdos/console.c:70:13" call-funcname="prt_line" call-argnr="2" filename="bdos/console.c" linenr="445" my-id="bdos/console.h:56:6" my-argnr="1"/>
<function-call call-id="bdos/console.c:72:12" call-funcname="backsp" call-argnr="2" filename="bdos/console.c" linenr="542" my-id="bdos/console.h:58:5" my-argnr="3"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="bufl" size="2"/>
    <ArraySize array="errbuf" size="13"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="bdos/console.c:64:13" my-argnr="1" my-argname="bufptr" filename="bdos/console.c" linenr="237"/>
    <unsafe-usage my-id="bdos/console.c:70:13" my-argnr="2" my-argname="p" filename="bdos/console.c" linenr="454"/>
    <unsafe-usage my-id="bdos/console.h:57:6" my-argnr="1" my-argname="p" filename="bdos/console.c" linenr="520"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="bdos/console.c:70:13" my-argnr="2" my-argname="p" filename="bdos/console.c" linenr="454"/>
  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="bdos/console.c:70:13" call-funcname="prt_line" call-argnr="2" filename="bdos/console.c" linenr="445" my-id="bdos/console.h:56:6" my-argnr="1"/>
<function-call call-id="bdos/console.c:72:12" call-funcname="backsp" call-argnr="2" filename="bdos/console.c" linenr="542" my-id="bdos/console.h:58:5" my-argnr="3"/>
  </FileInfo>
  <FileInfo check="Bounds checking">
    <ArraySize array="bufl" size="2"/>
    <ArraySize array="errbuf" size="13"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="bdos/console.c:64:13" my-argnr="1" my-argname="bufptr" filename="bdos/console.c" linenr="237"/>
    <unsafe-usage my-id="bdos/console.c:70:13" my-argnr="2" my-argname="p" filename="bdos/console.c" linenr="454"/>
    <unsafe-usage my-id="bdos/console.h:57:6" my-argnr="1" my-argname="p" filename="bdos/console.c" linenr="520"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="bdos/console.c:70:13" my-argnr="2" my-argname="p" filename="bdos/console.c" linenr="454"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="stdhdl_init" lineNumber="97"/>
    <functiondecl functionName="get_default_handle" lineNumber="114"/>
    <functiondecl functionName="constat" lineNumber="125"/>
    <functiondecl functionName="xconstat" lineNumber="141"/>
    <functiondecl functionName="xconostat" lineNumber="150"/>
    <functiondecl functionName="xprtostat" lineNumber="159"/>
    <functiondecl functionName="xauxistat" lineNumber="168"/>
    <functiondecl functionName="xauxostat" lineNumber="177"/>
    <functiondecl functionName="conbrk" lineNumber="188"/>
    <functiondecl functionName="buflush" lineNumber="235"/>
    <functiondecl functionName="conout" lineNumber="246"/>
    <functiondecl functionName="xconout" lineNumber="264"/>
    <functiondecl functionName="tabout" lineNumber="277"/>
    <functiondecl functionName="cookdout" lineNumber="300"/>
    <functiondecl functionName="xauxout" lineNumber="319"/>
    <functiondecl functionName="xprtout" lineNumber="328"/>
    <functiondecl functionName="getch" lineNumber="339"/>
    <functiondecl functionName="xrawcin" lineNumber="359"/>
    <functiondecl functionName="conin" lineNumber="368"/>
    <functiondecl functionName="xconin" lineNumber="380"/>
    <functiondecl functionName="xnecin" lineNumber="398"/>
    <functiondecl functionName="xauxin" lineNumber="416"/>
    <functiondecl functionName="xrawio" lineNumber="425"/>
    <functiondecl functionName="xconws" lineNumber="443"/>
    <functiondecl functionName="prt_line" lineNumber="452"/>
    <functiondecl functionName="newline" lineNumber="464"/>
    <functiondecl functionName="backsp" lineNumber="478"/>
    <functiondecl functionName="xconrs" lineNumber="518"/>
    <functiondecl functionName="cgets" lineNumber="525"/>
    <functiondecl functionName="stdhdl_init" lineNumber="97"/>
    <functiondecl functionName="get_default_handle" lineNumber="114"/>
    <functiondecl functionName="constat" lineNumber="125"/>
    <functiondecl functionName="xconstat" lineNumber="141"/>
    <functiondecl functionName="xconostat" lineNumber="150"/>
    <functiondecl functionName="xprtostat" lineNumber="159"/>
    <functiondecl functionName="xauxistat" lineNumber="168"/>
    <functiondecl functionName="xauxostat" lineNumber="177"/>
    <functiondecl functionName="conbrk" lineNumber="188"/>
    <functiondecl functionName="buflush" lineNumber="235"/>
    <functiondecl functionName="conout" lineNumber="246"/>
    <functiondecl functionName="xconout" lineNumber="264"/>
    <functiondecl functionName="tabout" lineNumber="277"/>
    <functiondecl functionName="cookdout" lineNumber="300"/>
    <functiondecl functionName="xauxout" lineNumber="319"/>
    <functiondecl functionName="xprtout" lineNumber="328"/>
    <functiondecl functionName="getch" lineNumber="339"/>
    <functiondecl functionName="xrawcin" lineNumber="359"/>
    <functiondecl functionName="conin" lineNumber="368"/>
    <functiondecl functionName="xconin" lineNumber="380"/>
    <functiondecl functionName="xnecin" lineNumber="398"/>
    <functiondecl functionName="xauxin" lineNumber="416"/>
    <functiondecl functionName="xrawio" lineNumber="425"/>
    <functiondecl functionName="xconws" lineNumber="443"/>
    <functiondecl functionName="prt_line" lineNumber="452"/>
    <functiondecl functionName="newline" lineNumber="464"/>
    <functiondecl functionName="backsp" lineNumber="478"/>
    <functiondecl functionName="xconrs" lineNumber="518"/>
    <functiondecl functionName="cgets" lineNumber="525"/>
    <functiondecl functionName="stdhdl_init" lineNumber="97"/>
    <functiondecl functionName="get_default_handle" lineNumber="114"/>
    <functiondecl functionName="constat" lineNumber="125"/>
    <functiondecl functionName="xconstat" lineNumber="141"/>
    <functiondecl functionName="xconostat" lineNumber="150"/>
    <functiondecl functionName="xprtostat" lineNumber="159"/>
    <functiondecl functionName="xauxistat" lineNumber="168"/>
    <functiondecl functionName="xauxostat" lineNumber="177"/>
    <functiondecl functionName="conbrk" lineNumber="188"/>
    <functiondecl functionName="buflush" lineNumber="235"/>
    <functiondecl functionName="conout" lineNumber="246"/>
    <functiondecl functionName="xconout" lineNumber="264"/>
    <functiondecl functionName="tabout" lineNumber="277"/>
    <functiondecl functionName="cookdout" lineNumber="300"/>
    <functiondecl functionName="xauxout" lineNumber="319"/>
    <functiondecl functionName="xprtout" lineNumber="328"/>
    <functiondecl functionName="getch" lineNumber="339"/>
    <functiondecl functionName="xrawcin" lineNumber="359"/>
    <functiondecl functionName="conin" lineNumber="368"/>
    <functiondecl functionName="xconin" lineNumber="380"/>
    <functiondecl functionName="xnecin" lineNumber="398"/>
    <functiondecl functionName="xauxin" lineNumber="416"/>
    <functiondecl functionName="xrawio" lineNumber="425"/>
    <functiondecl functionName="xconws" lineNumber="443"/>
    <functiondecl functionName="prt_line" lineNumber="452"/>
    <functiondecl functionName="newline" lineNumber="464"/>
    <functiondecl functionName="backsp" lineNumber="478"/>
    <functiondecl functionName="xconrs" lineNumber="518"/>
    <functiondecl functionName="cgets" lineNumber="525"/>
    <functioncall functionName="add"/>
    <functioncall functionName="asm"/>
    <functioncall functionName="backsp"/>
    <functioncall functionName="bios_l_w"/>
    <functioncall functionName="bios_l_ww"/>
    <functioncall functionName="bios_w_w"/>
    <functioncall functionName="break"/>
    <functioncall functionName="buf"/>
    <functioncall functionName="buffer"/>
    <functioncall functionName="buflush"/>
    <functioncall functionName="bufptr"/>
    <functioncall functionName="cbuf"/>
    <functioncall functionName="cgets"/>
    <functioncall functionName="ch"/>
    <functioncall functionName="char"/>
    <functioncall functionName="conbrk"/>
    <functioncall functionName="conin"/>
    <functioncall functionName="conout"/>
    <functioncall functionName="constat"/>
    <functioncall functionName="cookdout"/>
    <functioncall functionName="default"/>
    <functioncall functionName="for"/>
    <functioncall functionName="getch"/>
    <functioncall functionName="glbcolumn"/>
    <functioncall functionName="h"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="newline"/>
    <functioncall functionName="p"/>
    <functioncall functionName="parm"/>
    <functioncall functionName="prt_line"/>
    <functioncall functionName="remove"/>
    <functioncall functionName="retlen"/>
    <functioncall functionName="return"/>
    <functioncall functionName="short"/>
    <functioncall functionName="startcol"/>
    <functioncall functionName="stcol"/>
    <functioncall functionName="stdh"/>
    <functioncall functionName="stop"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="tabout"/>
    <functioncall functionName="while"/>
    <functioncall functionName="xterm"/>
  </FileInfo>
</analyzerinfo>
