<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.87"/>
    <errors>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;proutine&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;proutine&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemaplib.c" line="181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemasync.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mesag&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mesag&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemctrl.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;f&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;f&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemdisp.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;f&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;f&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemdisp.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemevlib.c" line="129"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemflag.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmalt.c" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hicon&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hicon&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmalt.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;image&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;image&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmalt.c" line="274"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmlib.c" line="114"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tobj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tobj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmlib.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmlib.c" line="203"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tstate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tstate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmlib.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rets&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rets&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmlib.c" line="205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;which&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;which&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfmlib.c" line="281"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfslib.c" line="328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfslib.c" line="328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;neg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;neg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfslib.c" line="328"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfslib.c" line="490"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;touchob&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;touchob&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfslib.c" line="512"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfslib.c" line="512"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dclkret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dclkret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemfslib.c" line="519"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemgraf.c" line="185"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;diff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;diff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemgraf.c" line="612"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemgraf.c" line="703"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemgrlib.c" line="331"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;handle&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;handle&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\geminit.c" line="231"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err_ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err_ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\geminit.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\geminit.c" line="258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\geminit.c" line="316"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;q&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;q&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="aes\geminput.c" line="501" info=""/>
            <location file="aes\geminput.c" line="502" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bclicks&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bclicks&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\geminput.c" line="524"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;wh&amp;#039; is not assigned a value." verbose="Variable &amp;#039;wh&amp;#039; is not assigned a value." sinceDate="02.04.2019">
            <location file="aes\geminput.c" line="384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_tree&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_tree&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemmnlib.c" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mnu_flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mnu_flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemmnlib.c" line="294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last_item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last_item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemmnlib.c" line="295"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ev_which&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ev_which&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemmnlib.c" line="297"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;theval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;theval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemmnlib.c" line="300"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemmnlib.c" line="461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;openda&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;openda&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemmnlib.c" line="536"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;test1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;test1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemobed.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;test2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;test2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemobed.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pos&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pos&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemobed.c" line="298"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dist&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dist&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemobed.c" line="300"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pobjptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pobjptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemobjop.c" line="151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="198"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="200"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="200"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmpth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmpth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="200"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nobj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nobj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="450"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;parent&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;parent&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lastkid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lastkid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="553"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="580"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prevptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prevptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="582"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ii&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ii&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="633"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib.ib_yicon&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib.ib_yicon&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="330"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ib.ib_ytext&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ib.ib_ytext&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="aes\gemoblib.c" line="332"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gempd.c" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemqueue.c" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obtype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obtype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemrslib.c" line="232"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ted&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ted&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemrslib.c" line="264"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;last&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;last&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemshlib.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemshlib.c" line="540"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mouse&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mouse&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemsuper.c" line="84"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lastkid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lastkid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="163"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="354"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;space&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;space&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tempw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tempw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="451"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="709"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ni&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ni&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="709"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;done&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;done&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="710"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;clrold&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;clrold&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwmlib.c" line="767"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwrect.c" line="102"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;have_piece&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;have_piece&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="aes\gemwrect.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;f&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;f&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\bdosmain.c" line="378"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bufptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bufptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="190"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bufptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bufptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="279"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="342"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="427"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="481"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\console.c" line="528"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;b-&amp;gt;b_bufdrv&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;b-&amp;gt;b_bufdrv&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bdos\fsbuf.c" line="88" info=""/>
            <location file="bdos\fsbuf.c" line="98" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;b-&amp;gt;b_bufdrv&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;b-&amp;gt;b_bufdrv&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bdos\fsbuf.c" line="159" info=""/>
            <location file="bdos\fsbuf.c" line="169" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bcbptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bcbptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsbuf.c" line="33"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" sinceDate="02.04.2019">
            <location file="bdos\fsdir.c" line="1944" info="First condition"/>
            <location file="bdos\fsdir.c" line="1950" info="Second condition"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;f!=(struct FCB*)NULL&amp;#039; is redundant or there is possible null pointer dereference: f." verbose="Either the condition &amp;#039;f!=(struct FCB*)NULL&amp;#039; is redundant or there is possible null pointer dereference: f." sinceDate="02.04.2019">
            <location file="bdos\fsdir.c" line="324" info="Assuming that condition &amp;#039;f!=(struct FCB*)NULL&amp;#039; is not redundant"/>
            <location file="bdos\fsdir.c" line="322" info="Null pointer dereference"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bufend&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bufend&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsdir.c" line="535"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hnew&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hnew&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsdir.c" line="888"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsdir.c" line="1287"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsdir.c" line="1742"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dmd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dmd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsdir.c" line="2029"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsdrive.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;recnum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;recnum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsfat.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsfat.c" line="177"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsfat.c" line="179"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;recnum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;recnum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsfat.c" line="301"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offset&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offset&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsfat.c" line="301"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsfat.c" line="303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsfat.c" line="339"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fshand.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;curnum&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;curnum&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsio.c" line="100"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsopnclo.c" line="451"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\fsopnclo.c" line="579"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bdos\iumem.c" line="57" info=""/>
            <location file="bdos\iumem.c" line="90" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;maxval&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;maxval&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\iumem.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\kpgmld.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\kpgmld.c" line="287"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\osmem.c" line="294"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;w+1&amp;#039; to function getosm is always 33" verbose="Argument &amp;#039;w+1&amp;#039; to function getosm is always 33" sinceDate="02.04.2019">
            <location file="bdos\osmem.c" line="306" info="Assignment &amp;#039;w=32&amp;#039;, assigned value is 32"/>
            <location file="bdos\osmem.c" line="322" info="Argument &amp;#039;w+1&amp;#039; to function getosm is always 33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;r&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;r&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\osmem.tr.c" line="219"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;w+1&amp;#039; to function getosm is always 33" verbose="Argument &amp;#039;w+1&amp;#039; to function getosm is always 33" sinceDate="02.04.2019">
            <location file="bdos\osmem.tr.c" line="229" info="Assignment &amp;#039;w=32&amp;#039;, assigned value is 32"/>
            <location file="bdos\osmem.tr.c" line="242" info="Argument &amp;#039;w+1&amp;#039; to function getosm is always 33"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tpasize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tpasize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\proc.c" line="464"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;md&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;md&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bdos\proc.c" line="454"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\acsi.c" line="108"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;joy0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;joy0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\amiga.c" line="785"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\amiga.c" line="1372"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\amiga.c" line="1637"/>
        </error>
        <error id="shiftNegative" severity="error" msg="Shifting by a negative value is undefined behaviour" verbose="Shifting by a negative value is undefined behaviour" sinceDate="02.04.2019">
            <location file="bios\amiga.c" line="1577"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;((volatile unsigned char*)14417920)[reg*4+3]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;((volatile unsigned char*)14417920)[reg*4+3]&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\amiga.c" line="850"/>
        </error>
        <error id="negativeIndex" severity="warning" msg="Either the condition &amp;#039;sector&amp;lt;0&amp;#039; is redundant, otherwise there is negative array index -1." verbose="Either the condition &amp;#039;sector&amp;lt;0&amp;#039; is redundant, otherwise there is negative array index -1." sinceDate="02.04.2019">
            <location file="bios\amiga.c" line="1550" info="Assuming that condition &amp;#039;sector&amp;lt;0&amp;#039; is not redundant"/>
            <location file="bios\amiga.c" line="1561" info="Negative array index"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;*p&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;*p&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\bios.c" line="683" info=""/>
            <location file="bios\bios.c" line="685" info=""/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;show_initinfo&amp;#039; is always true" verbose="Condition &amp;#039;show_initinfo&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\bios.c" line="647" info="Assignment &amp;#039;show_initinfo=1&amp;#039;, assigned value is 1"/>
            <location file="bios\bios.c" line="652" info="Condition &amp;#039;show_initinfo&amp;#039; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;show_initinfo&amp;#039; is always false" verbose="Condition &amp;#039;show_initinfo&amp;#039; is always false" sinceDate="02.04.2019">
            <location file="bios\bios.c" line="645" info="Assignment &amp;#039;show_initinfo=0&amp;#039;, assigned value is 0"/>
            <location file="bios\bios.c" line="652" info="Condition &amp;#039;show_initinfo&amp;#039; is always false"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;*p&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;*p&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\bios.tr.c" line="639" info=""/>
            <location file="bios\bios.tr.c" line="641" info=""/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;show_initinfo&amp;#039; is always true" verbose="Condition &amp;#039;show_initinfo&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\bios.tr.c" line="603" info="Assignment &amp;#039;show_initinfo=1&amp;#039;, assigned value is 1"/>
            <location file="bios\bios.tr.c" line="608" info="Condition &amp;#039;show_initinfo&amp;#039; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;show_initinfo&amp;#039; is always false" verbose="Condition &amp;#039;show_initinfo&amp;#039; is always false" sinceDate="02.04.2019">
            <location file="bios\bios.tr.c" line="601" info="Assignment &amp;#039;show_initinfo=0&amp;#039;, assigned value is 0"/>
            <location file="bios\bios.tr.c" line="608" info="Condition &amp;#039;show_initinfo&amp;#039; is always false"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;bdev-&amp;gt;bpb.recsiz&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;bdev-&amp;gt;bpb.recsiz&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\blkdev.c" line="580" info=""/>
            <location file="bios\blkdev.c" line="624" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;send&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;send&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="146"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;send&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;send&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="632"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="632"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;regs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;regs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="633"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill0&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill0&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="520"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill2&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill2&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="521"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill4&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill4&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="522"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill6&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill6&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="523"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill8&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill8&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="524"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::filla&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::filla&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="525"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fillc&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fillc&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="526"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::daywk&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::daywk&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="526"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fille&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fille&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="527"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill10&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill10&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="528"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill12&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill12&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="529"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill14&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill14&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="530"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill16&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill16&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="531"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill18&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill18&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="532"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill1a&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill1a&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="533"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill1c&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill1c&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="534"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::fill1e&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::fill1e&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="535"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank0::misc&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank0::misc&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="535"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill0&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill0&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="539"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill2&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill2&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="540"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::adjust&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::adjust&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="540"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill4&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill4&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="541"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill6&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill6&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="542"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill8&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill8&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="543"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill14&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill14&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="544"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill16&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill16&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="545"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill18&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill18&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="546"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill1a&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill1a&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="547"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill1c&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill1c&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="548"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::fill1e&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::fill1e&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="549"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;megartc_bank1::misc&amp;#039; is never used." verbose="struct member &amp;#039;megartc_bank1::misc&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="549"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="598"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.alarm_min_l&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.alarm_min_l&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="599"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.alarm_min_h&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.alarm_min_h&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="600"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.clkout&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.clkout&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="606"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.test&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.test&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="607"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="608"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="610"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank0.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank0.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="636"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="670"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.sel_24&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.sel_24&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="671"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.leap_yr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.leap_yr&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="673"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank1.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="674"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank0.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank0.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="679"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank0.mode&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile union megartc_clk*)(4294966304L)).bank0.mode&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\clock.c" line="687"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." sinceDate="02.04.2019">
            <location file="bios\coldfire.c" line="91"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." sinceDate="02.04.2019">
            <location file="bios\coldfire.c" line="194"/>
        </error>
        <error id="nullPointerArithmetic" severity="error" msg="Pointer addition with NULL pointer." verbose="Pointer addition with NULL pointer." sinceDate="02.04.2019">
            <location file="bios\coldfire.c" line="367"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ascii&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ascii&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\coldfire.c" line="212"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\conout.c" line="49"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition" sinceDate="02.04.2019">
            <location file="bios\disk.c" line="456" info="First condition"/>
            <location file="bios\disk.c" line="467" info="Second condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="75"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="709"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;PARTENTRY::fill0&amp;#039; is never used." verbose="struct member &amp;#039;PARTENTRY::fill0&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="40"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;PARTENTRY::fill5&amp;#039; is never used." verbose="struct member &amp;#039;PARTENTRY::fill5&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;productname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;productname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="76"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="708"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\disk.c" line="201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iobufptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iobufptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\floppy.c" line="1072"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\floppy.c" line="790"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;bootsec&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;bootsec&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\floppy.c" line="445"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;interface-&amp;gt;sector_number&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;interface-&amp;gt;sector_number&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="574" info=""/>
            <location file="bios\ide.c" line="575" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;interface-&amp;gt;sector_count&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;interface-&amp;gt;sector_count&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="574" info=""/>
            <location file="bios\ide.c" line="575" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;interface-&amp;gt;sector_number&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;interface-&amp;gt;sector_number&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="575" info=""/>
            <location file="bios\ide.c" line="576" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;interface-&amp;gt;sector_count&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;interface-&amp;gt;sector_count&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="575" info=""/>
            <location file="bios\ide.c" line="576" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;status1&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;status1&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="829" info=""/>
            <location file="bios\ide.c" line="830" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;status2&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;status2&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="855" info=""/>
            <location file="bios\ide.c" line="856" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;status2&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;status2&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="989" info=""/>
            <location file="bios\ide.c" line="990" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="510"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="797"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;status1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;status1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="931"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="999"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="1003"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="1135"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::filler00&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::filler00&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="276"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::filler2f&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::filler2f&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="279"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::capabilities&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::capabilities&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="280"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::filler32&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::filler32&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="281"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::filler3e&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::filler3e&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="283"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::cmds_supported&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::cmds_supported&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="284"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::filler55&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::filler55&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="285"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::maxsec_lba48&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::maxsec_lba48&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="286"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Anonymous1::filler68&amp;#039; is never used." verbose="struct member &amp;#039;Anonymous1::filler68&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="287"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;interface-&amp;gt;head&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;interface-&amp;gt;head&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\ide.c" line="572" info=""/>
            <location file="bios\ide.c" line="587" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;version&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;version&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\ikbd.c" line="889"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile struct ACIA*)(4294966272L)).data&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile struct ACIA*)(4294966272L)).data&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\ikbd.c" line="818"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile struct ACIA*)(4294966272L)).ctrl&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile struct ACIA*)(4294966272L)).ctrl&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\ikbd.c" line="929"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile struct ACIA*)(4294966272L)).ctrl&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile struct ACIA*)(4294966272L)).ctrl&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\ikbd.c" line="931"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!bcostat4()&amp;#039; is always false" verbose="Condition &amp;#039;!bcostat4()&amp;#039; is always false" sinceDate="02.04.2019">
            <location file="bios\ikbd.c" line="816"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;version==0&amp;#039; is always true" verbose="Condition &amp;#039;version==0&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\ikbd.c" line="896" info="Assignment &amp;#039;version=ikbd_readb(300)&amp;#039;, assigned value is 0"/>
            <location file="bios\ikbd.c" line="897" info="Condition &amp;#039;version==0&amp;#039; is always true"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;color&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;color&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\initinfo.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;olddev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;olddev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\initinfo.c" line="265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;color&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;color&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\initinfo.tr.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;olddev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;olddev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\initinfo.tr.c" line="239"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*ste_reg==90&amp;#039; is always true" verbose="Condition &amp;#039;*ste_reg==90&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\machine.c" line="111" info="*ste_reg is assigned value 90"/>
            <location file="bios\machine.c" line="113" info="Condition &amp;#039;*ste_reg==90&amp;#039; is always true"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*ste_reg==0&amp;#039; is always true" verbose="Condition &amp;#039;*ste_reg==0&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\machine.c" line="115" info="*ste_reg is assigned value 0"/>
            <location file="bios\machine.c" line="117" info="Condition &amp;#039;*ste_reg==0&amp;#039; is always true"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;monster_reg&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;monster_reg&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\memory2.c" line="144" info=""/>
            <location file="bios\memory2.c" line="149" info=""/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;ttram_size&amp;#039; is always true" verbose="Condition &amp;#039;ttram_size&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\memory2.c" line="102" info="Assignment &amp;#039;ttram_size=detect_ttram_size()&amp;#039;, assigned value is 50331648"/>
            <location file="bios\memory2.c" line="104" info="Condition &amp;#039;ttram_size&amp;#039; is always true"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile struct ACIA*)(4294966276L)).data&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile struct ACIA*)(4294966276L)).data&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\midi.c" line="93"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile struct ACIA*)(4294966276L)).ctrl&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile struct ACIA*)(4294966276L)).ctrl&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\midi.c" line="124"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;(*(volatile struct ACIA*)(4294966276L)).ctrl&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;(*(volatile struct ACIA*)(4294966276L)).ctrl&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\midi.c" line="126"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!bcostat3()&amp;#039; is always true" verbose="Condition &amp;#039;!bcostat3()&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\midi.c" line="89"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*novamembase!=0&amp;#039; is always false" verbose="Condition &amp;#039;*novamembase!=0&amp;#039; is always false" sinceDate="02.04.2019">
            <location file="bios\nova.c" line="360" info="*novamembase is assigned value 0"/>
            <location file="bios\nova.c" line="361" info="Condition &amp;#039;*novamembase!=0&amp;#039; is always false"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*novamembase!=85&amp;#039; is always false" verbose="Condition &amp;#039;*novamembase!=85&amp;#039; is always false" sinceDate="02.04.2019">
            <location file="bios\nova.c" line="364" info="*novamembase is assigned value 85"/>
            <location file="bios\nova.c" line="365" info="Condition &amp;#039;*novamembase!=85&amp;#039; is always false"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;*addr_reg&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;*addr_reg&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\nvram.c" line="125" info=""/>
            <location file="bios\nvram.c" line="127" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;*addr_reg&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;*addr_reg&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\nvram.c" line="141" info=""/>
            <location file="bios\nvram.c" line="143" info=""/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;*data_reg&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;*data_reg&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="bios\nvram.c" line="142" info=""/>
            <location file="bios\nvram.c" line="144" info=""/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;pmmutable::tia&amp;#039; is never used." verbose="struct member &amp;#039;pmmutable::tia&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\pmmu030.c" line="21"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;pmmutable::tib1&amp;#039; is never used." verbose="struct member &amp;#039;pmmutable::tib1&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\pmmu030.c" line="22"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;pmmutable::tib2&amp;#039; is never used." verbose="struct member &amp;#039;pmmutable::tib2&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\pmmu030.c" line="23"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;pmmutable::tic&amp;#039; is never used." verbose="struct member &amp;#039;pmmutable::tic&amp;#039; is never used." sinceDate="02.04.2019">
            <location file="bios\pmmu030.c" line="24"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[index]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[index]&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\screen.c" line="231"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[1]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[1]&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\screen.c" line="359"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[254]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[254]&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\screen.c" line="365"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[255]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;((volatile unsigned short*)4294935552UL)[255]&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\screen.c" line="366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;numsecs&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;numsecs&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="897"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="1119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;current_phase&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;current_phase&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="1204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;timeout&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="1247"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;numsecs&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;numsecs&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="382"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="605"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="611"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="624"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="630"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="752"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="763"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;u.byte[3]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;u.byte[3]&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="820"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="834"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dummy&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\scsi.c" line="841"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\sd.c" line="364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\sd.c" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\sd.c" line="618"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rtoken&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rtoken&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\sd.c" line="619"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;csd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;csd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\sd.c" line="648"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\sd.c" line="855"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\sd.c" line="877"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;init&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;init&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\serport.c" line="225"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!bconstat1()&amp;#039; is always true" verbose="Condition &amp;#039;!bconstat1()&amp;#039; is always true" sinceDate="02.04.2019">
            <location file="bios\serport.c" line="145"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!bcostat1()&amp;#039; is always false" verbose="Condition &amp;#039;!bcostat1()&amp;#039; is always false" sinceDate="02.04.2019">
            <location file="bios\serport.c" line="177"/>
        </error>
        <error id="noValidConfiguration" severity="information" msg="This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." verbose="This file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:\012WITH_AES=1;WITH_CLI=1;TARGET_512 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_ATARI_HARDWARE=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_SERIAL_CONSOLE=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_ACSI=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_ADVANCED_CPU=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_ALT_RAM=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_ATARI_VIDEO=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_COLDFIRE_RS232=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_DMASOUND=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_MFP=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_MFP=0;__mcoldfire__ : [C:/cygwin/home/czietz/emutos-code/include/config.h:1510] #error CONF_WITH_68030_PMMU requires CONF_WITH_ADVANCED_CPU.\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_SCC=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_STATIC_ALT_RAM;STATIC_ALT_RAM_ADDRESS : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_TTRAM=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;CONF_WITH_YM2149=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;DETECT_NATIVE_FEATURES=0 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;LOCALCONF : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;MACHINE_ARANYM : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;MACHINE_FIREBEE : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;MACHINE_FIREBEE;MACHINE_M548X : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;MACHINE_M548X : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;STATIC_ALT_RAM_ADDRESS : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;STATIC_ALT_RAM_SIZE : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;TARGET_192 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;TARGET_256 : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;TARGET_AMIGA_FLOPPY : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;TARGET_AMIGA_FLOPPY;TARGET_FLOPPY;TARGET_PRG : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;TARGET_AMIGA_ROM : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;TARGET_CART : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;__GNUC_MINOR__;__GNUC__ : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;__GNUC__ : [bios/spi.c:14] #error This SPI implementation is only suitable for ColdFire targets\012WITH_AES=1;WITH_CLI=1;TARGET_512;__mcoldfire__ : [C:/cygwin/home/czietz/emutos-code/include/config.h:1510] #error CONF_WITH_68030_PMMU requires CONF_WITH_ADVANCED_CPU." sinceDate="02.04.2019">
            <location file="bios\spi.c" line="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;value&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;value&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="bios\videl.c" line="742"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;u.l&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;u.l&amp;#039; is assigned a value that is never used." sinceDate="02.04.2019">
            <location file="bios\videl.c" line="643"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;charcode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;charcode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdedit.c" line="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;scancode&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;scancode&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdedit.c" line="43"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="973"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="279"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="377"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="378"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="378"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delay&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delay&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="379"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bpc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bpc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="549"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="550"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="624"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drive&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drive&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="916"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="1091"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="1092"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cprev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cprev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="1092"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;response&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;response&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="1092"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable rc shadows outer variable" verbose="Local variable rc shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="678" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="220" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable n shadows outer variable" verbose="Local variable n shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="678" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="324" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable bufsize shadows outer variable" verbose="Local variable bufsize shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="678" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="621" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable iobuf shadows outer variable" verbose="Local variable iobuf shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="677" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="624" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable outname shadows outer variable" verbose="Local variable outname shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="674" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="674" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable inptr shadows outer variable" verbose="Local variable inptr shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="675" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="675" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable outptr shadows outer variable" verbose="Local variable outptr shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="675" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="675" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable in shadows outer variable" verbose="Local variable in shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="676" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="676" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable out shadows outer variable" verbose="Local variable out shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="676" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="676" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable output_is_dir shadows outer variable" verbose="Local variable output_is_dir shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.c" line="676" info="Shadowed declaration"/>
            <location file="cli\cmdint.c" line="676" info="Shadow variable"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;signed long&amp;#039;." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="932"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="355"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="356"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="356"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delay&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delay&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="357"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bpc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bpc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="527"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="528"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="839"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drive&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drive&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="875"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="1040"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="1041"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cprev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cprev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="1041"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;response&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;response&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="1041"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable rc shadows outer variable" verbose="Local variable rc shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="650" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="198" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable n shadows outer variable" verbose="Local variable n shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="650" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="302" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable bufsize shadows outer variable" verbose="Local variable bufsize shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="650" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="595" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable iobuf shadows outer variable" verbose="Local variable iobuf shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="649" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="598" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable outname shadows outer variable" verbose="Local variable outname shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="646" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="646" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable inptr shadows outer variable" verbose="Local variable inptr shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="647" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="647" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable outptr shadows outer variable" verbose="Local variable outptr shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="647" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="647" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable in shadows outer variable" verbose="Local variable in shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="648" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="648" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable out shadows outer variable" verbose="Local variable out shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="648" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="648" info="Shadow variable"/>
        </error>
        <error id="shadowVar" severity="style" msg="Local variable output_is_dir shadows outer variable" verbose="Local variable output_is_dir shadows outer variable" sinceDate="02.04.2019">
            <location file="cli\cmdint.tr.c" line="648" info="Shadowed declaration"/>
            <location file="cli\cmdint.tr.c" line="648" info="Shadow variable"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdparse.c" line="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdparse.tr.c" line="12"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.c" line="150"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.c" line="297"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.c" line="297"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.c" line="395"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.c" line="395"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.tr.c" line="125"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.tr.c" line="253"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.tr.c" line="253"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.tr.c" line="349"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="cli\cmdutil.tr.c" line="349"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskact.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskact.c" line="181"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskact.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;root&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;root&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskact.c" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskact.c" line="548"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskapp.c" line="682"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskapp.c" line="926"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskapp.c" line="995"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskapp.c" line="622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rawin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rawin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskdir.c" line="66"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;samefile&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;samefile&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskdir.c" line="319"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;writelen&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;writelen&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskdir.c" line="416"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskdir.c" line="737"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskdir.c" line="788"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;icx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;icx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;icy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;icy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="408"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dicon&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dicon&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="549"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;icontype&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;icontype&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="660"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ib_src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ib_src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="662"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;an_src&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;an_src&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="716"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;source&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;source&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;path&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;path&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="861"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="862"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;item_found&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;item_found&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskfun.c" line="864"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskinf.c" line="302"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskinf.c" line="303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;event&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;event&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskinf.c" line="353"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskinf.c" line="471"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;more&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;more&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskinf.c" line="472"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;oldtime&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;oldtime&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskinf.c" line="701"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;olddate&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;olddate&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskinf.c" line="701"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exitobj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exitobj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskins.c" line="647"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exitobj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exitobj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskins.c" line="885"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskins.c" line="1041"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskins.c" line="1122"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;." sinceDate="02.04.2019">
            <location file="desk\deskins.c" line="508"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskins.c" line="1040"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;m&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;m&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="1377" info=""/>
            <location file="desk\deskmain.c" line="1378" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;appl&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;appl&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="270"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;touchob&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;touchob&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="358"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dest_wh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dest_wh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="630"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pathname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pathname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="754"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pfname&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pfname&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="755"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="897"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="1489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ev_which&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ev_which&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskmain.c" line="1576"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ii&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ii&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskobj.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;oldfree&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;oldfree&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskobj.c" line="194"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="561"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="617"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;path&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;path&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="883"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pathptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pathptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="1134"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="1210"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;width&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;width&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="1277"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;exitobj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;exitobj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="1358"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\desksupp.c" line="1519"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;obid&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;obid&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="323"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xoff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xoff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;yoff&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;yoff&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="327"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wblt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wblt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hblt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hblt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;revblt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;revblt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="431"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wh&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wh&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="583"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fn&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fn&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="645"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="desk\deskwin.c" line="646"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((10&amp;gt;=10&amp;amp;&amp;amp;10&amp;lt;=137?10:__extension__({int x[-(10&amp;lt;10)-(10&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 4" verbose="Argument &amp;#039;(((10&amp;gt;=10&amp;amp;&amp;amp;10&amp;lt;=137?10:__extension__({int x[-(10&amp;lt;10)-(10&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 4" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="120"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((19&amp;gt;=10&amp;amp;&amp;amp;19&amp;lt;=137?19:__extension__({int x[-(19&amp;lt;10)-(19&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 4612" verbose="Argument &amp;#039;(((19&amp;gt;=10&amp;amp;&amp;amp;19&amp;lt;=137?19:__extension__({int x[-(19&amp;lt;10)-(19&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 4612" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="126"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((21&amp;gt;=10&amp;amp;&amp;amp;21&amp;lt;=137?21:__extension__({int x[-(21&amp;lt;10)-(21&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=15?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 5748" verbose="Argument &amp;#039;(((21&amp;gt;=10&amp;amp;&amp;amp;21&amp;lt;=137?21:__extension__({int x[-(21&amp;lt;10)-(21&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=15?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 5748" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="195"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((24&amp;gt;=10&amp;amp;&amp;amp;24&amp;lt;=137?24:__extension__({int x[-(24&amp;lt;10)-(24&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 7236" verbose="Argument &amp;#039;(((24&amp;gt;=10&amp;amp;&amp;amp;24&amp;lt;=137?24:__extension__({int x[-(24&amp;lt;10)-(24&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 7236" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="236"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((25&amp;gt;=10&amp;amp;&amp;amp;25&amp;lt;=137?25:__extension__({int x[-(25&amp;lt;10)-(25&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((7&amp;gt;=0&amp;amp;&amp;amp;7&amp;lt;=7?7:__extension__({int x[-(7&amp;lt;0)-(7&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if0 is always 7709" verbose="Argument &amp;#039;(((25&amp;gt;=10&amp;amp;&amp;amp;25&amp;lt;=137?25:__extension__({int x[-(25&amp;lt;10)-(25&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((7&amp;gt;=0&amp;amp;&amp;amp;7&amp;lt;=7?7:__extension__({int x[-(7&amp;lt;0)-(7&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if0 is always 7709" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="269"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((26&amp;gt;=10&amp;amp;&amp;amp;26&amp;lt;=137?26:__extension__({int x[-(26&amp;lt;10)-(26&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 8260" verbose="Argument &amp;#039;(((26&amp;gt;=10&amp;amp;&amp;amp;26&amp;lt;=137?26:__extension__({int x[-(26&amp;lt;10)-(26&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 8260" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="287"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((30&amp;gt;=10&amp;amp;&amp;amp;30&amp;lt;=137?30:__extension__({int x[-(30&amp;lt;10)-(30&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 10277" verbose="Argument &amp;#039;(((30&amp;gt;=10&amp;amp;&amp;amp;30&amp;lt;=137?30:__extension__({int x[-(30&amp;lt;10)-(30&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 10277" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="298"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((31&amp;gt;=10&amp;amp;&amp;amp;31&amp;lt;=137?31:__extension__({int x[-(31&amp;lt;10)-(31&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 10821" verbose="Argument &amp;#039;(((31&amp;gt;=10&amp;amp;&amp;amp;31&amp;lt;=137?31:__extension__({int x[-(31&amp;lt;10)-(31&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 10821" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="307"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((32&amp;gt;=10&amp;amp;&amp;amp;32&amp;lt;=137?32:__extension__({int x[-(32&amp;lt;10)-(32&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 11333" verbose="Argument &amp;#039;(((32&amp;gt;=10&amp;amp;&amp;amp;32&amp;lt;=137?32:__extension__({int x[-(32&amp;lt;10)-(32&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 11333" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="316"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((33&amp;gt;=10&amp;amp;&amp;amp;33&amp;lt;=137?33:__extension__({int x[-(33&amp;lt;10)-(33&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 11845" verbose="Argument &amp;#039;(((33&amp;gt;=10&amp;amp;&amp;amp;33&amp;lt;=137?33:__extension__({int x[-(33&amp;lt;10)-(33&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 11845" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="325"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((37&amp;gt;=10&amp;amp;&amp;amp;37&amp;lt;=137?37:__extension__({int x[-(37&amp;lt;10)-(37&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 13892" verbose="Argument &amp;#039;(((37&amp;gt;=10&amp;amp;&amp;amp;37&amp;lt;=137?37:__extension__({int x[-(37&amp;lt;10)-(37&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 13892" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="363"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((40&amp;gt;=10&amp;amp;&amp;amp;40&amp;lt;=137?40:__extension__({int x[-(40&amp;lt;10)-(40&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 15429" verbose="Argument &amp;#039;(((40&amp;gt;=10&amp;amp;&amp;amp;40&amp;lt;=137?40:__extension__({int x[-(40&amp;lt;10)-(40&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 15429" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="375"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((42&amp;gt;=10&amp;amp;&amp;amp;42&amp;lt;=137?42:__extension__({int x[-(42&amp;lt;10)-(42&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((6&amp;gt;=0&amp;amp;&amp;amp;6&amp;lt;=15?6:__extension__({int x[-(6&amp;lt;0)-(6&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 16581" verbose="Argument &amp;#039;(((42&amp;gt;=10&amp;amp;&amp;amp;42&amp;lt;=137?42:__extension__({int x[-(42&amp;lt;10)-(42&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((6&amp;gt;=0&amp;amp;&amp;amp;6&amp;lt;=15?6:__extension__({int x[-(6&amp;lt;0)-(6&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 16581" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="399"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((43&amp;gt;=10&amp;amp;&amp;amp;43&amp;lt;=137?43:__extension__({int x[-(43&amp;lt;10)-(43&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((4&amp;gt;=0&amp;amp;&amp;amp;4&amp;lt;=15?4:__extension__({int x[-(4&amp;lt;0)-(4&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 17029" verbose="Argument &amp;#039;(((43&amp;gt;=10&amp;amp;&amp;amp;43&amp;lt;=137?43:__extension__({int x[-(43&amp;lt;10)-(43&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((4&amp;gt;=0&amp;amp;&amp;amp;4&amp;lt;=15?4:__extension__({int x[-(4&amp;lt;0)-(4&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 17029" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="410"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((44&amp;gt;=10&amp;amp;&amp;amp;44&amp;lt;=137?44:__extension__({int x[-(44&amp;lt;10)-(44&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=7?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 17453" verbose="Argument &amp;#039;(((44&amp;gt;=10&amp;amp;&amp;amp;44&amp;lt;=137?44:__extension__({int x[-(44&amp;lt;10)-(44&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=7?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 17453" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="418"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((45&amp;gt;=10&amp;amp;&amp;amp;45&amp;lt;=137?45:__extension__({int x[-(45&amp;lt;10)-(45&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 17989" verbose="Argument &amp;#039;(((45&amp;gt;=10&amp;amp;&amp;amp;45&amp;lt;=137?45:__extension__({int x[-(45&amp;lt;10)-(45&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 17989" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="430"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((50&amp;gt;=10&amp;amp;&amp;amp;50&amp;lt;=137?50:__extension__({int x[-(50&amp;lt;10)-(50&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 20517" verbose="Argument &amp;#039;(((50&amp;gt;=10&amp;amp;&amp;amp;50&amp;lt;=137?50:__extension__({int x[-(50&amp;lt;10)-(50&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 20517" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="474"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((51&amp;gt;=10&amp;amp;&amp;amp;51&amp;lt;=137?51:__extension__({int x[-(51&amp;lt;10)-(51&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((9&amp;gt;=0&amp;amp;&amp;amp;9&amp;lt;=15?9:__extension__({int x[-(9&amp;lt;0)-(9&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 21284" verbose="Argument &amp;#039;(((51&amp;gt;=10&amp;amp;&amp;amp;51&amp;lt;=137?51:__extension__({int x[-(51&amp;lt;10)-(51&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((9&amp;gt;=0&amp;amp;&amp;amp;9&amp;lt;=15?9:__extension__({int x[-(9&amp;lt;0)-(9&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 21284" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="490"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((52&amp;gt;=10&amp;amp;&amp;amp;52&amp;lt;=137?52:__extension__({int x[-(52&amp;lt;10)-(52&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 21541" verbose="Argument &amp;#039;(((52&amp;gt;=10&amp;amp;&amp;amp;52&amp;lt;=137?52:__extension__({int x[-(52&amp;lt;10)-(52&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 21541" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="498"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((54&amp;gt;=10&amp;amp;&amp;amp;54&amp;lt;=137?54:__extension__({int x[-(54&amp;lt;10)-(54&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 22549" verbose="Argument &amp;#039;(((54&amp;gt;=10&amp;amp;&amp;amp;54&amp;lt;=137?54:__extension__({int x[-(54&amp;lt;10)-(54&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 22549" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="504"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((70&amp;gt;=10&amp;amp;&amp;amp;70&amp;lt;=137?70:__extension__({int x[-(70&amp;lt;10)-(70&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((4&amp;gt;=0&amp;amp;&amp;amp;4&amp;lt;=15?4:__extension__({int x[-(4&amp;lt;0)-(4&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=7?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 30860" verbose="Argument &amp;#039;(((70&amp;gt;=10&amp;amp;&amp;amp;70&amp;lt;=137?70:__extension__({int x[-(70&amp;lt;10)-(70&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((4&amp;gt;=0&amp;amp;&amp;amp;4&amp;lt;=15?4:__extension__({int x[-(4&amp;lt;0)-(4&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=7?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 30860" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="552"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((73&amp;gt;=10&amp;amp;&amp;amp;73&amp;lt;=137?73:__extension__({int x[-(73&amp;lt;10)-(73&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((8&amp;gt;=0&amp;amp;&amp;amp;8&amp;lt;=15?8:__extension__({int x[-(8&amp;lt;0)-(8&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 32516" verbose="Argument &amp;#039;(((73&amp;gt;=10&amp;amp;&amp;amp;73&amp;lt;=137?73:__extension__({int x[-(73&amp;lt;10)-(73&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((8&amp;gt;=0&amp;amp;&amp;amp;8&amp;lt;=15?8:__extension__({int x[-(8&amp;lt;0)-(8&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 32516" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="604"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((74&amp;gt;=10&amp;amp;&amp;amp;74&amp;lt;=137?74:__extension__({int x[-(74&amp;lt;10)-(74&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((8&amp;gt;=0&amp;amp;&amp;amp;8&amp;lt;=15?8:__extension__({int x[-(8&amp;lt;0)-(8&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 33028" verbose="Argument &amp;#039;(((74&amp;gt;=10&amp;amp;&amp;amp;74&amp;lt;=137?74:__extension__({int x[-(74&amp;lt;10)-(74&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((8&amp;gt;=0&amp;amp;&amp;amp;8&amp;lt;=15?8:__extension__({int x[-(8&amp;lt;0)-(8&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 33028" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="619"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((77&amp;gt;=10&amp;amp;&amp;amp;77&amp;lt;=137?77:__extension__({int x[-(77&amp;lt;10)-(77&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 34324" verbose="Argument &amp;#039;(((77&amp;gt;=10&amp;amp;&amp;amp;77&amp;lt;=137?77:__extension__({int x[-(77&amp;lt;10)-(77&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 34324" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="647"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((78&amp;gt;=10&amp;amp;&amp;amp;78&amp;lt;=137?78:__extension__({int x[-(78&amp;lt;10)-(78&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 34853" verbose="Argument &amp;#039;(((78&amp;gt;=10&amp;amp;&amp;amp;78&amp;lt;=137?78:__extension__({int x[-(78&amp;lt;10)-(78&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 34853" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="660"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((79&amp;gt;=10&amp;amp;&amp;amp;79&amp;lt;=137?79:__extension__({int x[-(79&amp;lt;10)-(79&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 35348" verbose="Argument &amp;#039;(((79&amp;gt;=10&amp;amp;&amp;amp;79&amp;lt;=137?79:__extension__({int x[-(79&amp;lt;10)-(79&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 35348" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="666"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((91&amp;gt;=10&amp;amp;&amp;amp;91&amp;lt;=137?91:__extension__({int x[-(91&amp;lt;10)-(91&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=7?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=3?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 41483" verbose="Argument &amp;#039;(((91&amp;gt;=10&amp;amp;&amp;amp;91&amp;lt;=137?91:__extension__({int x[-(91&amp;lt;10)-(91&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=7?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=3?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 41483" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="713"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((100&amp;gt;=10&amp;amp;&amp;amp;100&amp;lt;=137?100:__extension__({int x[-(100&amp;lt;10)-(100&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=15?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 46244" verbose="Argument &amp;#039;(((100&amp;gt;=10&amp;amp;&amp;amp;100&amp;lt;=137?100:__extension__({int x[-(100&amp;lt;10)-(100&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=15?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 46244" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="730"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((101&amp;gt;=10&amp;amp;&amp;amp;101&amp;lt;=137?101:__extension__({int x[-(101&amp;lt;10)-(101&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=15?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 46756" verbose="Argument &amp;#039;(((101&amp;gt;=10&amp;amp;&amp;amp;101&amp;lt;=137?101:__extension__({int x[-(101&amp;lt;10)-(101&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=15?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 46756" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="741"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((102&amp;gt;=10&amp;amp;&amp;amp;102&amp;lt;=137?102:__extension__({int x[-(102&amp;lt;10)-(102&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 47140" verbose="Argument &amp;#039;(((102&amp;gt;=10&amp;amp;&amp;amp;102&amp;lt;=137?102:__extension__({int x[-(102&amp;lt;10)-(102&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 47140" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="748"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((103&amp;gt;=10&amp;amp;&amp;amp;103&amp;lt;=137?103:__extension__({int x[-(103&amp;lt;10)-(103&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 47652" verbose="Argument &amp;#039;(((103&amp;gt;=10&amp;amp;&amp;amp;103&amp;lt;=137?103:__extension__({int x[-(103&amp;lt;10)-(103&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 47652" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="755"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((104&amp;gt;=10&amp;amp;&amp;amp;104&amp;lt;=137?104:__extension__({int x[-(104&amp;lt;10)-(104&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 48212" verbose="Argument &amp;#039;(((104&amp;gt;=10&amp;amp;&amp;amp;104&amp;lt;=137?104:__extension__({int x[-(104&amp;lt;10)-(104&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 48212" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="763"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((105&amp;gt;=10&amp;amp;&amp;amp;105&amp;lt;=137?105:__extension__({int x[-(105&amp;lt;10)-(105&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((6&amp;gt;=0&amp;amp;&amp;amp;6&amp;lt;=15?6:__extension__({int x[-(6&amp;lt;0)-(6&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 48836" verbose="Argument &amp;#039;(((105&amp;gt;=10&amp;amp;&amp;amp;105&amp;lt;=137?105:__extension__({int x[-(105&amp;lt;10)-(105&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((6&amp;gt;=0&amp;amp;&amp;amp;6&amp;lt;=15?6:__extension__({int x[-(6&amp;lt;0)-(6&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 48836" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="791"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((106&amp;gt;=10&amp;amp;&amp;amp;106&amp;lt;=137?106:__extension__({int x[-(106&amp;lt;10)-(106&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 49220" verbose="Argument &amp;#039;(((106&amp;gt;=10&amp;amp;&amp;amp;106&amp;lt;=137?106:__extension__({int x[-(106&amp;lt;10)-(106&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=15?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 49220" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="805"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((107&amp;gt;=10&amp;amp;&amp;amp;107&amp;lt;=137?107:__extension__({int x[-(107&amp;lt;10)-(107&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 49700" verbose="Argument &amp;#039;(((107&amp;gt;=10&amp;amp;&amp;amp;107&amp;lt;=137?107:__extension__({int x[-(107&amp;lt;10)-(107&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 49700" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="812"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((108&amp;gt;=10&amp;amp;&amp;amp;108&amp;lt;=137?108:__extension__({int x[-(108&amp;lt;10)-(108&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((6&amp;gt;=0&amp;amp;&amp;amp;6&amp;lt;=15?6:__extension__({int x[-(6&amp;lt;0)-(6&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 50388" verbose="Argument &amp;#039;(((108&amp;gt;=10&amp;amp;&amp;amp;108&amp;lt;=137?108:__extension__({int x[-(108&amp;lt;10)-(108&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((6&amp;gt;=0&amp;amp;&amp;amp;6&amp;lt;=15?6:__extension__({int x[-(6&amp;lt;0)-(6&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((5&amp;gt;=0&amp;amp;&amp;amp;5&amp;lt;=7?5:__extension__({int x[-(5&amp;lt;0)-(5&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 50388" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="825"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((110&amp;gt;=10&amp;amp;&amp;amp;110&amp;lt;=137?110:__extension__({int x[-(110&amp;lt;10)-(110&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 51205" verbose="Argument &amp;#039;(((110&amp;gt;=10&amp;amp;&amp;amp;110&amp;lt;=137?110:__extension__({int x[-(110&amp;lt;10)-(110&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 51205" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="846"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((111&amp;gt;=10&amp;amp;&amp;amp;111&amp;lt;=137?111:__extension__({int x[-(111&amp;lt;10)-(111&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 51716" verbose="Argument &amp;#039;(((111&amp;gt;=10&amp;amp;&amp;amp;111&amp;lt;=137?111:__extension__({int x[-(111&amp;lt;10)-(111&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=15?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(0&amp;gt;=0&amp;amp;&amp;amp;0&amp;lt;=3?0:__extension__({int x[-(0&amp;lt;0)-(0&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 51716" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="852"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((114&amp;gt;=10&amp;amp;&amp;amp;114&amp;lt;=137?114:__extension__({int x[-(114&amp;lt;10)-(114&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 53285" verbose="Argument &amp;#039;(((114&amp;gt;=10&amp;amp;&amp;amp;114&amp;lt;=137?114:__extension__({int x[-(114&amp;lt;10)-(114&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 53285" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="886"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((121&amp;gt;=10&amp;amp;&amp;amp;121&amp;lt;=137?121:__extension__({int x[-(121&amp;lt;10)-(121&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=15?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=3?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 56934" verbose="Argument &amp;#039;(((121&amp;gt;=10&amp;amp;&amp;amp;121&amp;lt;=137?121:__extension__({int x[-(121&amp;lt;10)-(121&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((3&amp;gt;=0&amp;amp;&amp;amp;3&amp;lt;=15?3:__extension__({int x[-(3&amp;lt;0)-(3&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(2&amp;gt;=0&amp;amp;&amp;amp;2&amp;lt;=3?2:__extension__({int x[-(2&amp;lt;0)-(2&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 56934" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="919"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((122&amp;gt;=10&amp;amp;&amp;amp;122&amp;lt;=137?122:__extension__({int x[-(122&amp;lt;10)-(122&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 57381" verbose="Argument &amp;#039;(((122&amp;gt;=10&amp;amp;&amp;amp;122&amp;lt;=137?122:__extension__({int x[-(122&amp;lt;10)-(122&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 57381" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="927"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;(((123&amp;gt;=10&amp;amp;&amp;amp;123&amp;lt;=137?123:__extension__({int x[-(123&amp;lt;10)-(123&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 57893" verbose="Argument &amp;#039;(((123&amp;gt;=10&amp;amp;&amp;amp;123&amp;lt;=137?123:__extension__({int x[-(123&amp;lt;10)-(123&amp;gt;137)];sizeof(x);}))-10)&amp;lt;&amp;lt;9)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=15?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;15)];sizeof(x);}))&amp;lt;&amp;lt;5)|((1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=7?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;7)];sizeof(x);}))&amp;lt;&amp;lt;2)|(1&amp;gt;=0&amp;amp;&amp;amp;1&amp;lt;=3?1:__extension__({int x[-(1&amp;lt;0)-(1&amp;gt;3)];sizeof(x);}))&amp;#039; to function gem_if is always 57893" sinceDate="02.04.2019">
            <location file="desk\gembind.c" line="935"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;quot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;quot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rem&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rem&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;type&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;type&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fill_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fill_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;precision&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;precision&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;width&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;width&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fill&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fill&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="83"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;buf&amp;#039; is not assigned a value." verbose="Variable &amp;#039;buf&amp;#039; is not assigned a value." sinceDate="02.04.2019">
            <location file="util\doprintf.c" line="45"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;*ptotal&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;*ptotal&amp;#039; is reassigned a value before the old one has been used." sinceDate="02.04.2019">
            <location file="util\gemdos.c" line="266" info=""/>
            <location file="util\gemdos.c" line="272" info=""/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &amp;quot;ERROR&amp;quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &amp;quot;ERROR&amp;quot; output go away.\012#include &amp;lt;stdarg.h&amp;gt;\012#include &amp;lt;stdio.h&amp;gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&amp;quot;%018p, %s\n&amp;quot;, p, (long)p &amp;amp; 255 ? p : &amp;quot;&amp;quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &amp;quot;x&amp;quot;;\012    char *s3 = &amp;quot;ERROR&amp;quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&amp;quot;first&amp;quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&amp;lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" sinceDate="02.04.2019">
            <location file="util\gemdos.c" line="74"/>
        </error>
    </errors>
</results>
