00000172 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.0
Created On: 23/06/2012 17:57:58

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Program    : TG68TestFirmware
00000000                             3  * Written by : Alastair M. Robinson
00000000                             4  * Date       : 2012-05-22
00000000                             5  * Description: Simple program to test the TG68 processor.
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =000FFFF6                  8  TEXTBUFFERPTR equ $ffff6        ; Word
00000000  =000FFFF8                  9  FRAMECOUNTER equ $ffff8
00000000  =000FFFFA                 10  RANDOMSEED equ $ffffa
00000000  =000FFFFE                 11  PEN equ $ffffe
00000000  =00100000                 12  FRAMEBUFFER equ $100000
00000000  =00000280                 13  FB_WIDTH equ 640
00000000  =000003C0                 14  FB_HEIGHT equ 960
00000000                            15  
00000000  =007FFFFE                 16  STACK equ $7ffffe
00000000                            17  
00000000  =00800000                 18  VGAREGS equ $800000
00000000  =00800800                 19  TEXTBUFFER equ $800800  ; 2048 bytes
00000000                            20  
00000000  =00810000                 21  PERREGS equ $810000 ; Peripheral registers
00000000                            22  
00000000  =000FF000                 23  SPRITEBUFFER equ $ff000 ; Sprite data (can't reference from ROM unless we copy the ROM to RAM at startup...)
00000000                            24  
00000000  =00000000                 25  FBPTH equ $0000 ; Framebuffer pointer - must be 64-bit aligned.
00000000  =00000002                 26  FBPTL equ $0002
00000000                            27  
00000000  =00000100                 28  SP0PTH equ $0100 ; Pointer to sprite 0's data - must be 64-bit aligned.
00000000  =00000102                 29  SP0PTL equ $0102
00000000  =00000104                 30  SP0XPOS equ $0104
00000000  =00000106                 31  SP0YPOS equ $0106
00000000                            32  
00000000                            33  
00000000                            34          ORG     $0
00000000= 007FFFFE                  35          dc.l    STACK           ; Initial stack pointer
00000004= 00000172                  36          dc.l    START
00000008                            37          
00000060                            38          ORG     $0060
00000060= 000003D6                  39          dc.l    Crash
00000064= 000003D8                  40          dc.l    Int1
00000068= 0000043A                  41          dc.l    Int2
0000006C= 00000476                  42          dc.l    Int3
00000070= 00000478                  43          dc.l    Int4
00000074= 0000047A                  44          dc.l    Int5
00000078= 0000047C                  45          dc.l    Int6    
0000007C= 0000047E                  46          dc.l    Int7
00000080                            47  
00000100                            48          ORG     $0100
00000100                            49  MyMessage
00000100= 48 65 6C 6C 6F 20 ...     50          dc.b    'Hello World!  Just a quick test to see whether loading the character RAM from the processor is working properly!',0,0
00000172                            51  
00000172                            52  START:                          ; first instruction of program
00000172  4FF9 007FFFFE             53          lea     STACK,a7
00000178                            54  
00000178  43F9 00800800             55          lea     TextBuffer,a1
0000017E  41F8 0100                 56          lea     MyMessage,a0
00000182  6100 02AE                 57          bsr     _strcpy
00000186                            58  
00000186  41F9 00100000             59          lea     FRAMEBUFFER,a0  ; Set initial framebuffer pointer.
0000018C  4DF9 00800000             60          lea     VGAREGS,a6
00000192  2D48 0000                 61          move.l  a0,(FBPTH,a6)
00000196                            62  
00000196  33FC 0000 000FFFF8        63          move.w  #0,FRAMECOUNTER
0000019E  33FC 0000 000FFFF6        64          move.w  #0,TEXTBUFFERPTR
000001A6                            65  
000001A6  6100 017E                 66          bsr     CopySprite
000001AA                            67  
000001AA  46FC 2000                 68          move.w  #$2000,SR       ; Enable all interrupts
000001AE                            69  
000001AE  33FC 0000 000FFFFE        70          move.w  #$0,pen
000001B6  6100 012A                 71          bsr     FillScreen
000001BA                            72  
000001BA  7000                      73          move.l  #0,d0
000001BC  7201                      74          move.l  #1,d1
000001BE                            75  .mainloop
000001BE  5279 000FFFFE             76          add.w   #1,pen
000001C4  6100 0076                 77          bsr     Random
000001C8  2600                      78          move.l  d0,d3
000001CA  6100 0070                 79          bsr     Random
000001CE  2400                      80          move.l  d0,d2
000001D0  6100 006A                 81          bsr     Random
000001D4  2200                      82          move.l  d0,d1
000001D6  6100 0064                 83          bsr     Random
000001DA                            84  
000001DA  80FC 027F                 85          divu    #FB_WIDTH-1,d0
000001DE  4240                      86          clr.w   d0
000001E0  4840                      87          swap    d0
000001E2                            88  
000001E2  82FC 03BF                 89          divu    #FB_HEIGHT-1,d1
000001E6  4241                      90          clr.w   d1
000001E8  4841                      91          swap    d1
000001EA                            92          
000001EA  283C 0000027F             93          move.l  #FB_WIDTH-1,d4
000001F0  9880                      94          sub.l   d0,d4
000001F2  84C4                      95          divu    d4,d2
000001F4  4242                      96          clr.w   d2
000001F6  4842                      97          swap    d2
000001F8                            98          
000001F8  283C 000003BF             99          move.l  #FB_HEIGHT-1,d4
000001FE  9881                     100          sub.l   d1,d4
00000200  86C4                     101          divu    d4,d3
00000202  4243                     102          clr.w   d3
00000204  4843                     103          swap    d3
00000206                           104          
00000206  5242                     105          addq    #1,d2
00000208  5243                     106          addq    #1,d3
0000020A  41F9 00100000            107          lea     FrameBuffer,a0
00000210  6100 0088                108          bsr     DrawRectangle
00000214  60A8                     109          bra     .mainloop
00000216                           110  
00000216  103C 0009                111          MOVE.B  #9,D0
0000021A  4E4F                     112          TRAP    #15             ; halt simulator
0000021C                           113  
0000021C                           114  
0000021C                           115  Plot                            ; X: d0, y: d1
0000021C  48E7 C080                116          movem.l a0/d0-d1,-(a7)
00000220  41F9 00100000            117          lea     FRAMEBUFFER,a0
00000226  C2FC 0500                118          mulu    #FB_WIDTH*2,d1
0000022A  E380                     119          asl.l   #1,d0
0000022C  D081                     120          add.l   d1,d0
0000022E  D1C0                     121          add.l   d0,a0
00000230  30B9 000FFFFE            122          move.w  pen,(a0)
00000236  4CDF 0103                123          movem.l (a7)+,a0/d0-d1
0000023A  4E75                     124          rts
0000023C                           125  
0000023C                           126  
0000023C                           127  Random
0000023C  48E7 6000                128          movem.l d1-d2,-(a7)
00000240  203C 000041A7            129          move.l  #16807,d0
00000246  2400                     130          move.l  d0,d2
00000248  C0F9 000FFFFC            131          mulu    RANDOMSEED+2,d0
0000024E                           132  
0000024E  2200                     133          move.l  d0,d1
00000250  9241                     134          sub.w   d1,d1
00000252  4841                     135          swap    d1
00000254  C4F9 000FFFFA            136          mulu    RANDOMSEED,d2
0000025A  D481                     137          add.l   d1,d2
0000025C                           138  
0000025C  2202                     139          move.l  d2,d1
0000025E  D281                     140          add.l   d1,d1
00000260  4241                     141          clr.w   d1
00000262  4841                     142          swap    d1
00000264                           143  
00000264  C0BC 0000FFFF            144          and.l   #$0000FFFF,d0
0000026A  C0BC 7FFFFFFF            145          and.l   #$7FFFFFFF,d0
00000270  C4BC 00007FFF            146          and.l   #$00007FFF,d2
00000276  4842                     147          swap    D2
00000278  D481                     148          add.l   D1,D2
0000027A  D082                     149          add.l   D2,D0
0000027C                           150  
0000027C  6A00 0008                151          bpl     .upd
00000280  0680 7FFFFFFF            152          add.l   #$7FFFFFFF,d0
00000286  23C0 000FFFFA            153  .upd    move.l  d0,RANDOMSEED
0000028C  4840                     154          swap    d0
0000028E  303C 0000                155          move.w  #0,d0
00000292  4840                     156          swap    d0
00000294  4CDF 0006                157          movem.l (a7)+,d1-d2
00000298  4E75                     158          rts
0000029A                           159          
0000029A                           160  
0000029A                           161  DrawRectangle   ; d0: x, d1: y, d2: w, d3: h, a0: framebuffer
0000029A  48E7 7C00                162          movem.l d1-d5,-(a7)
0000029E  D281                     163          add.l   d1,d1
000002A0  C2FC 0280                164          mulu    #FB_WIDTH,d1    ; y offset
000002A4  D1C1                     165          add.l   d1,a0
000002A6  D080                     166          add.l   d0,d0
000002A8  D1C0                     167          add.l   d0,a0           ; x offset
000002AA  203C 00000280            168          move.l  #FB_WIDTH,d0
000002B0  9082                     169          sub.l   d2,d0           ; modulo
000002B2  D080                     170          add.l   d0,d0
000002B4                           171          
000002B4  3839 000FFFFE            172          move.w  pen,d4
000002BA  E28C                     173          lsr.l   #1,d4
000002BC  C8BC 00007BEF            174          and.l   #%0111101111101111,d4   ; Remove MSBs
000002C2                           175  .yloop
000002C2  2202                     176          move.l  d2,d1
000002C4                           177  .xloop
000002C4  3A10                     178          move.w  (a0),d5
000002C6  E28D                     179          lsr.l   #1,d5
000002C8  CABC 00007BEF            180          and.l   #%0111101111101111,d5   ; Remove MSBs
000002CE  DA44                     181          add.w   d4,d5   
000002D0  30C5                     182          move.w  d5,(a0)+
000002D2  5341                     183          subq.w  #1,d1
000002D4  66EE                     184          bne     .xloop
000002D6                           185  
000002D6  D1C0                     186          add.l   d0,a0           ; Add modulo
000002D8                           187  
000002D8  5343                     188          subq.w  #1,d3
000002DA  66E6                     189          bne     .yloop
000002DC                           190  
000002DC  4CDF 003E                191          movem.l (a7)+,d1-d5
000002E0  4E75                     192          rts
000002E2                           193  
000002E2                           194  
000002E2                           195  FillScreen
000002E2  48E7 78F8                196          movem.l a0-a4/d1-d4,-(a7)
000002E6  41F9 00100000            197          lea     FRAMEBUFFER,a0
000002EC  203C 000003C0            198          move.l  #FB_HEIGHT,d0
000002F2  C0FC 0280                199          mulu    #FB_WIDTH,d0
000002F6  D1C0                     200          add.l   d0,a0
000002F8  D1C0                     201          add.l   d0,a0           ; Point to end of buffer
000002FA  E888                     202          lsr.l   #4,d0           ; We're moving 16 bytes at a time
000002FC  3239 000FFFFE            203          move.w  pen,d1
00000302  4841                     204          swap    d1
00000304  3239 000FFFFE            205          move.w  pen,d1
0000030A  2401                     206          move.l  d1,d2
0000030C  2601                     207          move.l  d1,d3
0000030E  2801                     208          move.l  d1,d4
00000310  2241                     209          move.l  d1,a1
00000312  2441                     210          move.l  d1,a2
00000314  2641                     211          move.l  d1,a3
00000316  2841                     212          move.l  d1,a4
00000318                           213  .fillloop
00000318  48E0 7878                214          movem.l a1-a4/d1-d4,-(a0)
0000031C  5380                     215          sub.l   #1,d0
0000031E  66F8                     216          bne     .fillloop
00000320  4CDF 1F1E                217          movem.l (a7)+,a0-a4/d1-d4
00000324  4E75                     218          rts
00000326                           219  
00000326                           220  
00000326                           221  CopySprite:     ; Copy sprite data
00000326  48E7 80C0                222          movem.l a0-a1/d0,-(a7)
0000032A  41F9 00000356            223          lea     SpriteData,a0
00000330  43F9 000FF000            224          lea     SPRITEBUFFER,a1
00000336  700F                     225          moveq.l #15,d0
00000338                           226  .cpyloop
00000338  22D8                     227          move.l  (a0)+,(a1)+
0000033A  22D8                     228          move.l  (a0)+,(a1)+
0000033C  51C8 FFFA                229          dbf     d0,.cpyloop
00000340  41F9 00800000            230          lea     VGAREGS,a0
00000346  43F9 000FF000            231          lea     SPRITEBUFFER,a1
0000034C  2149 0100                232          move.l  a1,(SP0PTH,a0)
00000350  4CDF 0301                233          movem.l (a7)+,a0-a1/d0
00000354  4E75                     234          rts
00000356                           235  
00000356                           236  
00000356                           237  SpriteData:
00000356= CF000000 00000000        238          dc.l    $CF000000,$00000000
0000035E= 8CFFF000 00000000        239          dc.l    $8CFFF000,$00000000
00000366= 08CCFFF0 00000000        240          dc.l    $08CCFFF0,$00000000
0000036E= 08CCCCFF FF000000        241          dc.l    $08CCCCFF,$FF000000
00000376= 088CCCCC CFFF0000        242          dc.l    $088CCCCC,$CFFF0000
0000037E= 008CCCCC CCC80000        243          dc.l    $008CCCCC,$CCC80000
00000386= 0088CCCC CC800000        244          dc.l    $0088CCCC,$CC800000
0000038E= 0008CCCC CF000000        245          dc.l    $0008CCCC,$CF000000
00000396= 0008CCCC CCF00000        246          dc.l    $0008CCCC,$CCF00000
0000039E= 00088CC8 CCCF0000        247          dc.l    $00088CC8,$CCCF0000
000003A6= 00008C80 8CCCF000        248          dc.l    $00008C80,$8CCCF000
000003AE= 00008800 08CCCF00        249          dc.l    $00008800,$08CCCF00
000003B6= 00000000 008CCCF0        250          dc.l    $00000000,$008CCCF0
000003BE= 00000000 0008CCC8        251          dc.l    $00000000,$0008CCC8
000003C6= 00000000 00008C80        252          dc.l    $00000000,$00008C80
000003CE= 00000000 00000800        253          dc.l    $00000000,$00000800
000003D6                           254  
000003D6                           255  
000003D6                           256  Crash
000003D6  4E73                     257          rte
000003D8                           258  
000003D8                           259  int1    ; Vertical Blank Interrupt
000003D8  48E7 C0C0                260          movem.l a0-a1/d0-d1,-(a7)
000003DC                           261  
000003DC  3039 000FFFF8            262          move.w  FRAMECOUNTER,d0
000003E2  5240                     263          addq.w  #1,d0
000003E4  B07C 03C0                264          cmp.w   #960,d0
000003E8  6600 0006                265          bne     .skip
000003EC  303C 0000                266          move.w  #0,d0
000003F0                           267  .skip
000003F0  33C0 000FFFF8            268          move.w  d0,FRAMECOUNTER
000003F6  B07C 01E0                269          cmp.w   #480,d0
000003FA  6D00 0008                270          blt     .skip2
000003FE  0440 03C0                271          sub.w   #960,d0
00000402  4440                     272          neg.w   d0
00000404                           273  .skip2
00000404  3200                     274          move.w  d0,d1
00000406  C0FC 0500                275          mulu    #(FB_WIDTH*2),d0
0000040A  0680 00100000            276          add.l   #FRAMEBUFFER,d0
00000410  41F9 00800000            277          lea     VGAREGS,a0
00000416  2140 0000                278          move.l  d0,(FBPTH,a0)
0000041A                           279  
0000041A  3141 0104                280          move.w  d1,(SP0XPOS,a0)
0000041E  3141 0106                281          move.w  d1,(SP0YPOS,a0)
00000422                           282  
00000422  43F9 000FF000            283          lea     SPRITEBUFFER,a1
00000428  2149 0100                284          move.l  a1,(SP0PTH,a0)
0000042C                           285  
0000042C  4CDF 0303                286          movem.l (a7)+,a0-a1/d0-d1
00000430  4E73                     287          rte
00000432                           288  
00000432                           289  
00000432                           290  _strcpy ; A0: src, A1: dst
00000432  1018                     291          move.b  (a0)+,d0
00000434  12C0                     292          move.b  d0,(a1)+
00000436  66FA                     293          bne     _strcpy
00000438  4E75                     294          rts
0000043A                           295          
0000043A                           296  
0000043A                           297  int2    ; UART interrupt
0000043A  48E7 C080                298          movem.l d0-d1/a0,-(a7)
0000043E  7200                     299          moveq.l #0,d1
00000440  3239 000FFFF6            300          move.w  TEXTBUFFERPTR,d1
00000446  41F9 00800800            301          lea     TEXTBUFFER,a0
0000044C  3039 00810000            302          move.w  PERREGS,d0      ; Read data - low byte contains character from UART
00000452  0800 0009                303          btst    #9,d0           ; Rx intterupt?
00000456  6700 0018                304          beq     .skip
0000045A  1180 1000                305          move.b  d0,(a0,d1)
0000045E  5241                     306          addq.w  #1,d1
00000460  C27C 07FF                307          and.w   #$7ff,d1        ; 2048 byte buffer
00000464  33C1 000FFFF6            308          move.w  d1,TEXTBUFFERPTR
0000046A  33C0 00810000            309          move.w  d0,PERREGS      ; Echo received byte back to terminal.
00000470                           310  .skip
00000470  4CDF 0103                311          movem.l (a7)+,d0-d1/a0
00000474  4E73                     312          rte
00000476                           313  
00000476                           314  int3
00000476  4E73                     315          rte
00000478                           316  
00000478                           317  int4
00000478  4E73                     318          rte
0000047A                           319  
0000047A                           320  int5
0000047A  4E73                     321          rte
0000047C                           322  
0000047C                           323  int6
0000047C  4E73                     324          rte
0000047E                           325  
0000047E                           326  int7
0000047E  4E73                     327          rte
00000480                           328  
00000480                           329  
00000480                           330          END     START           ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
COPYSPRITE          326
COPYSPRITE:CPYLOOP  338
CRASH               3D6
DRAWRECTANGLE       29A
DRAWRECTANGLE:XLOOP  2C4
DRAWRECTANGLE:YLOOP  2C2
FBPTH               0
FBPTL               2
FB_HEIGHT           3C0
FB_WIDTH            280
FILLSCREEN          2E2
FILLSCREEN:FILLLOOP  318
FRAMEBUFFER         100000
FRAMECOUNTER        FFFF8
INT1                3D8
INT1:SKIP           3F0
INT1:SKIP2          404
INT2                43A
INT2:SKIP           470
INT3                476
INT4                478
INT5                47A
INT6                47C
INT7                47E
MYMESSAGE           100
PEN                 FFFFE
PERREGS             810000
PLOT                21C
RANDOM              23C
RANDOM:UPD          286
RANDOMSEED          FFFFA
SP0PTH              100
SP0PTL              102
SP0XPOS             104
SP0YPOS             106
SPRITEBUFFER        FF000
SPRITEDATA          356
STACK               7FFFFE
START               172
START:MAINLOOP      1BE
TEXTBUFFER          800800
TEXTBUFFERPTR       FFFF6
VGAREGS             800000
_STRCPY             432
