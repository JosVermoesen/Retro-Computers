1     0000              MODULE z80_crt_asm
2     0000              LINE 0, "c:/z88dk/\libsrc\_DEVELOPMENT\target\z80\z80_crt.asm"
0     0000              
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ; SELECT CRT0 FROM -STARTUP=N COMMANDLINE OPTION ;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              
7     0000              IF !DEFINED_REGISTER_SP
8     0000              	defc	DEFINED_REGISTER_SP  = 1
9     0000              	defc REGISTER_SP  = 0x4000
10    0000              	IFNDEF REGISTER_SP
11    0000              	ENDIF
12    0000              ENDIF
13    0000              
14    0000              
15    0000              
16    0000              
17    0000              
18    0000              
19    0000              IFNDEF startup
20    0000              
21    0000                 ; startup undefined so select a default
22    0000              
23    0000                 defc startup = 2
24    0000              
25    0000              ENDIF
26    0000              
27    0000              
28    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29    0000              ;; user supplied crt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31    0000              
32    0000              
33    0000              
34    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
35    0000              ;; ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
36    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
37    0000              
38    0000              
39    0000              
40    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
41    0000              ;; rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
42    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
43    0000              
44    0000              
45    0000              
46    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
47    0000              ;; compressed rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
48    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
49    0000              
50    0000              
51    0000                 ; generic embedded system
52    0000                 ; no files, no fds
53    0000              
54    0000                 IFNDEF __CRTCFG
55    0000              
56    0000                    defc __CRTCFG = 2
57    0000              
58    0000                 ENDIF
59    0000              
60    0000                 IFNDEF __MMAP
61    0000              
62    0000                    defc __MMAP = 0
63    0000              
64    0000                 ENDIF
65    0000              
66    0000              
67    0000              
68    0000              
69    0000              
70    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
71    0000              ;;                   z80 standalone target                   ;;
72    0000              ;;    generated from target/z80/startup/z80_crt_0.asm.m4     ;;
73    0000              ;;                                                           ;;
74    0000              ;;                  flat 64k address space                   ;;
75    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
76    0000              
77    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
78    0000              ;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
79    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
80    0000              
81    0000              include "config_z80_public.inc"
1     0000              
2     0000              
3     0000              
4     0000              
5     0000              IFNDEF __CONFIG_Z88DK_INC_
6     0000              defc   __CONFIG_Z88DK_INC_ = 1
7     0000              
8     0000              ; Automatically Generated at Library Build Time
9     0000              
10    0000              
11    0000              
12    0000              
13    0000              
14    0000              
15    0000              
16    0000              
17    0000              
18    0000              
19    0000              PUBLIC __Z88DK
20    0000              
21    0000              
22    0000              
23    0000              
24    0000              defc __Z88DK = 1992
25    0000              
26    0000              
27    0000              
28    0000              
29    0000              
30    0000              
31    0000              
32    0000              
33    0000              
34    0000              PUBLIC __EMBEDDED_Z80
35    0000              
36    0000              
37    0000              
38    0000              
39    0000              defc __EMBEDDED_Z80 = 1
40    0000              
41    0000              
42    0000              
43    0000              
44    0000              
45    0000              
46    0000              
47    0000              
48    0000              
49    0000              PUBLIC __Z80
50    0000              
51    0000              PUBLIC __Z80_NMOS
52    0000              PUBLIC __Z80_CMOS
53    0000              
54    0000              PUBLIC __CPU_CLOCK
55    0000              
56    0000              PUBLIC __CPU_INFO
57    0000              
58    0000              PUBLIC __CPU_INFO_ENABLE_SLL
59    0000              
60    0000              
61    0000              
62    0000              
63    0000              defc __Z80 = 0x01
64    0000              
65    0000              defc __Z80_NMOS = 0x01
66    0000              defc __Z80_CMOS = 0x02
67    0000              
68    0000              defc __CPU_CLOCK = 4000000
69    0000              
70    0000              defc __CPU_INFO = 0x00
71    0000              
72    0000              defc __CPU_INFO_ENABLE_SLL = 0x01
73    0000              
74    0000              
75    0000              
76    0000              
77    0000              
78    0000              
79    0000              
80    0000              
81    0000              
82    0000              PUBLIC __CLIB_OPT_MULTITHREAD
83    0000              
84    0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_HEAPS
85    0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FILES
86    0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FLIST
87    0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDTBL
88    0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDSTR
89    0000              
90    0000              PUBLIC __CLIB_OPT_IMATH
91    0000              
92    0000              PUBLIC __CLIB_OPT_IMATH_FAST
93    0000              
94    0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_UNROLL
95    0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_LZEROS
96    0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_UNROLL
97    0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_LZEROS
98    0000              PUBLIC __CLIB_OPT_IMATH_FAST_LIA
99    0000              
100   0000              PUBLIC __CLIB_OPT_IMATH_SELECT
101   0000              
102   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_ASR
103   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSR
104   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSL
105   0000              
106   0000              PUBLIC __CLIB_OPT_TXT2NUM
107   0000              
108   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_BIN
109   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_OCT
110   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_DEC
111   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_HEX
112   0000              
113   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_BIN
114   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_OCT
115   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_DEC
116   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_HEX
117   0000              
118   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT
119   0000              
120   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN
121   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT
122   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC
123   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX
124   0000              
125   0000              PUBLIC __CLIB_OPT_NUM2TXT
126   0000              
127   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_BIN
128   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_OCT
129   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_DEC
130   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_HEX
131   0000              
132   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_BIN
133   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_OCT
134   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_DEC
135   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_HEX
136   0000              
137   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT
138   0000              
139   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN
140   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT
141   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC
142   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX
143   0000              
144   0000              PUBLIC __CLIB_OPT_STDIO
145   0000              
146   0000              PUBLIC __CLIB_OPT_STDIO_VALID
147   0000              
148   0000              PUBLIC CHAR_CR
149   0000              PUBLIC CHAR_LF
150   0000              PUBLIC CHAR_BS
151   0000              PUBLIC CHAR_ESC
152   0000              PUBLIC CHAR_CAPS
153   0000              PUBLIC CHAR_BELL
154   0000              PUBLIC CHAR_CTRL_C
155   0000              PUBLIC CHAR_CTRL_D
156   0000              PUBLIC CHAR_CTRL_Z
157   0000              PUBLIC CHAR_CURSOR_UC
158   0000              PUBLIC CHAR_CURSOR_LC
159   0000              PUBLIC CHAR_PASSWORD
160   0000              
161   0000              PUBLIC __CLIB_OPT_PRINTF
162   0000              
163   0000              PUBLIC __CLIB_OPT_PRINTF_d
164   0000              PUBLIC __CLIB_OPT_PRINTF_u
165   0000              PUBLIC __CLIB_OPT_PRINTF_x
166   0000              PUBLIC __CLIB_OPT_PRINTF_X
167   0000              PUBLIC __CLIB_OPT_PRINTF_o
168   0000              PUBLIC __CLIB_OPT_PRINTF_n
169   0000              PUBLIC __CLIB_OPT_PRINTF_i
170   0000              PUBLIC __CLIB_OPT_PRINTF_p
171   0000              PUBLIC __CLIB_OPT_PRINTF_B
172   0000              PUBLIC __CLIB_OPT_PRINTF_s
173   0000              PUBLIC __CLIB_OPT_PRINTF_c
174   0000              PUBLIC __CLIB_OPT_PRINTF_I
175   0000              PUBLIC __CLIB_OPT_PRINTF_ld
176   0000              PUBLIC __CLIB_OPT_PRINTF_lu
177   0000              PUBLIC __CLIB_OPT_PRINTF_lx
178   0000              PUBLIC __CLIB_OPT_PRINTF_lX
179   0000              PUBLIC __CLIB_OPT_PRINTF_lo
180   0000              PUBLIC __CLIB_OPT_PRINTF_ln
181   0000              PUBLIC __CLIB_OPT_PRINTF_li
182   0000              PUBLIC __CLIB_OPT_PRINTF_lp
183   0000              PUBLIC __CLIB_OPT_PRINTF_lB
184   0000              PUBLIC __CLIB_OPT_PRINTF_a
185   0000              PUBLIC __CLIB_OPT_PRINTF_A
186   0000              PUBLIC __CLIB_OPT_PRINTF_e
187   0000              PUBLIC __CLIB_OPT_PRINTF_E
188   0000              PUBLIC __CLIB_OPT_PRINTF_f
189   0000              PUBLIC __CLIB_OPT_PRINTF_F
190   0000              PUBLIC __CLIB_OPT_PRINTF_g
191   0000              PUBLIC __CLIB_OPT_PRINTF_G
192   0000              
193   0000              PUBLIC __CLIB_OPT_PRINTF_2
194   0000              
195   0000              PUBLIC __CLIB_OPT_PRINTF_2_lld
196   0000              PUBLIC __CLIB_OPT_PRINTF_2_llu
197   0000              PUBLIC __CLIB_OPT_PRINTF_2_llx
198   0000              PUBLIC __CLIB_OPT_PRINTF_2_llX
199   0000              PUBLIC __CLIB_OPT_PRINTF_2_llo
200   0000              PUBLIC __CLIB_OPT_PRINTF_2_lli
201   0000              
202   0000              PUBLIC __CLIB_OPT_SCANF
203   0000              
204   0000              PUBLIC __CLIB_OPT_SCANF_d
205   0000              PUBLIC __CLIB_OPT_SCANF_u
206   0000              PUBLIC __CLIB_OPT_SCANF_x
207   0000              PUBLIC __CLIB_OPT_SCANF_X
208   0000              PUBLIC __CLIB_OPT_SCANF_o
209   0000              PUBLIC __CLIB_OPT_SCANF_n
210   0000              PUBLIC __CLIB_OPT_SCANF_i
211   0000              PUBLIC __CLIB_OPT_SCANF_p
212   0000              PUBLIC __CLIB_OPT_SCANF_B
213   0000              PUBLIC __CLIB_OPT_SCANF_s
214   0000              PUBLIC __CLIB_OPT_SCANF_c
215   0000              PUBLIC __CLIB_OPT_SCANF_I
216   0000              PUBLIC __CLIB_OPT_SCANF_ld
217   0000              PUBLIC __CLIB_OPT_SCANF_lu
218   0000              PUBLIC __CLIB_OPT_SCANF_lx
219   0000              PUBLIC __CLIB_OPT_SCANF_lX
220   0000              PUBLIC __CLIB_OPT_SCANF_lo
221   0000              PUBLIC __CLIB_OPT_SCANF_ln
222   0000              PUBLIC __CLIB_OPT_SCANF_li
223   0000              PUBLIC __CLIB_OPT_SCANF_lp
224   0000              PUBLIC __CLIB_OPT_SCANF_lB
225   0000              PUBLIC __CLIB_OPT_SCANF_BRACKET
226   0000              PUBLIC __CLIB_OPT_SCANF_a
227   0000              PUBLIC __CLIB_OPT_SCANF_A
228   0000              PUBLIC __CLIB_OPT_SCANF_e
229   0000              PUBLIC __CLIB_OPT_SCANF_E
230   0000              PUBLIC __CLIB_OPT_SCANF_f
231   0000              PUBLIC __CLIB_OPT_SCANF_F
232   0000              PUBLIC __CLIB_OPT_SCANF_g
233   0000              PUBLIC __CLIB_OPT_SCANF_G
234   0000              
235   0000              PUBLIC __CLIB_OPT_SCANF_2
236   0000              
237   0000              PUBLIC __CLIB_OPT_SCANF_2_lld
238   0000              PUBLIC __CLIB_OPT_SCANF_2_llu
239   0000              PUBLIC __CLIB_OPT_SCANF_2_llx
240   0000              PUBLIC __CLIB_OPT_SCANF_2_llX
241   0000              PUBLIC __CLIB_OPT_SCANF_2_llo
242   0000              PUBLIC __CLIB_OPT_SCANF_2_lli
243   0000              
244   0000              PUBLIC __CLIB_OPT_UNROLL
245   0000              
246   0000              PUBLIC __CLIB_OPT_UNROLL_MEMCPY
247   0000              PUBLIC __CLIB_OPT_UNROLL_MEMSET
248   0000              PUBLIC __CLIB_OPT_UNROLL_OTIR
249   0000              PUBLIC __CLIB_OPT_UNROLL_LDIR
250   0000              PUBLIC __CLIB_OPT_UNROLL_USER_SMC
251   0000              PUBLIC __CLIB_OPT_UNROLL_LIB_SMC
252   0000              
253   0000              PUBLIC __CLIB_OPT_STRTOD
254   0000              
255   0000              PUBLIC __CLIB_OPT_STRTOD_NAN
256   0000              PUBLIC __CLIB_OPT_STRTOD_INF
257   0000              PUBLIC __CLIB_OPT_STRTOD_HEX
258   0000              
259   0000              PUBLIC __CLIB_OPT_SORT
260   0000              
261   0000              PUBLIC __CLIB_OPT_SORT_INSERTION
262   0000              PUBLIC __CLIB_OPT_SORT_SHELL
263   0000              PUBLIC __CLIB_OPT_SORT_QUICK
264   0000              
265   0000              PUBLIC __CLIB_OPT_SORT_QSORT
266   0000              
267   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT
268   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_MID
269   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_RAN
270   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION
271   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL
272   0000              
273   0000              PUBLIC __CLIB_OPT_ERROR
274   0000              
275   0000              PUBLIC __CLIB_OPT_ERROR_ENABLED
276   0000              PUBLIC __CLIB_OPT_ERROR_VERBOSE
277   0000              
278   0000              
279   0000              
280   0000              
281   0000              defc __CLIB_OPT_MULTITHREAD = 0x00
282   0000              
283   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_HEAPS = 0x01
284   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FILES = 0x02
285   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FLIST = 0x04
286   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDTBL = 0x08
287   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDSTR = 0x10
288   0000              
289   0000              defc __CLIB_OPT_IMATH = 0
290   0000              
291   0000              defc __CLIB_OPT_IMATH_FAST = 0x0f
292   0000              
293   0000              defc __CLIB_OPT_IMATH_FAST_DIV_UNROLL = 0x01
294   0000              defc __CLIB_OPT_IMATH_FAST_DIV_LZEROS = 0x02
295   0000              defc __CLIB_OPT_IMATH_FAST_MUL_UNROLL = 0x04
296   0000              defc __CLIB_OPT_IMATH_FAST_MUL_LZEROS = 0x08
297   0000              defc __CLIB_OPT_IMATH_FAST_LIA = 0x80
298   0000              
299   0000              defc __CLIB_OPT_IMATH_SELECT = 0x00
300   0000              
301   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_ASR = 0x01
302   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSR = 0x02
303   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSL = 0x04
304   0000              
305   0000              defc __CLIB_OPT_TXT2NUM = 0x04
306   0000              
307   0000              defc __CLIB_OPT_TXT2NUM_INT_BIN = 0x01
308   0000              defc __CLIB_OPT_TXT2NUM_INT_OCT = 0x02
309   0000              defc __CLIB_OPT_TXT2NUM_INT_DEC = 0x04
310   0000              defc __CLIB_OPT_TXT2NUM_INT_HEX = 0x08
311   0000              
312   0000              defc __CLIB_OPT_TXT2NUM_LONG_BIN = 0x10
313   0000              defc __CLIB_OPT_TXT2NUM_LONG_OCT = 0x20
314   0000              defc __CLIB_OPT_TXT2NUM_LONG_DEC = 0x40
315   0000              defc __CLIB_OPT_TXT2NUM_LONG_HEX = 0x80
316   0000              
317   0000              defc __CLIB_OPT_TXT2NUM_SELECT = 0x00
318   0000              
319   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN = 0x01
320   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT = 0x02
321   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC = 0x04
322   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX = 0x08
323   0000              
324   0000              defc __CLIB_OPT_NUM2TXT = 0x00
325   0000              
326   0000              defc __CLIB_OPT_NUM2TXT_INT_BIN = 0x01
327   0000              defc __CLIB_OPT_NUM2TXT_INT_OCT = 0x02
328   0000              defc __CLIB_OPT_NUM2TXT_INT_DEC = 0x04
329   0000              defc __CLIB_OPT_NUM2TXT_INT_HEX = 0x08
330   0000              
331   0000              defc __CLIB_OPT_NUM2TXT_LONG_BIN = 0x10
332   0000              defc __CLIB_OPT_NUM2TXT_LONG_OCT = 0x20
333   0000              defc __CLIB_OPT_NUM2TXT_LONG_DEC = 0x40
334   0000              defc __CLIB_OPT_NUM2TXT_LONG_HEX = 0x80
335   0000              
336   0000              defc __CLIB_OPT_NUM2TXT_SELECT = 0x00
337   0000              
338   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN = 0x01
339   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT = 0x02
340   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC = 0x04
341   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX = 0x08
342   0000              
343   0000              defc __CLIB_OPT_STDIO = 0x00
344   0000              
345   0000              defc __CLIB_OPT_STDIO_VALID = 0x01
346   0000              
347   0000              defc CHAR_CR = 13
348   0000              defc CHAR_LF = 10
349   0000              defc CHAR_BS = 12
350   0000              defc CHAR_ESC = 27
351   0000              defc CHAR_CAPS = 6
352   0000              defc CHAR_BELL = 7
353   0000              defc CHAR_CTRL_C = 3
354   0000              defc CHAR_CTRL_D = 4
355   0000              defc CHAR_CTRL_Z = 26
356   0000              defc CHAR_CURSOR_UC = 45
357   0000              defc CHAR_CURSOR_LC = 95
358   0000              defc CHAR_PASSWORD = 42
359   0000              
360   0000              defc __CLIB_OPT_PRINTF = 0x002ff6ff
361   0000              
362   0000              defc __CLIB_OPT_PRINTF_d = 0x00000001
363   0000              defc __CLIB_OPT_PRINTF_u = 0x00000002
364   0000              defc __CLIB_OPT_PRINTF_x = 0x00000004
365   0000              defc __CLIB_OPT_PRINTF_X = 0x00000008
366   0000              defc __CLIB_OPT_PRINTF_o = 0x00000010
367   0000              defc __CLIB_OPT_PRINTF_n = 0x00000020
368   0000              defc __CLIB_OPT_PRINTF_i = 0x00000040
369   0000              defc __CLIB_OPT_PRINTF_p = 0x00000080
370   0000              defc __CLIB_OPT_PRINTF_B = 0x00000100
371   0000              defc __CLIB_OPT_PRINTF_s = 0x00000200
372   0000              defc __CLIB_OPT_PRINTF_c = 0x00000400
373   0000              defc __CLIB_OPT_PRINTF_I = 0x00000800
374   0000              defc __CLIB_OPT_PRINTF_ld = 0x00001000
375   0000              defc __CLIB_OPT_PRINTF_lu = 0x00002000
376   0000              defc __CLIB_OPT_PRINTF_lx = 0x00004000
377   0000              defc __CLIB_OPT_PRINTF_lX = 0x00008000
378   0000              defc __CLIB_OPT_PRINTF_lo = 0x00010000
379   0000              defc __CLIB_OPT_PRINTF_ln = 0x00020000
380   0000              defc __CLIB_OPT_PRINTF_li = 0x00040000
381   0000              defc __CLIB_OPT_PRINTF_lp = 0x00080000
382   0000              defc __CLIB_OPT_PRINTF_lB = 0x00100000
383   0000              defc __CLIB_OPT_PRINTF_a = 0x00400000
384   0000              defc __CLIB_OPT_PRINTF_A = 0x00800000
385   0000              defc __CLIB_OPT_PRINTF_e = 0x01000000
386   0000              defc __CLIB_OPT_PRINTF_E = 0x02000000
387   0000              defc __CLIB_OPT_PRINTF_f = 0x04000000
388   0000              defc __CLIB_OPT_PRINTF_F = 0x08000000
389   0000              defc __CLIB_OPT_PRINTF_g = 0x10000000
390   0000              defc __CLIB_OPT_PRINTF_G = 0x20000000
391   0000              
392   0000              defc __CLIB_OPT_PRINTF_2 = 0x00
393   0000              
394   0000              defc __CLIB_OPT_PRINTF_2_lld = 0x01
395   0000              defc __CLIB_OPT_PRINTF_2_llu = 0x02
396   0000              defc __CLIB_OPT_PRINTF_2_llx = 0x04
397   0000              defc __CLIB_OPT_PRINTF_2_llX = 0x08
398   0000              defc __CLIB_OPT_PRINTF_2_llo = 0x10
399   0000              defc __CLIB_OPT_PRINTF_2_lli = 0x40
400   0000              
401   0000              defc __CLIB_OPT_SCANF = 0x002ff6ff
402   0000              
403   0000              defc __CLIB_OPT_SCANF_d = 0x00000001
404   0000              defc __CLIB_OPT_SCANF_u = 0x00000002
405   0000              defc __CLIB_OPT_SCANF_x = 0x00000004
406   0000              defc __CLIB_OPT_SCANF_X = 0x00000008
407   0000              defc __CLIB_OPT_SCANF_o = 0x00000010
408   0000              defc __CLIB_OPT_SCANF_n = 0x00000020
409   0000              defc __CLIB_OPT_SCANF_i = 0x00000040
410   0000              defc __CLIB_OPT_SCANF_p = 0x00000080
411   0000              defc __CLIB_OPT_SCANF_B = 0x00000100
412   0000              defc __CLIB_OPT_SCANF_s = 0x00000200
413   0000              defc __CLIB_OPT_SCANF_c = 0x00000400
414   0000              defc __CLIB_OPT_SCANF_I = 0x00000800
415   0000              defc __CLIB_OPT_SCANF_ld = 0x00001000
416   0000              defc __CLIB_OPT_SCANF_lu = 0x00002000
417   0000              defc __CLIB_OPT_SCANF_lx = 0x00004000
418   0000              defc __CLIB_OPT_SCANF_lX = 0x00008000
419   0000              defc __CLIB_OPT_SCANF_lo = 0x00010000
420   0000              defc __CLIB_OPT_SCANF_ln = 0x00020000
421   0000              defc __CLIB_OPT_SCANF_li = 0x00040000
422   0000              defc __CLIB_OPT_SCANF_lp = 0x00080000
423   0000              defc __CLIB_OPT_SCANF_lB = 0x00100000
424   0000              defc __CLIB_OPT_SCANF_BRACKET = 0x00200000
425   0000              defc __CLIB_OPT_SCANF_a = 0x00400000
426   0000              defc __CLIB_OPT_SCANF_A = 0x00800000
427   0000              defc __CLIB_OPT_SCANF_e = 0x01000000
428   0000              defc __CLIB_OPT_SCANF_E = 0x02000000
429   0000              defc __CLIB_OPT_SCANF_f = 0x04000000
430   0000              defc __CLIB_OPT_SCANF_F = 0x08000000
431   0000              defc __CLIB_OPT_SCANF_g = 0x10000000
432   0000              defc __CLIB_OPT_SCANF_G = 0x20000000
433   0000              
434   0000              defc __CLIB_OPT_SCANF_2 = 0x00
435   0000              
436   0000              defc __CLIB_OPT_SCANF_2_lld = 0x01
437   0000              defc __CLIB_OPT_SCANF_2_llu = 0x02
438   0000              defc __CLIB_OPT_SCANF_2_llx = 0x04
439   0000              defc __CLIB_OPT_SCANF_2_llX = 0x08
440   0000              defc __CLIB_OPT_SCANF_2_llo = 0x10
441   0000              defc __CLIB_OPT_SCANF_2_lli = 0x40
442   0000              
443   0000              defc __CLIB_OPT_UNROLL = 0x00
444   0000              
445   0000              defc __CLIB_OPT_UNROLL_MEMCPY = 0x01
446   0000              defc __CLIB_OPT_UNROLL_MEMSET = 0x02
447   0000              defc __CLIB_OPT_UNROLL_OTIR = 0x10
448   0000              defc __CLIB_OPT_UNROLL_LDIR = 0x20
449   0000              defc __CLIB_OPT_UNROLL_USER_SMC = 0x40
450   0000              defc __CLIB_OPT_UNROLL_LIB_SMC = 0x80
451   0000              
452   0000              defc __CLIB_OPT_STRTOD = 0x00
453   0000              
454   0000              defc __CLIB_OPT_STRTOD_NAN = 0x01
455   0000              defc __CLIB_OPT_STRTOD_INF = 0x01
456   0000              defc __CLIB_OPT_STRTOD_HEX = 0x02
457   0000              
458   0000              defc __CLIB_OPT_SORT = 1
459   0000              
460   0000              defc __CLIB_OPT_SORT_INSERTION = 0
461   0000              defc __CLIB_OPT_SORT_SHELL = 1
462   0000              defc __CLIB_OPT_SORT_QUICK = 2
463   0000              
464   0000              defc __CLIB_OPT_SORT_QSORT = 0x0c
465   0000              
466   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT = 0x3
467   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_MID = 0x0
468   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_RAN = 0x1
469   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION = 0x04
470   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL = 0x08
471   0000              
472   0000              defc __CLIB_OPT_ERROR = 0x00
473   0000              
474   0000              defc __CLIB_OPT_ERROR_ENABLED = 0x01
475   0000              defc __CLIB_OPT_ERROR_VERBOSE = 0x02
476   0000              
477   0000              
478   0000              
479   0000              
480   0000              
481   0000              
482   0000              
483   0000              
484   0000              
485   0000              
486   0000              
487   0000              
488   0000              
489   0000              PUBLIC __EOK
490   0000              PUBLIC __EACCES
491   0000              PUBLIC __EBADF
492   0000              PUBLIC __EBDFD
493   0000              PUBLIC __EDOM
494   0000              PUBLIC __EFBIG
495   0000              PUBLIC __EINVAL
496   0000              PUBLIC __EIO
497   0000              PUBLIC __EMFILE
498   0000              PUBLIC __ENFILE
499   0000              PUBLIC __ENOLCK
500   0000              PUBLIC __ENOMEM
501   0000              PUBLIC __ENOTSUP
502   0000              PUBLIC __EOVERFLOW
503   0000              PUBLIC __ERANGE
504   0000              PUBLIC __ESTAT
505   0000              PUBLIC __EAGAIN
506   0000              PUBLIC __EWOULDBLOCK
507   0000              
508   0000              PUBLIC __ERROR_NEXT
509   0000              
510   0000              PUBLIC STDIO_SEEK_SET
511   0000              PUBLIC STDIO_SEEK_CUR
512   0000              PUBLIC STDIO_SEEK_END
513   0000              
514   0000              PUBLIC STDIO_MSG_PUTC
515   0000              PUBLIC STDIO_MSG_WRIT
516   0000              PUBLIC STDIO_MSG_GETC
517   0000              PUBLIC STDIO_MSG_EATC
518   0000              PUBLIC STDIO_MSG_READ
519   0000              PUBLIC STDIO_MSG_SEEK
520   0000              PUBLIC STDIO_MSG_ICTL
521   0000              PUBLIC STDIO_MSG_FLSH
522   0000              PUBLIC STDIO_MSG_CLOS
523   0000              
524   0000              PUBLIC ITERM_MSG_GETC
525   0000              PUBLIC ITERM_MSG_REJECT
526   0000              PUBLIC ITERM_MSG_INTERRUPT
527   0000              PUBLIC ITERM_MSG_PUTC
528   0000              PUBLIC ITERM_MSG_PRINT_CURSOR
529   0000              PUBLIC ITERM_MSG_ERASE_CURSOR
530   0000              PUBLIC ITERM_MSG_ERASE_CURSOR_PWD
531   0000              PUBLIC ITERM_MSG_BS
532   0000              PUBLIC ITERM_MSG_BS_PWD
533   0000              PUBLIC ITERM_MSG_READLINE_BEGIN
534   0000              PUBLIC ITERM_MSG_READLINE_END
535   0000              PUBLIC ITERM_MSG_READLINE_SCROLL_LIMIT
536   0000              PUBLIC ITERM_MSG_BELL
537   0000              
538   0000              PUBLIC __MESSAGE_ITERM_NEXT__
539   0000              
540   0000              PUBLIC OTERM_MSG_PUTC
541   0000              PUBLIC OTERM_MSG_TTY
542   0000              PUBLIC OTERM_MSG_FZX_PUTC
543   0000              PUBLIC OTERM_MSG_PRINTC
544   0000              PUBLIC OTERM_MSG_SCROLL
545   0000              PUBLIC OTERM_MSG_SCROLL_LIMIT
546   0000              PUBLIC OTERM_MSG_CLS
547   0000              PUBLIC OTERM_MSG_PAUSE
548   0000              PUBLIC OTERM_MSG_BELL
549   0000              PUBLIC OTERM_MSG_PSCROLL
550   0000              PUBLIC OTERM_MSG_FZX_GET_XOR_DRAW
551   0000              
552   0000              PUBLIC __MESSAGE_OTERM_NEXT__
553   0000              
554   0000              PUBLIC ICHAR_MSG_GETC
555   0000              PUBLIC OCHAR_MSG_PUTC_BIN
556   0000              PUBLIC OCHAR_MSG_PUTC
557   0000              
558   0000              PUBLIC __MESSAGE_NEXT__
559   0000              
560   0000              PUBLIC mtx_plain
561   0000              PUBLIC mtx_recursive
562   0000              PUBLIC mtx_timed
563   0000              
564   0000              PUBLIC thrd_success
565   0000              PUBLIC thrd_error
566   0000              PUBLIC thrd_nomem
567   0000              PUBLIC thrd_busy
568   0000              PUBLIC thrd_timedout
569   0000              
570   0000              PUBLIC IOCTL_RESET
571   0000              
572   0000              PUBLIC IOCTL_ITERM_ECHO
573   0000              PUBLIC IOCTL_ITERM_PASS
574   0000              PUBLIC IOCTL_ITERM_LINE
575   0000              PUBLIC IOCTL_ITERM_COOK
576   0000              PUBLIC IOCTL_ITERM_CAPS
577   0000              PUBLIC IOCTL_ITERM_CRLF
578   0000              PUBLIC IOCTL_ITERM_CURS
579   0000              
580   0000              PUBLIC IOCTL_ITERM_TIE
581   0000              PUBLIC IOCTL_ITERM_GET_EDITBUF
582   0000              PUBLIC IOCTL_ITERM_SET_EDITBUF
583   0000              
584   0000              PUBLIC IOCTL_OTERM_PAGE
585   0000              PUBLIC IOCTL_OTERM_PAUSE
586   0000              PUBLIC IOCTL_OTERM_COOK
587   0000              PUBLIC IOCTL_OTERM_CRLF
588   0000              PUBLIC IOCTL_OTERM_CLEAR
589   0000              PUBLIC IOCTL_OTERM_SIGNAL
590   0000              PUBLIC IOCTL_OTERM_BELL
591   0000              
592   0000              PUBLIC IOCTL_OTERM_CLS
593   0000              PUBLIC IOCTL_OTERM_RESET_SCROLL
594   0000              PUBLIC IOCTL_OTERM_GET_WINDOW_COORD
595   0000              PUBLIC IOCTL_OTERM_SET_WINDOW_COORD
596   0000              PUBLIC IOCTL_OTERM_GET_WINDOW_RECT
597   0000              PUBLIC IOCTL_OTERM_SET_WINDOW_RECT
598   0000              PUBLIC IOCTL_OTERM_GET_CURSOR_COORD
599   0000              PUBLIC IOCTL_OTERM_SET_CURSOR_COORD
600   0000              PUBLIC IOCTL_OTERM_GET_OTERM
601   0000              PUBLIC IOCTL_OTERM_SCROLL
602   0000              PUBLIC IOCTL_OTERM_FONT
603   0000              PUBLIC IOCTL_OTERM_SCROLL_LIMIT
604   0000              
605   0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_COORD
606   0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_COORD
607   0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_RECT
608   0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_RECT
609   0000              PUBLIC IOCTL_OTERM_FZX_LEFT_MARGIN
610   0000              PUBLIC IOCTL_OTERM_FZX_LINE_SPACING
611   0000              PUBLIC IOCTL_OTERM_FZX_SPACE_EXPAND
612   0000              PUBLIC IOCTL_OTERM_FZX_GET_FZX_STATE
613   0000              PUBLIC IOCTL_OTERM_FZX_SET_FZX_STATE
614   0000              
615   0000              PUBLIC IOCTL_ICHAR_CRLF
616   0000              
617   0000              PUBLIC IOCTL_OCHAR_CRLF
618   0000              
619   0000              
620   0000              
621   0000              
622   0000              defc __EOK = 0
623   0000              defc __EACCES = 1
624   0000              defc __EBADF = 2
625   0000              defc __EBDFD = 3
626   0000              defc __EDOM = 4
627   0000              defc __EFBIG = 5
628   0000              defc __EINVAL = 6
629   0000              defc __EIO = 7
630   0000              defc __EMFILE = 8
631   0000              defc __ENFILE = 9
632   0000              defc __ENOLCK = 10
633   0000              defc __ENOMEM = 11
634   0000              defc __ENOTSUP = 12
635   0000              defc __EOVERFLOW = 13
636   0000              defc __ERANGE = 14
637   0000              defc __ESTAT = 15
638   0000              defc __EAGAIN = 16
639   0000              defc __EWOULDBLOCK = 16
640   0000              
641   0000              defc __ERROR_NEXT = 50
642   0000              
643   0000              defc STDIO_SEEK_SET = 0
644   0000              defc STDIO_SEEK_CUR = 1
645   0000              defc STDIO_SEEK_END = 2
646   0000              
647   0000              defc STDIO_MSG_PUTC = 1
648   0000              defc STDIO_MSG_WRIT = 2
649   0000              defc STDIO_MSG_GETC = 3
650   0000              defc STDIO_MSG_EATC = 4
651   0000              defc STDIO_MSG_READ = 5
652   0000              defc STDIO_MSG_SEEK = 6
653   0000              defc STDIO_MSG_ICTL = 7
654   0000              defc STDIO_MSG_FLSH = 8
655   0000              defc STDIO_MSG_CLOS = 9
656   0000              
657   0000              defc ITERM_MSG_GETC = 15
658   0000              defc ITERM_MSG_REJECT = 16
659   0000              defc ITERM_MSG_INTERRUPT = 17
660   0000              defc ITERM_MSG_PUTC = 18
661   0000              defc ITERM_MSG_PRINT_CURSOR = 19
662   0000              defc ITERM_MSG_ERASE_CURSOR = 20
663   0000              defc ITERM_MSG_ERASE_CURSOR_PWD = 21
664   0000              defc ITERM_MSG_BS = 22
665   0000              defc ITERM_MSG_BS_PWD = 23
666   0000              defc ITERM_MSG_READLINE_BEGIN = 24
667   0000              defc ITERM_MSG_READLINE_END = 25
668   0000              defc ITERM_MSG_READLINE_SCROLL_LIMIT = 26
669   0000              defc ITERM_MSG_BELL = 27
670   0000              
671   0000              defc __MESSAGE_ITERM_NEXT__ = 28
672   0000              
673   0000              defc OTERM_MSG_PUTC = 30
674   0000              defc OTERM_MSG_TTY = 31
675   0000              defc OTERM_MSG_FZX_PUTC = 32
676   0000              defc OTERM_MSG_PRINTC = 33
677   0000              defc OTERM_MSG_SCROLL = 34
678   0000              defc OTERM_MSG_SCROLL_LIMIT = 35
679   0000              defc OTERM_MSG_CLS = 36
680   0000              defc OTERM_MSG_PAUSE = 37
681   0000              defc OTERM_MSG_BELL = 38
682   0000              defc OTERM_MSG_PSCROLL = 39
683   0000              defc OTERM_MSG_FZX_GET_XOR_DRAW = 40
684   0000              
685   0000              defc __MESSAGE_OTERM_NEXT__ = 41
686   0000              
687   0000              defc ICHAR_MSG_GETC = 15
688   0000              defc OCHAR_MSG_PUTC_BIN = 30
689   0000              defc OCHAR_MSG_PUTC = 33
690   0000              
691   0000              defc __MESSAGE_NEXT__ = 45
692   0000              
693   0000              defc mtx_plain = 0x01
694   0000              defc mtx_recursive = 0x02
695   0000              defc mtx_timed = 0x04
696   0000              
697   0000              defc thrd_success = 0x00
698   0000              defc thrd_error = 0x01
699   0000              defc thrd_nomem = 0x02
700   0000              defc thrd_busy = 0x04
701   0000              defc thrd_timedout = 0x08
702   0000              
703   0000              defc IOCTL_RESET = 0x0000
704   0000              
705   0000              defc IOCTL_ITERM_ECHO = 0xc081
706   0000              defc IOCTL_ITERM_PASS = 0xc041
707   0000              defc IOCTL_ITERM_LINE = 0xc021
708   0000              defc IOCTL_ITERM_COOK = 0xc011
709   0000              defc IOCTL_ITERM_CAPS = 0xc009
710   0000              defc IOCTL_ITERM_CRLF = 0xc101
711   0000              defc IOCTL_ITERM_CURS = 0xc201
712   0000              
713   0000              defc IOCTL_ITERM_TIE = 0x0201
714   0000              defc IOCTL_ITERM_GET_EDITBUF = 0x0381
715   0000              defc IOCTL_ITERM_SET_EDITBUF = 0x0301
716   0000              
717   0000              defc IOCTL_OTERM_PAGE = 0xc082
718   0000              defc IOCTL_OTERM_PAUSE = 0xc042
719   0000              defc IOCTL_OTERM_COOK = 0xc022
720   0000              defc IOCTL_OTERM_CRLF = 0xc012
721   0000              defc IOCTL_OTERM_CLEAR = 0xe002
722   0000              defc IOCTL_OTERM_SIGNAL = 0xc202
723   0000              defc IOCTL_OTERM_BELL = 0xc102
724   0000              
725   0000              defc IOCTL_OTERM_CLS = 0x0102
726   0000              defc IOCTL_OTERM_RESET_SCROLL = 0x0202
727   0000              defc IOCTL_OTERM_GET_WINDOW_COORD = 0x0382
728   0000              defc IOCTL_OTERM_SET_WINDOW_COORD = 0x0302
729   0000              defc IOCTL_OTERM_GET_WINDOW_RECT = 0x0482
730   0000              defc IOCTL_OTERM_SET_WINDOW_RECT = 0x0402
731   0000              defc IOCTL_OTERM_GET_CURSOR_COORD = 0x0582
732   0000              defc IOCTL_OTERM_SET_CURSOR_COORD = 0x0502
733   0000              defc IOCTL_OTERM_GET_OTERM = 0x0602
734   0000              defc IOCTL_OTERM_SCROLL = 0x0702
735   0000              defc IOCTL_OTERM_FONT = 0x0802
736   0000              defc IOCTL_OTERM_SCROLL_LIMIT = 0x0902
737   0000              
738   0000              defc IOCTL_OTERM_FZX_GET_PAPER_COORD = 0x0a82
739   0000              defc IOCTL_OTERM_FZX_SET_PAPER_COORD = 0x0a02
740   0000              defc IOCTL_OTERM_FZX_GET_PAPER_RECT = 0x0b82
741   0000              defc IOCTL_OTERM_FZX_SET_PAPER_RECT = 0x0b02
742   0000              defc IOCTL_OTERM_FZX_LEFT_MARGIN = 0x0c02
743   0000              defc IOCTL_OTERM_FZX_LINE_SPACING = 0x0d02
744   0000              defc IOCTL_OTERM_FZX_SPACE_EXPAND = 0x0e02
745   0000              defc IOCTL_OTERM_FZX_GET_FZX_STATE = 0x0f82
746   0000              defc IOCTL_OTERM_FZX_SET_FZX_STATE = 0x0f02
747   0000              
748   0000              defc IOCTL_ICHAR_CRLF = 0xc103
749   0000              
750   0000              defc IOCTL_OCHAR_CRLF = 0xc014
751   0000              
752   0000              
753   0000              
754   0000              
755   0000              
756   0000              
757   0000              
758   0000              
759   0000              
760   0000              
761   0000              
762   0000              
763   0000              
764   0000              
765   0000              
766   0000              
767   0000              
768   0000              
769   0000              
770   0000              
771   0000              
772   0000              
773   0000              
774   0000              
775   0000              
776   0000              
777   0000              
778   0000              
779   0000              ENDIF
780   0000              
781   0000              
82    0000              
83    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
84    0000              ;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
85    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
86    0000              
87    0000              include "../crt_defaults.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000                 ; crt configuration
7     0000              
8     0000                 defc DEF__crt_org_code              = 0       ;; org of code section
9     0000                 defc DEF__crt_org_data              = 0       ;; org of data section (0 or -1 means follow code, -1 means generate separate binary)
10    0000                 defc DEF__crt_org_bss               = 0       ;; org of bss section (0 or -1 means follow data, -1 means generate separate binary)
11    0000              
12    0000                 defc DEF__crt_model                 = 0       ;; 0 = ram model, 1 = rom model, 2 = compressed rom model
13    0000                 defc DEF__crt_enforce_snames        = 3       ;; bit 0 set = enforce BSS name, bit 1 set = enforce DATA name
14    0000              
15    0000                 defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
16    0000                 defc DEF__crt_stack_size            = 512     ;; minimum size reserved for stack when automatically allocating memory for the malloc heap
17    0000              
18    0000                 defc DEF__crt_initialize_bss        = 0       ;; generate code to initialize bss section at startup
19    0000              
20    0000                 defc DEF__crt_include_preamble      = 0       ;; if non-zero, user supplies code in file "crt_preamble.asm" that is inserted at the start of the binary
21    0000              
22    0000                 defc DEF__crt_org_vector_table      = 0       ;; if negative and Z88DK supplies page zero code, creates a section "code_vector" aligned to a page boundary to hold int vectors
23    0000                 defc DEF__crt_io_vector_base        = 0       ;; io vector base address for z180 internal peripherals
24    0000                 defc DEF__crt_interrupt_mode        = -1      ;; if 0-2 crt inserts appropriate im x instruction
25    0000                 defc DEF__crt_interrupt_mode_exit   = -1      ;; if 0-2 crt inserts appropriate im x instruction on exit
26    0000              
27    0000                 defc DEF__crt_enable_commandline    = 2       ;; generate argc and argv from command line (targets without command line will get argc=1, argv[0]="", argv[1]=NULL)
28    0000                 defc DEF__crt_enable_commandline_ex = 0       ;; target specific bits and bits for io redirection and piping
29    0000                 defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
30    0000                 defc DEF__crt_enable_close          = 1       ;; if non-zero, close files on exit
31    0000              
32    0000                 defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
33    0000                 defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
34    0000              
35    0000                 defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
36    0000                 defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
37    0000                 defc DEF__crt_enable_trap           = 0       ;; if non-zero and in some crts with code org = 0 and Z180 target, a jump to user code to service traps is inserted
38    0000              
39    0000                 ; clib defaults
40    0000              
41    0000                 defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
42    0000                 defc DEF__clib_quickexit_stack_size = 32      ;; max number of functions that can be registered with at_quickexit()
43    0000              
44    0000                 defc DEF__clib_malloc_heap_size     = -1      ;; size of malloc heap (0 = do not create a heap, -1 = automatically place heap between end of bss section and bottom of stack)
45    0000                 defc DEF__clib_stdio_heap_size      = 256     ;; size of stdio heap (0 = do not allocate bytes for opening of files)
46    0000              
47    0000                 defc DEF__clib_balloc_table_size    = 0       ;; number of queues created for balloc block memory allocator
48    0000              
49    0000                 defc DEF__clib_fopen_max            = 8       ;; max number of FILE*
50    0000                 defc DEF__clib_open_max             = 8       ;; max number of open files
51    0000              
52    0000              ;; end crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
53    0000              
88    0000              include "crt_config.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __CRTCFG = -1
7     0000              
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000                 ;; user supplied crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000                 INCLUDE "crt_cfg.inc"
13    0000              
14    0000              ENDIF
15    0000              
16    0000              IF __CRTCFG = 0
17    0000              
18    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000                 ;; embedded ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
22    0000                 defc TAR__crt_org_code              = 0
23    0000                 defc TAR__crt_org_data              = 0
24    0000                 defc TAR__crt_org_bss               = 0
25    0000              
26    0000                 defc TAR__crt_model                 = 0
27    0000              
28    0000                 defc TAR__register_sp               = 0
29    0000                 defc TAR__crt_stack_size            = 512
30    0000              
31    0000                 defc TAR__crt_initialize_bss        = 0
32    0000              
33    0000                 defc TAR__crt_include_preamble      = 0
34    0000              
35    0000                 defc TAR__crt_org_vector_table      = 0
36    0000              
37    0000                 defc TAR__crt_interrupt_mode        = -1
38    0000                 defc TAR__crt_interrupt_mode_exit   = -1
39    0000              
40    0000                 defc TAR__crt_enable_commandline    = 0
41    0000                 defc TAR__crt_enable_commandline_ex = 0
42    0000                 defc TAR__crt_enable_restart        = 0
43    0000                 defc TAR__crt_enable_close          = 1
44    0000              
45    0000                 defc TAR__crt_enable_eidi           = 0x13
46    0000                 defc TAR__crt_on_exit               = 0x10001
47    0000              
48    0000                 defc TAR__crt_enable_rst            = 0
49    0000                 defc TAR__crt_enable_nmi            = 0
50    0000              
51    0000                 ; clib defaults
52    0000              
53    0000                 defc TAR__clib_exit_stack_size      = 0
54    0000                 defc TAR__clib_quickexit_stack_size = 0
55    0000              
56    0000                 defc TAR__clib_malloc_heap_size     = -1
57    0000                 defc TAR__clib_stdio_heap_size      = 128
58    0000              
59    0000                 defc TAR__clib_balloc_table_size    = 0
60    0000              
61    0000                 defc TAR__clib_fopen_max            = 0
62    0000                 defc TAR__clib_open_max             = 0
63    0000              
64    0000              ENDIF
65    0000              
66    0000              IF __CRTCFG = 1
67    0000              
68    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
69    0000                 ;; embedded rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
70    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
71    0000              
72    0000                 defc TAR__crt_org_code              = 0
73    0000                 defc TAR__crt_org_data              = 32768
74    0000                 defc TAR__crt_org_bss               = -1
75    0000              
76    0000                 defc TAR__crt_model                 = 1
77    0000              
78    0000                 defc TAR__register_sp               = 0
79    0000                 defc TAR__crt_stack_size            = 512
80    0000              
81    0000                 defc TAR__crt_initialize_bss        = 1
82    0000              
83    0000                 defc TAR__crt_include_preamble      = 0
84    0000              
85    0000                 defc TAR__crt_org_vector_table      = 0
86    0000              
87    0000                 defc TAR__crt_interrupt_mode        = -1
88    0000                 defc TAR__crt_interrupt_mode_exit   = -1
89    0000              
90    0000                 defc TAR__crt_enable_commandline    = 0
91    0000                 defc TAR__crt_enable_commandline_ex = 0
92    0000                 defc TAR__crt_enable_restart        = 0
93    0000                 defc TAR__crt_enable_close          = 1
94    0000              
95    0000                 defc TAR__crt_enable_eidi           = 0x13
96    0000                 defc TAR__crt_on_exit               = 0x10001
97    0000              
98    0000                 defc TAR__crt_enable_rst            = 0
99    0000                 defc TAR__crt_enable_nmi            = 0
100   0000              
101   0000                 ; clib defaults
102   0000              
103   0000                 defc TAR__clib_exit_stack_size      = 0
104   0000                 defc TAR__clib_quickexit_stack_size = 0
105   0000              
106   0000                 defc TAR__clib_malloc_heap_size     = -1
107   0000                 defc TAR__clib_stdio_heap_size      = 128
108   0000              
109   0000                 defc TAR__clib_balloc_table_size    = 0
110   0000              
111   0000                 defc TAR__clib_fopen_max            = 0
112   0000                 defc TAR__clib_open_max             = 0
113   0000              
114   0000              ENDIF
115   0000              
116   0000              IF __CRTCFG = 2
117   0000              
118   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
119   0000                 ;; embedded compressed rom model ;;;;;;;;;;;;;;;;;;;;;;;;;;;
120   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
121   0000              
122   0000                 defc TAR__crt_org_code              = 0
123   0000                 defc TAR__crt_org_data              = 32768
124   0000                 defc TAR__crt_org_bss               = -1
125   0000              
126   0000                 defc TAR__crt_model                 = 2
127   0000              
128   0000                 defc TAR__register_sp               = 0
129   0000                 defc TAR__crt_stack_size            = 512
130   0000              
131   0000                 defc TAR__crt_initialize_bss        = 1
132   0000              
133   0000                 defc TAR__crt_include_preamble      = 0
134   0000              
135   0000                 defc TAR__crt_org_vector_table      = 0
136   0000              
137   0000                 defc TAR__crt_interrupt_mode        = -1
138   0000                 defc TAR__crt_interrupt_mode_exit   = -1
139   0000              
140   0000                 defc TAR__crt_enable_commandline    = 0
141   0000                 defc TAR__crt_enable_commandline_ex = 0
142   0000                 defc TAR__crt_enable_restart        = 0
143   0000                 defc TAR__crt_enable_close          = 1
144   0000              
145   0000                 defc TAR__crt_enable_eidi           = 0x13
146   0000                 defc TAR__crt_on_exit               = 0x10001
147   0000              
148   0000                 defc TAR__crt_enable_rst            = 0
149   0000                 defc TAR__crt_enable_nmi            = 0
150   0000              
151   0000                 ; clib defaults
152   0000              
153   0000                 defc TAR__clib_exit_stack_size      = 0
154   0000                 defc TAR__clib_quickexit_stack_size = 0
155   0000              
156   0000                 defc TAR__clib_malloc_heap_size     = -1
157   0000                 defc TAR__clib_stdio_heap_size      = 128
158   0000              
159   0000                 defc TAR__clib_balloc_table_size    = 0
160   0000              
161   0000                 defc TAR__clib_fopen_max            = 0
162   0000                 defc TAR__clib_open_max             = 0
163   0000              
164   0000              ENDIF
165   0000              
166   0000              ;; end crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
167   0000              
89    0000              
90    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
91    0000              ;; crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
92    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
93    0000              
94    0000              
95    0000                 IFDEF CRT_ORG_CODE
96    0000              
97    0000                    defc __crt_org_code = CRT_ORG_CODE
98    0000              
99    0000                 ELSE
100   0000              
101   0000                    IFDEF TAR__crt_org_code
102   0000              
103   0000                       defc __crt_org_code = TAR__crt_org_code
104   0000              
105   0000                    ELSE
106   0000              
107   0000                       defc __crt_org_code = DEF__crt_org_code
108   0000              
109   0000                    ENDIF
110   0000              
111   0000                 ENDIF
112   0000              
113   0000                 IFDEF REGISTER_SP
114   0000              
115   0000                    defc __register_sp = REGISTER_SP
116   0000              
117   0000                 ELSE
118   0000              
119   0000                    IFDEF STACKPTR
120   0000              
121   0000                       defc __register_sp = STACKPTR
122   0000              
123   0000                    ELSE
124   0000              
125   0000                       IFDEF TAR__register_sp
126   0000              
127   0000                          defc __register_sp = TAR__register_sp
128   0000              
129   0000                       ELSE
130   0000              
131   0000                          defc __register_sp = DEF__register_sp
132   0000              
133   0000                       ENDIF
134   0000              
135   0000                    ENDIF
136   0000              
137   0000                 ENDIF
138   0000              
139   0000              
140   0000                 IFDEF CRT_STACK_SIZE
141   0000              
142   0000                    defc __crt_stack_size = CRT_STACK_SIZE
143   0000              
144   0000                 ELSE
145   0000              
146   0000                    IFDEF TAR__crt_stack_size
147   0000              
148   0000                       defc __crt_stack_size = TAR__crt_stack_size
149   0000              
150   0000                    ELSE
151   0000              
152   0000                       defc __crt_stack_size = DEF__crt_stack_size
153   0000              
154   0000                    ENDIF
155   0000              
156   0000                 ENDIF
157   0000              
158   0000              
159   0000                 IFDEF CRT_ORG_DATA
160   0000              
161   0000                    defc __crt_org_data = CRT_ORG_DATA
162   0000              
163   0000                 ELSE
164   0000              
165   0000                    IFDEF TAR__crt_org_data
166   0000              
167   0000                       defc __crt_org_data = TAR__crt_org_data
168   0000              
169   0000                    ELSE
170   0000              
171   0000                       defc __crt_org_data = DEF__crt_org_data
172   0000              
173   0000                    ENDIF
174   0000              
175   0000                 ENDIF
176   0000              
177   0000              
178   0000                 IFDEF CRT_ORG_BSS
179   0000              
180   0000                    defc __crt_org_bss = CRT_ORG_BSS
181   0000              
182   0000                 ELSE
183   0000              
184   0000                    IFDEF TAR__crt_org_bss
185   0000              
186   0000                       defc __crt_org_bss = TAR__crt_org_bss
187   0000              
188   0000                    ELSE
189   0000              
190   0000                       defc __crt_org_bss = DEF__crt_org_bss
191   0000              
192   0000                    ENDIF
193   0000              
194   0000                 ENDIF
195   0000              
196   0000              
197   0000                 IFDEF CRT_MODEL
198   0000              
199   0000                    defc __crt_model = CRT_MODEL
200   0000              
201   0000                 ELSE
202   0000              
203   0000                    IFDEF TAR__crt_model
204   0000              
205   0000                       defc __crt_model = TAR__crt_model
206   0000              
207   0000                    ELSE
208   0000              
209   0000                       defc __crt_model = DEF__crt_model
210   0000              
211   0000                    ENDIF
212   0000              
213   0000                 ENDIF
214   0000              
215   0000                 IFDEF CRT_INITIALIZE_BSS
216   0000              
217   0000                    defc __crt_initialize_bss = CRT_INITIALIZE_BSS
218   0000              
219   0000                 ELSE
220   0000              
221   0000                    IFDEF TAR__crt_initialize_bss
222   0000              
223   0000                       defc __crt_initialize_bss = TAR__crt_initialize_bss
224   0000              
225   0000                    ELSE
226   0000              
227   0000                       defc __crt_initialize_bss = DEF__crt_initialize_bss
228   0000              
229   0000                    ENDIF
230   0000              
231   0000                 ENDIF
232   0000              
233   0000              
234   0000                 IFDEF CRT_INCLUDE_PREAMBLE
235   0000              
236   0000                    defc __crt_include_preamble = CRT_INCLUDE_PREAMBLE
237   0000              
238   0000                 ELSE
239   0000              
240   0000                    IFDEF TAR__crt_include_preamble
241   0000              
242   0000                       defc __crt_include_preamble = TAR__crt_include_preamble
243   0000              
244   0000                    ELSE
245   0000              
246   0000                       defc __crt_include_preamble = DEF__crt_include_preamble
247   0000              
248   0000                    ENDIF
249   0000              
250   0000                 ENDIF
251   0000              
252   0000                 IFDEF CRT_ORG_VECTOR_TABLE
253   0000              
254   0000                    defc __crt_org_vector_table = CRT_ORG_VECTOR_TABLE
255   0000              
256   0000                 ELSE
257   0000              
258   0000                    IFDEF TAR__crt_org_vector_table
259   0000              
260   0000                       defc __crt_org_vector_table = TAR__crt_org_vector_table
261   0000              
262   0000                    ELSE
263   0000              
264   0000                       defc __crt_org_vector_table = DEF__crt_org_vector_table
265   0000              
266   0000                    ENDIF
267   0000              
268   0000                 ENDIF
269   0000              
270   0000              IF __Z180
271   0000              
272   0000                 IFDEF CRT_IO_VECTOR_BASE
273   0000              
274   0000                    defc __crt_io_vector_base = CRT_IO_VECTOR_BASE
275   0000              
276   0000                 ELSE
277   0000              
278   0000                    IFDEF TAR__crt_io_vector_base
279   0000              
280   0000                       defc __crt_io_vector_base = TAR__crt_io_vector_base
281   0000              
282   0000                    ELSE
283   0000              
284   0000                       defc __crt_io_vector_base = DEF__crt_io_vector_base
285   0000              
286   0000                    ENDIF
287   0000              
288   0000                 ENDIF
289   0000              
290   0000              ENDIF
291   0000              
292   0000                 IFDEF CRT_INTERRUPT_MODE
293   0000              
294   0000                    defc __crt_interrupt_mode = CRT_INTERRUPT_MODE
295   0000              
296   0000                 ELSE
297   0000              
298   0000                    IFDEF TAR__crt_interrupt_mode
299   0000              
300   0000                       defc __crt_interrupt_mode = TAR__crt_interrupt_mode
301   0000              
302   0000                    ELSE
303   0000              
304   0000                       defc __crt_interrupt_mode = DEF__crt_interrupt_mode
305   0000              
306   0000                    ENDIF
307   0000              
308   0000                 ENDIF
309   0000              
310   0000              
311   0000                 IFDEF CRT_INTERRUPT_MODE_EXIT
312   0000              
313   0000                    defc __crt_interrupt_mode_exit = CRT_INTERRUPT_MODE_EXIT
314   0000              
315   0000                 ELSE
316   0000              
317   0000                    IFDEF TAR__crt_interrupt_mode_exit
318   0000              
319   0000                       defc __crt_interrupt_mode_exit = TAR__crt_interrupt_mode_exit
320   0000              
321   0000                    ELSE
322   0000              
323   0000                       defc __crt_interrupt_mode_exit = DEF__crt_interrupt_mode_exit
324   0000              
325   0000                    ENDIF
326   0000              
327   0000                 ENDIF
328   0000              
329   0000              
330   0000                 IFDEF CRT_ENABLE_COMMANDLINE
331   0000              
332   0000                    defc __crt_enable_commandline = CRT_ENABLE_COMMANDLINE
333   0000              
334   0000                 ELSE
335   0000              
336   0000                    IFDEF TAR__crt_enable_commandline
337   0000              
338   0000                       defc __crt_enable_commandline = TAR__crt_enable_commandline
339   0000              
340   0000                    ELSE
341   0000              
342   0000                       defc __crt_enable_commandline = DEF__crt_enable_commandline
343   0000              
344   0000                    ENDIF
345   0000              
346   0000                 ENDIF
347   0000              
348   0000              
349   0000                 IFDEF CRT_ENABLE_COMMANDLINE_EX
350   0000              
351   0000                    defc __crt_enable_commandline_ex = CRT_ENABLE_COMMANDLINE_EX
352   0000              
353   0000                 ELSE
354   0000              
355   0000                    IFDEF TAR__crt_enable_commandline_ex
356   0000              
357   0000                       defc __crt_enable_commandline_ex = TAR__crt_enable_commandline_ex
358   0000              
359   0000                    ELSE
360   0000              
361   0000                       defc __crt_enable_commandline_ex = DEF__crt_enable_commandline_ex
362   0000              
363   0000                    ENDIF
364   0000              
365   0000                 ENDIF
366   0000              
367   0000              
368   0000                 IFDEF CRT_ENABLE_RESTART
369   0000              
370   0000                    defc __crt_enable_restart = CRT_ENABLE_RESTART
371   0000              
372   0000                 ELSE
373   0000              
374   0000                    IFDEF TAR__crt_enable_restart
375   0000              
376   0000                       defc __crt_enable_restart = TAR__crt_enable_restart
377   0000              
378   0000                    ELSE
379   0000              
380   0000                       defc __crt_enable_restart = DEF__crt_enable_restart
381   0000              
382   0000                    ENDIF
383   0000              
384   0000                 ENDIF
385   0000              
386   0000              
387   0000                 IFDEF CRT_ENABLE_CLOSE
388   0000              
389   0000                    defc __crt_enable_close = CRT_ENABLE_CLOSE
390   0000              
391   0000                 ELSE
392   0000              
393   0000                    IFDEF TAR__crt_enable_close
394   0000              
395   0000                       defc __crt_enable_close = TAR__crt_enable_close
396   0000              
397   0000                    ELSE
398   0000              
399   0000                       defc __crt_enable_close = DEF__crt_enable_close
400   0000              
401   0000                    ENDIF
402   0000              
403   0000                 ENDIF
404   0000              
405   0000              
406   0000                 IFDEF CRT_ENABLE_EIDI
407   0000              
408   0000                    defc __crt_enable_eidi = CRT_ENABLE_EIDI
409   0000              
410   0000                 ELSE
411   0000              
412   0000                    IFDEF TAR__crt_enable_eidi
413   0000              
414   0000                       defc __crt_enable_eidi = TAR__crt_enable_eidi
415   0000              
416   0000                    ELSE
417   0000              
418   0000                       defc __crt_enable_eidi = DEF__crt_enable_eidi
419   0000              
420   0000                    ENDIF
421   0000              
422   0000                 ENDIF
423   0000              
424   0000              
425   0000                 IF __crt_enable_restart
426   0000              
427   0000                    defc __crt_on_exit = 0x10008
428   0000              
429   0000                 ELSE
430   0000              
431   0000                    IFDEF CRT_ON_EXIT
432   0000              
433   0000                       defc __crt_on_exit = CRT_ON_EXIT
434   0000              
435   0000                    ELSE
436   0000              
437   0000                       IFDEF TAR__crt_on_exit
438   0000              
439   0000                          defc __crt_on_exit = TAR__crt_on_exit
440   0000              
441   0000                       ELSE
442   0000              
443   0000                          defc __crt_on_exit = DEF__crt_on_exit
444   0000              
445   0000                       ENDIF
446   0000              
447   0000                    ENDIF
448   0000              
449   0000                 ENDIF
450   0000              
451   0000              
452   0000                 IFDEF CLIB_EXIT_STACK_SIZE
453   0000              
454   0000                    defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
455   0000              
456   0000                 ELSE
457   0000              
458   0000                    IFDEF TAR__clib_exit_stack_size
459   0000              
460   0000                       defc __clib_exit_stack_size = TAR__clib_exit_stack_size
461   0000              
462   0000                    ELSE
463   0000              
464   0000                       defc __clib_exit_stack_size = DEF__clib_exit_stack_size
465   0000              
466   0000                    ENDIF
467   0000              
468   0000                 ENDIF
469   0000              
470   0000              
471   0000                 IFDEF CLIB_QUICKEXIT_STACK_SIZE
472   0000              
473   0000                    defc __clib_quickexit_stack_size = CLIB_QUICKEXIT_STACK_SIZE
474   0000              
475   0000                 ELSE
476   0000              
477   0000                    IFDEF TAR__clib_quickexit_stack_size
478   0000              
479   0000                       defc __clib_quickexit_stack_size = TAR__clib_quickexit_stack_size
480   0000              
481   0000                    ELSE
482   0000              
483   0000                       defc __clib_quickexit_stack_size = DEF__clib_quickexit_stack_size
484   0000              
485   0000                    ENDIF
486   0000              
487   0000                 ENDIF
488   0000              
489   0000              
490   0000                 IFDEF CLIB_MALLOC_HEAP_SIZE
491   0000              
492   0000                    defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
493   0000              
494   0000                 ELSE
495   0000              
496   0000                    IFDEF TAR__clib_malloc_heap_size
497   0000              
498   0000                       defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
499   0000              
500   0000                    ELSE
501   0000              
502   0000                       defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
503   0000              
504   0000                    ENDIF
505   0000              
506   0000                 ENDIF
507   0000              
508   0000              
509   0000                 IFDEF CLIB_STDIO_HEAP_SIZE
510   0000              
511   0000                    defc __clib_stdio_heap_size = CLIB_STDIO_HEAP_SIZE
512   0000              
513   0000                 ELSE
514   0000              
515   0000                    IFDEF TAR__clib_stdio_heap_size
516   0000              
517   0000                       defc __clib_stdio_heap_size = TAR__clib_stdio_heap_size
518   0000              
519   0000                    ELSE
520   0000              
521   0000                       defc __clib_stdio_heap_size = DEF__clib_stdio_heap_size
522   0000              
523   0000                    ENDIF
524   0000              
525   0000                 ENDIF
526   0000              
527   0000              
528   0000                 IFDEF CLIB_BALLOC_TABLE_SIZE
529   0000              
530   0000                    defc __clib_balloc_table_size = CLIB_BALLOC_TABLE_SIZE
531   0000              
532   0000                 ELSE
533   0000              
534   0000                    IFDEF TAR__clib_balloc_table_size
535   0000              
536   0000                       defc __clib_balloc_table_size = TAR__clib_balloc_table_size
537   0000              
538   0000                    ELSE
539   0000              
540   0000                       defc __clib_balloc_table_size = DEF__clib_balloc_table_size
541   0000              
542   0000                    ENDIF
543   0000              
544   0000                 ENDIF
545   0000              
546   0000              
547   0000                 IFDEF CLIB_FOPEN_MAX
548   0000              
549   0000                    defc __clib_fopen_max = CLIB_FOPEN_MAX
550   0000              
551   0000                 ELSE
552   0000              
553   0000                    IFDEF TAR__clib_fopen_max
554   0000              
555   0000                       defc __clib_fopen_max = TAR__clib_fopen_max
556   0000              
557   0000                    ELSE
558   0000              
559   0000                       defc __clib_fopen_max = DEF__clib_fopen_max
560   0000              
561   0000                    ENDIF
562   0000              
563   0000                 ENDIF
564   0000              
565   0000              
566   0000                 IFDEF CLIB_OPEN_MAX
567   0000              
568   0000                    defc __clib_open_max = CLIB_OPEN_MAX
569   0000              
570   0000                 ELSE
571   0000              
572   0000                    IFDEF TAR__clib_open_max
573   0000              
574   0000                       defc __clib_open_max = TAR__clib_open_max
575   0000              
576   0000                    ELSE
577   0000              
578   0000                       defc __clib_open_max = DEF__clib_open_max
579   0000              
580   0000                    ENDIF
581   0000              
582   0000                 ENDIF
583   0000              
584   0000              
585   0000                 IFDEF CRT_ENABLE_RST
586   0000              
587   0000                    defc __crt_enable_rst = CRT_ENABLE_RST
588   0000              
589   0000                 ELSE
590   0000              
591   0000                    IFDEF TAR__crt_enable_rst
592   0000              
593   0000                       defc __crt_enable_rst = TAR__crt_enable_rst
594   0000              
595   0000                    ELSE
596   0000              
597   0000                       defc __crt_enable_rst = DEF__crt_enable_rst
598   0000              
599   0000                    ENDIF
600   0000              
601   0000                 ENDIF
602   0000              
603   0000              
604   0000                 IFDEF CRT_ENABLE_NMI
605   0000              
606   0000                    defc __crt_enable_nmi = CRT_ENABLE_NMI
607   0000              
608   0000                 ELSE
609   0000              
610   0000                    IFDEF TAR__crt_enable_nmi
611   0000              
612   0000                       defc __crt_enable_nmi = TAR__crt_enable_nmi
613   0000              
614   0000                    ELSE
615   0000              
616   0000                       defc __crt_enable_nmi = DEF__crt_enable_nmi
617   0000              
618   0000                    ENDIF
619   0000              
620   0000                 ENDIF
621   0000              
622   0000                 IFDEF CRT_ENABLE_TRAP
623   0000              
624   0000                    defc __crt_enable_trap = CRT_ENABLE_TRAP
625   0000              
626   0000                 ELSE
627   0000              
628   0000                    IFDEF TAR__crt_enable_trap
629   0000              
630   0000                       defc __crt_enable_trap = TAR__crt_enable_trap
631   0000              
632   0000                    ELSE
633   0000              
634   0000                       defc __crt_enable_trap = DEF__crt_enable_trap
635   0000              
636   0000                    ENDIF
637   0000              
638   0000                 ENDIF
639   0000              
640   0000                 ;; rules that must be processed by m4
641   0000              
642   0000              
643   0000              
644   0000                 IFNDEF __crt_include_driver_instantiation
645   0000                    defc __crt_include_driver_instantiation = 0
646   0000                 ENDIF
647   0000              
648   0000                 ;; public definitions
649   0000              
650   0000                 PUBLIC __clib_fopen_max
651   0000                 PUBLIC __clib_open_max
652   0000              
653   0000                 PUBLIC __exit_stack_size
654   0000                 PUBLIC __quickexit_stack_size
655   0000              
656   0000                 defc __exit_stack_size = __clib_exit_stack_size
657   0000                 defc __quickexit_stack_size = __clib_quickexit_stack_size
658   0000              
659   0000                 IF __Z180
660   0000              
661   0000                    PUBLIC __IO_VECTOR_BASE
662   0000              
663   0000                    IF __crt_io_vector_base < 0
664   0000              
665   0000                       IF (__crt_org_vector_table < 0)
666   0000              
667   0000                          IF (-__crt_org_vector_table) & 0x1f
668   0000              
669   0000                             "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
670   0000              
671   0000                          ELSE
672   0000              
673   0000                             defc __IO_VECTOR_BASE = (-__crt_org_vector_table) & 0xe0
674   0000              
675   0000                          ENDIF
676   0000              
677   0000                       ELSE
678   0000              
679   0000                          IF __crt_org_vector_table & 0x1f
680   0000              
681   0000                             "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
682   0000              
683   0000                          ELSE
684   0000              
685   0000                             defc __IO_VECTOR_BASE = __crt_org_vector_table & 0xe0
686   0000              
687   0000                          ENDIF
688   0000              
689   0000                       ENDIF
690   0000              
691   0000                    ELSE
692   0000              
693   0000                       IF __crt_io_vector_base & 0x1f
694   0000              
695   0000                          "Illegal __IO_VECTOR_BASE"
696   0000              
697   0000                       ELSE
698   0000              
699   0000                          defc __IO_VECTOR_BASE = __crt_io_vector_base & 0xe0
700   0000              
701   0000                       ENDIF
702   0000              
703   0000                    ENDIF
704   0000              
705   0000                 ENDIF
706   0000              
707   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
708   0000              
709   0000              
710   0000              
711   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
712   0000              ;; SET UP MEMORY MAP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
713   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
714   0000              
715   0000              
716   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
717   0000              ;; memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
718   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
719   0000              
720   0000              IF __MMAP = -1
721   0000              
722   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
723   0000                 ;; user supplied memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
724   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
725   0000              
726   0000              
727   0000              
728   0000                 SECTION UNASSIGNED
729   0000                 org 0
730   0000              
731   0000              ENDIF
732   0000              
733   0000              IF __MMAP = 0
734   0000              
735   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
736   0000                 ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
737   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
738   0000              
739   0000                 INCLUDE "../crt_memory_model_z80.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000              
8     0000              SECTION CODE
9     0000              
10    0000              org __crt_org_code
11    0000              
12    0000              IF (__crt_org_vector_table = -0x80) || (__crt_org_vector_table = -0x100)
13    0000              
14    0000              section interrupt_vectors
15    0000              section code_crt_start
16    0000              
17    0000              ENDIF
18    0000              
19    0000              section code_crt_init
20    0000              section code_crt_main
21    0000              section code_crt_exit
22    0000              section code_crt_return
23    0000              section code_crt_common
24    0000              
25    0000              IF (__crt_org_vector_table) && (__crt_org_vector_table != -0x80) && (__crt_org_vector_table != -0x100)
26    0000              
27    0000              section interrupt_vectors
28    0000              
29    0000              ENDIF
30    0000              
31    0000              section code_driver
32    0000              section code_font
33    0000              section code_clib
34    0000                include "../../clib_code.inc"
1     0000              
2     0000              ;; clib code segments ;;;;;;;;;
3     0000              
4     0000              section code_adt_b_array
5     0000              section code_adt_b_vector
6     0000              section code_adt_ba_priority_queue
7     0000              section code_adt_ba_stack
8     0000              section code_adt_bv_priority_queue
9     0000              section code_adt_bv_stack
10    0000              section code_adt_p_forward_list
11    0000              section code_adt_p_forward_list_alt
12    0000              section code_adt_p_list
13    0000              section code_adt_p_queue
14    0000              section code_adt_p_stack
15    0000              section code_adt_w_array
16    0000              section code_adt_w_vector
17    0000              section code_adt_wa_priority_queue
18    0000              section code_adt_wa_stack
19    0000              section code_adt_wv_priority_queue
20    0000              section code_adt_wv_stack
21    0000              section code_alloc_balloc
22    0000              section code_alloc_malloc
23    0000              section code_alloc_obstack
24    0000              section code_arch
25    0000              section code_bifrost_h
26    0000              section code_bifrost_l
27    0000              section code_bifrost2
28    0000              section code_compress_aplib
29    0000              section code_compress_zx7
30    0000              section code_ctype
31    0000              section code_driver_general
32    0000              section code_driver_character_input
33    0000              section code_driver_character_output
34    0000              section code_driver_memstream
35    0000              section code_driver_terminal_input
36    0000              section code_driver_terminal_output
37    0000              section code_driver_tty
38    0000              section code_env
39    0000              section code_error
40    0000              section code_esxdos
41    0000              section code_fcntl
42    0000              section code_font_fzx
43    0000              section code_fp_genmath
44    0000              section code_fp_math48
45    0000              section code_im2
46    0000              section code_input
47    0000              section code_inttypes
48    0000              section code_l
49    0000              section code_l_sccz80
50    0000              section code_l_sdcc
51    0000              section code_locale
52    0000              section code_math
53    0000              section code_network
54    0000              section code_nirvanam
55    0000              section code_nirvanap
56    0000              section code_PSGlib
57    0000              section code_setjmp
58    0000              section code_SMSlib
59    0000              section code_sound_bit
60    0000              section code_stdio
61    0000              section code_stdlib
62    0000              section code_string
63    0000              section code_temp_sp1
64    0000              section code_threads
65    0000              section code_threads_mutex
66    0000              section code_time
67    0000              section code_z180
68    0000              section code_z80
69    0000              
70    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
71    0000              
35    0000              section code_lib
36    0000              section code_compiler
37    0000              section code_user
38    0000              
39    0000              section rodata_driver
40    0000              section rodata_font
41    0000              section rodata_clib
42    0000                include "../../clib_rodata.inc"
1     0000              
2     0000              ;; clib rodata segments ;;;;;;;
3     0000              
4     0000              section rodata_arch
5     0000              section rodata_env
6     0000              section rodata_error_strings
7     0000              section rodata_error_string_end
8     0000  00          defb 0
9     0001              section rodata_fcntl
10    0000              section rodata_font_4x8
11    0000              section rodata_font_8x8
12    0000              section rodata_font_fzx
13    0000              section rodata_input
14    0000              section rodata_SMSlib
15    0000              section rodata_sound_bit
16    0000              section rodata_stdio
17    0000              section rodata_stdlib
18    0000              
19    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000              
43    0000                ;;section rodata_error_strings
44    0000                ;;section rodata_error_string_end
45    0000                ;;defb 0
46    0000              section rodata_lib
47    0000              section rodata_compiler
48    0000              section rodata_user
49    0000              
50    0000              SECTION CODE_END
51    0000              
52    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
53    0000              
54    0000              SECTION DATA
55    0000              
56    0000              IF __crt_org_data
57    0000              
58    0000                 org __crt_org_data
59    0000              
60    0000              ELSE
61    0000              
62    0000                 IF __crt_model
63    0000              
64    0000                    "DATA section address must be specified for rom models"
65    0000              
66    0000                 ENDIF
67    0000              
68    0000              ENDIF
69    0000              
70    0000              section data_align_256
71    0000              align 256
72    0000              
73    0000              section data_align_128
74    0000              align 128
75    0000              
76    0000              section data_align_64
77    0000              align 64
78    0000              
79    0000              section data_align_32
80    0000              align 32
81    0000              
82    0000              section data_align_16
83    0000              align 16
84    0000              
85    0000              section data_align_8
86    0000              align 8
87    0000              
88    0000              section data_align_4
89    0000              align 4
90    0000              
91    0000              section data_align_2
92    0000              align 2
93    0000              
94    0000              section smc_jump_vectors
95    0000              section smc_driver
96    0000              section smc_font
97    0000              section smc_clib
98    0000                include "../../clib_smc.inc"
1     0000              
2     0000              ;; clib self-modifying code ;;;
3     0000              
4     0000              section smc_fcntl
5     0000              section smc_l
6     0000              section smc_sound_bit
7     0000              
8     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000              
99    0000              section smc_lib
100   0000              section smc_compiler
101   0000              section smc_user
102   0000              
103   0000              section data_driver
104   0000              section data_font
105   0000              section data_clib
106   0000                include "../../clib_data.inc"
1     0000              
2     0000              ;; clib data segments ;;;;;;;;;
3     0000              
4     0000              section data_alloc_balloc
5     0000              section data_alloc_malloc
6     0000              section data_arch
7     0000              section data_fcntl
8     0000              section data_fcntl_stdio_heap_head
9     0000              section data_fcntl_stdio_heap_body
10    0000              section data_fcntl_stdio_heap_tail
11    0000              section data_fcntl_fdtable_body
12    0000              section data_PSGlib
13    0000              section data_SMSlib
14    0000              section data_sound_bit
15    0000              section data_stdio
16    0000              section data_stdlib
17    0000              section data_threads
18    0000              
19    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000              
107   0000                ;;section data_fcntl_stdio_heap_head
108   0000                ;;section data_fcntl_stdio_heap_body
109   0000                ;;section data_fcntl_stdio_heap_tail
110   0000                ;;section data_fcntl_fdtable_body
111   0000              section data_lib
112   0000              section data_compiler
113   0000              section data_user
114   0000              
115   0000              SECTION DATA_END
116   0000              
117   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
118   0000              
119   0000              SECTION BSS
120   0000              
121   0000              IF __crt_org_bss
122   0000              
123   0000                 org __crt_org_bss
124   0000              
125   0000              ELSE
126   0000              
127   0000                 IF __crt_model
128   0000              
129   0000                    org -1
130   0000              
131   0000                 ENDIF
132   0000              
133   0000              ENDIF
134   0000              
135   0000              section bss_align_256
136   0000              align 256
137   0000              
138   0000              section bss_align_128
139   0000              align 128
140   0000              
141   0000              section bss_align_64
142   0000              align 64
143   0000              
144   0000              section bss_align_32
145   0000              align 32
146   0000              
147   0000              section bss_align_16
148   0000              align 16
149   0000              
150   0000              section bss_align_8
151   0000              align 8
152   0000              
153   0000              section bss_align_4
154   0000              align 4
155   0000              
156   0000              section bss_align_2
157   0000              align 2
158   0000              
159   0000              section bss_driver
160   0000              section bss_font
161   0000              section bss_clib
162   0000                include "../../clib_bss.inc"
1     0000              
2     0000              ;; clib bss segments ;;;;;;;;;;
3     0000              
4     0000              section bss_arch
5     0000              section bss_alloc_balloc
6     0000              section bss_alloc_malloc
7     0000              section bss_compress_aplib
8     0000              section bss_error
9     0000              section bss_env
10    0000              section bss_esxdos
11    0000              section bss_fcntl
12    0000              section bss_input
13    0000              section bss_PSGlib
14    0000              section bss_SMSlib
15    0000              section bss_sound_bit
16    0000              section bss_stdio
17    0000              section bss_stdlib
18    0000              section bss_string
19    0000              
20    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
163   0000              section bss_lib
164   0000              section bss_compiler
165   0000              section bss_user
166   0000              
167   0000              section BSS_UNINITIALIZED
168   0000              SECTION BSS_END
169   0000              
170   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
171   0000              
172   0000              IF (__crt_org_vector_table = 0)
173   0000              
174   0000              section interrupt_vectors
175   0000              org 0
176   0000              
177   0000              ENDIF
178   0000              
179   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
180   0000              
740   0000              
741   0000              
742   0000              
743   0000                 SECTION UNASSIGNED
744   0000                 org 0
745   0000              
746   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
747   0000              
748   0000              ENDIF
749   0000              
750   0000              ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
751   0000              
752   0000              
753   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
754   0000              ;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
755   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
756   0000              
757   0000              ; The embedded target has no device drivers so it cannot
758   0000              ; instantiate FILEs.
759   0000              
760   0000              ; It can use sprint/sscanf + family and it can create
761   0000              ; memstreams in the default configuration.
762   0000              
763   0000              
764   0000              ; When FILEs and FDSTRUCTs are instantiated labels are assigned
765   0000              ; to point at created structures.
766   0000              ;
767   0000              ; The label formats are:
768   0000              ;
769   0000              ; __i_stdio_file_n     = address of static FILE structure #n (0..__I_STDIO_NUM_FILE-1)
770   0000              ; __i_fcntl_fdstruct_n = address of static FDSTRUCT #n (0..__I_FCNTL_NUM_FD-1)
771   0000              ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
772   0000              
773   0000              
774   0000              
775   0000              
776   0000              
777   0000              
778   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
779   0000                 ;; create open and closed FILE lists
780   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
781   0000              
782   0000                 ; __clib_fopen_max   = max number of open FILEs specified by user
783   0000                 ; 0 = number of static FILEs instantiated in crt
784   0000                 ; __i_stdio_file_n   = address of static FILE structure #n (0..I_STDIO_FILE_NUM-1)
785   0000              
786   0000              	PUBLIC __MAX_FOPEN
787   0000              
788   0000                 SECTION data_clib
789   0000                 SECTION data_stdio
790   0000              
791   0000                 IF (__clib_fopen_max > 0) || (0 > 0)
792   0000              
793   0000                    ; number of FILEs > 0
794   0000              
795   0000                    ; construct list of open files
796   0000              
797   0000                    IF 0 > 0
798   0000              
799   0000                       ; number of FILEs statically generated > 0
800   0000              
801   0000                       SECTION data_clib
802   0000                       SECTION data_stdio
803   0000              
804   0000                       PUBLIC __stdio_open_file_list
805   0000              
806   0000                       __stdio_open_file_list:  defw __i_stdio_file_-1
807   0000              
808   0000                    ELSE
809   0000              
810   0000                       ; number of FILEs statically generated = 0
811   0000              
812   0000                       SECTION bss_clib
813   0000                       SECTION bss_stdio
814   0000              
815   0000                       PUBLIC __stdio_open_file_list
816   0000              
817   0000                       __stdio_open_file_list:  defw 0
818   0000              
819   0000                    ENDIF
820   0000              
821   0000                    ; construct list of closed / available FILEs
822   0000              
823   0000                    SECTION data_clib
824   0000                    SECTION data_stdio
825   0000              
826   0000                    PUBLIC __stdio_closed_file_list
827   0000              
828   0000                    __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
829   0000              
830   0000                    IF __clib_fopen_max > 0
831   0000              
832   0000              		   defc __MAX_FOPEN = __clib_fopen_max
833   0000              
834   0000                       ; create extra FILE structures
835   0000              
836   0000                       SECTION bss_clib
837   0000                       SECTION bss_stdio
838   0000              
839   0000                       __stdio_file_extra:      defs (__clib_fopen_max - 0) * 15
840   0000              
841   0000                       SECTION code_crt_init
842   0000              
843   0000                          ld bc,__stdio_closed_file_list
844   0000                          ld de,__stdio_file_extra
845   0000                          ld l,__clib_fopen_max - 0
846   0000              
847   0000                       loop:
848   0000              
849   0000                          push hl
850   0000              
851   0000                          EXTERN asm_p_forward_list_alt_push_front
852   0000                          call asm_p_forward_list_alt_push_front
853   0000              
854   0000                          ld de,15
855   0000                          add hl,de
856   0000                          ex de,hl
857   0000              
858   0000                          pop hl
859   0000              
860   0000                          dec l
861   0000                          jr nz, loop
862   0000              
863   0000                    ELSE
864   0000              
865   0000                       defc __MAX_FOPEN = 0
866   0000              
867   0000                    ENDIF
868   0000              
869   0000                 ENDIF
870   0000              
871   0000                 IF (__clib_fopen_max = 0) && (0 = 0)
872   0000              
873   0000                    defc __MAX_FOPEN = 0
874   0000              
875   0000                    ; create empty file lists
876   0000              
877   0000                    SECTION bss_clib
878   0000                    SECTION bss_stdio
879   0000              
880   0000                    PUBLIC __stdio_open_file_list
881   0000  00 00             __stdio_open_file_list:  defw 0
882   0002              
883   0002                    SECTION data_clib
884   0000                    SECTION data_stdio
885   0000              
886   0000                    PUBLIC __stdio_closed_file_list
887   0000  00 00 00 00       __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
888   0004              
889   0004                 ENDIF
890   0004              
891   0004                 IF (__clib_fopen_max < 0) && (0 = 0)
892   0004              
893   0004                    defc __MAX_FOPEN = 0
894   0004              
895   0004                 ENDIF
896   0004              
897   0004                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
898   0004                 ;; create fd table
899   0004                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
900   0004              
901   0004                 ; __clib_open_max  = max number of open fds specified by user
902   0004                 ; 0 = number of static file descriptors created
903   0004              
904   0004                 PUBLIC __fcntl_fdtbl
905   0004                 PUBLIC __fcntl_fdtbl_size
906   0004              
907   0004                 IF 0 > 0
908   0004              
909   0004                    ; create rest of fd table in data segment
910   0004              
911   0004                    SECTION data_fcntl_fdtable_body
912   0004              
913   0004                    EXTERN __data_fcntl_fdtable_body_head
914   0004              
915   0004                    defc __fcntl_fdtbl = __data_fcntl_fdtable_body_head
916   0004              
917   0004                    IF __clib_open_max > 0
918   0004              
919   0004                       SECTION data_fcntl_fdtable_body
920   0004              
921   0004                       defs (__clib_open_max - 0) * 2
922   0004                       defc __fcntl_fdtbl_size = __clib_open_max
923   0004              
924   0004                    ELSE
925   0004              
926   0004                       defc __fcntl_fdtbl_size = 0
927   0004              
928   0004                    ENDIF
929   0004              
930   0004                 ELSE
931   0004              
932   0004                    IF __clib_open_max > 0
933   0004              
934   0004                       ; create fd table in bss segment
935   0004              
936   0004                       SECTION bss_clib
937   0004                       SECTION bss_fcntl
938   0004              
939   0004                       __fcntl_fdtbl:        defs __clib_open_max * 2
940   0004              
941   0004                    ELSE
942   0004              
943   0004                       ; no fd table at all
944   0004              
945   0004                       defc __fcntl_fdtbl = 0
946   0004              
947   0004                    ENDIF
948   0004              
949   0004                    defc __fcntl_fdtbl_size = __clib_open_max
950   0004              
951   0004                 ENDIF
952   0004              
953   0004              	PUBLIC __MAX_OPEN
954   0004              	defc   __MAX_OPEN = __fcntl_fdtbl_size
955   0004              
956   0004                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
957   0004                 ;; finalize stdio heap
958   0004                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
959   0004              
960   0004                 ; __clib_stdio_heap_size  = desired stdio heap size in bytes
961   0004                 ; 0  = byte size of static FDSTRUCTs
962   0004                 ; 0   = number of heap allocations
963   0004                 ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
964   0004              
965   0004                 IF 0 > 0
966   0004              
967   0004                    ; static FDSTRUCTs have been allocated in the heap
968   0004              
969   0004                    SECTION data_clib
970   0004                    SECTION data_fcntl
971   0004              
972   0004                    PUBLIC __stdio_heap
973   0004              
974   0004                    __stdio_heap:            defw __stdio_block
975   0004              
976   0004                    SECTION data_fcntl_stdio_heap_head
977   0004              
978   0004                    __stdio_block:
979   0004              
980   0004                       defb 0                ; no owner
981   0004                       defb 0x01             ; mtx_plain
982   0004                       defb 0                ; number of lock acquisitions
983   0004                       defb 0xfe             ; spinlock (unlocked)
984   0004                       defw 0                ; list of threads blocked on mutex
985   0004              
986   0004                    IF __clib_stdio_heap_size > (0 + 14)
987   0004              
988   0004                       ; expand stdio heap to desired size
989   0004              
990   0004                       SECTION data_fcntl_stdio_heap_body
991   0004              
992   0004                       __i_fcntl_heap_0:
993   0004              
994   0004                          defw __i_fcntl_heap_1
995   0004                          defw 0
996   0004                          defw __i_fcntl_heap_-1
997   0004                          defs __clib_stdio_heap_size - 0 - 14
998   0004              
999   0004                       ; terminate stdio heap
1000  0004              
1001  0004                       SECTION data_fcntl_stdio_heap_tail
1002  0004              
1003  0004                       __i_fcntl_heap_1:   defw 0
1004  0004              
1005  0004                    ELSE
1006  0004              
1007  0004                       ; terminate stdio heap
1008  0004              
1009  0004                       SECTION data_fcntl_stdio_heap_tail
1010  0004              
1011  0004                       __i_fcntl_heap_0:   defw 0
1012  0004              
1013  0004                    ENDIF
1014  0004              
1015  0004                 ELSE
1016  0004              
1017  0004                    ; no FDSTRUCTs statically created
1018  0004              
1019  0004                    IF __clib_stdio_heap_size > 14
1020  0004              
1021  0004                       SECTION data_clib
1022  0000                       SECTION data_fcntl
1023  0000              
1024  0000                       PUBLIC __stdio_heap
1025  0000              
1026  0000  00 00                __stdio_heap:         defw __stdio_block
1027  0002              
1028  0002                       SECTION bss_clib
1029  0000                       SECTION bss_fcntl
1030  0000              
1031  0000                       PUBLIC __stdio_block
1032  0000              
1033  0000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                                 __stdio_block:         defs __clib_stdio_heap_size
1034  0080              
1035  0080                       SECTION code_crt_init
1036  0000              
1037  0000  21 00 00             ld hl,__stdio_block
1038  0003  01 80 00             ld bc,__clib_stdio_heap_size
1039  0006              
1040  0006                       EXTERN asm_heap_init
1041  0006  CD 00 00             call asm_heap_init
1042  0009              
1043  0009                    ENDIF
1044  0009              
1045  0009                 ENDIF
1046  0009              
1047  0009              
1048  0009              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1049  0009              ;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1050  0009              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1051  0009              
1052  0009              SECTION CODE
1053  0000              
1054  0000              PUBLIC __Start, __Exit
1055  0000              
1056  0000              EXTERN _main
1057  0000              
1058  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1059  0000              ;; USER PREAMBLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1060  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1061  0000              
1062  0000              IF __crt_include_preamble
1063  0000              
1064  0000                 include "crt_preamble.asm"
1065  0000                 SECTION CODE
1066  0000              
1067  0000              ENDIF
1068  0000              
1069  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1070  0000              ;; PAGE ZERO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1071  0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1072  0000              
1073  0000              IF (ASMPC = 0) && (__crt_org_code = 0)
1074  0000              
1075  0000                 include "../crt_page_zero_z80.inc"
1     0000              ; address = 0x0000
2     0000              
3     0000  F3             di
4     0001  ED 56          im 1
5     0003  C3 69 00       jp __Start
6     0006              
7     0006              ; address = 0x0008
8     0006              
9     0006  00 00          defs 0x0008 - ASMPC
10    0008              
11    0008              IF ((__crt_enable_rst & $0202) = $02)
12    0008              
13    0008                 EXTERN _z80_rst_08h
14    0008                 jp     _z80_rst_08h
15    0008              
16    0008              ELSE
17    0008              
18    0008                 IF ((__crt_enable_rst & $0202) = $0202)
19    0008              
20    0008                 jp     __z80_rst_08h
21    0008              
22    0008                 ELSE
23    0008              
24    0008  C3 2E 00       jp     l_ret
25    000B              
26    000B                 ENDIF
27    000B              
28    000B              ENDIF
29    000B              
30    000B              IF ((__crt_enable_rst & $0202) != $0202)
31    000B              
32    000B                 PUBLIC _z80_rst_08h_vector
33    000B                 defc   _z80_rst_08h_vector = $09
34    000B              
35    000B              ENDIF
36    000B              
37    000B  5A 38 38 44 4B 
                           defm "Z88DK"
38    0010              
39    0010              ; address = 0x0010
40    0010              
41    0010                 defs 0x0010 - ASMPC
42    0010              
43    0010              IF ((__crt_enable_rst & $0404) = $04)
44    0010              
45    0010                 EXTERN _z80_rst_10h
46    0010                 jp     _z80_rst_10h
47    0010              
48    0010              ELSE
49    0010              
50    0010                 IF ((__crt_enable_rst & $0404) = $0404)
51    0010              
52    0010                 jp     __z80_rst_10h
53    0010              
54    0010                 ELSE
55    0010              
56    0010  C3 2E 00       jp     l_ret
57    0013              
58    0013                 ENDIF
59    0013              
60    0013              ENDIF
61    0013              
62    0013              IF ((__crt_enable_rst & $0404) != $0404)
63    0013              
64    0013                 PUBLIC _z80_rst_10h_vector
65    0013                 defc   _z80_rst_10h_vector = $11
66    0013              
67    0013              ENDIF
68    0013              
69    0013  31 2E 39 39 43 
                           defm "1.99C"
70    0018              
71    0018              ; address = 0x0018
72    0018              
73    0018                 defs 0x0018 - ASMPC
74    0018              
75    0018              IF ((__crt_enable_rst & $0808) = $08)
76    0018              
77    0018                 EXTERN _z80_rst_18h
78    0018                 jp     _z80_rst_18h
79    0018              
80    0018              ELSE
81    0018              
82    0018                 IF ((__crt_enable_rst & $0808) = $0808)
83    0018              
84    0018                 jp     __z80_rst_18h
85    0018              
86    0018                 ELSE
87    0018              
88    0018  C3 2E 00       jp     l_ret
89    001B              
90    001B                 ENDIF
91    001B              
92    001B              ENDIF
93    001B              
94    001B              IF ((__crt_enable_rst & $0808) != $0808)
95    001B              
96    001B                 PUBLIC _z80_rst_18h_vector
97    001B                 defc   _z80_rst_18h_vector = $19
98    001B              
99    001B              ENDIF
100   001B              
101   001B                 PUBLIC l_dec_de
102   001B              
103   001B  1B             dec de
104   001C  1B             dec de
105   001D  1B             dec de
106   001E              
107   001E              l_dec_de:
108   001E              
109   001E  C9             ret
110   001F              
111   001F              ; address = 0x0020
112   001F              
113   001F  00             defs 0x0020 - ASMPC
114   0020              
115   0020              IF ((__crt_enable_rst & $1010) = $10)
116   0020              
117   0020                 EXTERN _z80_rst_20h
118   0020                 jp     _z80_rst_20h
119   0020              
120   0020              ELSE
121   0020              
122   0020                 IF ((__crt_enable_rst & $1010) = $1010)
123   0020              
124   0020                 jp     __z80_rst_20h
125   0020              
126   0020                 ELSE
127   0020              
128   0020  C3 2E 00       jp     l_ret
129   0023              
130   0023                 ENDIF
131   0023              
132   0023              ENDIF
133   0023              
134   0023              IF ((__crt_enable_rst & $1010) != $1010)
135   0023              
136   0023                 PUBLIC _z80_rst_20h_vector
137   0023                 defc   _z80_rst_20h_vector = $21
138   0023              
139   0023              ENDIF
140   0023              
141   0023                 PUBLIC l_dec_bc
142   0023              
143   0023  0B             dec bc
144   0024  0B             dec bc
145   0025  0B             dec bc
146   0026              
147   0026              l_dec_bc:
148   0026              
149   0026  C9             ret
150   0027              
151   0027              ; address = 0x0028
152   0027              
153   0027  00             defs 0x0028 - ASMPC
154   0028              
155   0028              IF ((__crt_enable_rst & $2020) = $20)
156   0028              
157   0028                 EXTERN _z80_rst_28h
158   0028                 jp     _z80_rst_28h
159   0028              
160   0028              ELSE
161   0028              
162   0028                 IF ((__crt_enable_rst & $2020) = $2020)
163   0028              
164   0028                 jp     __z80_rst_28h
165   0028              
166   0028                 ELSE
167   0028              
168   0028  C3 2E 00       jp     l_ret
169   002B              
170   002B                 ENDIF
171   002B              
172   002B              ENDIF
173   002B              
174   002B              IF ((__crt_enable_rst & $2020) != $2020)
175   002B              
176   002B                 PUBLIC _z80_rst_28h_vector
177   002B                 defc   _z80_rst_28h_vector = $29
178   002B              
179   002B              ENDIF
180   002B              
181   002B                 PUBLIC l_ret
182   002B              
183   002B  E1             pop hl
184   002C  E1             pop hl
185   002D  E1             pop hl
186   002E              
187   002E              l_ret:
188   002E              
189   002E  C9             ret
190   002F              
191   002F              ; address = 0x0030
192   002F              
193   002F  00             defs 0x0030 - ASMPC
194   0030              
195   0030              IF ((__crt_enable_rst & $4040) = $40)
196   0030              
197   0030                 EXTERN _z80_rst_30h
198   0030                 jp     _z80_rst_30h
199   0030              
200   0030              ELSE
201   0030              
202   0030                 IF ((__crt_enable_rst & $4040) = $4040)
203   0030              
204   0030                 jp     __z80_rst_30h
205   0030              
206   0030                 ELSE
207   0030              
208   0030  C3 2E 00       jp     l_ret
209   0033              
210   0033                 ENDIF
211   0033              
212   0033              ENDIF
213   0033              
214   0033              IF ((__crt_enable_rst & $4040) != $4040)
215   0033              
216   0033                 PUBLIC _z80_rst_30h_vector
217   0033                 defc   _z80_rst_30h_vector = $31
218   0033              
219   0033              ENDIF
220   0033              
221   0033              IF __SDCC_IY
222   0033              
223   0033                 PUBLIC l_jpix
224   0033              
225   0033                 l_jpix:
226   0033              
227   0033  FD                defb $fd
228   0034              
229   0034                 PUBLIC l_jphl
230   0034              
231   0034                 l_jphl:
232   0034              
233   0034  E9                jp (hl)
234   0035              
235   0035                 PUBLIC l_jpiy
236   0035              
237   0035                 l_jpiy:
238   0035              
239   0035  DD E9             jp (ix)
240   0037              
241   0037              ELSE
242   0037              
243   0037                 PUBLIC l_jpix
244   0037              
245   0037                 l_jpix:
246   0037              
247   0037                    defb $dd
248   0037              
249   0037                 PUBLIC l_jphl
250   0037              
251   0037                 l_jphl:
252   0037              
253   0037                    jp (hl)
254   0037              
255   0037                 PUBLIC l_jpiy
256   0037              
257   0037                 l_jpiy:
258   0037              
259   0037                    jp (iy)
260   0037              
261   0037              ENDIF
262   0037              
263   0037              ; address = 0x0038
264   0037              ; im 1 isr
265   0037              
266   0037  00             defs 0x0038 - ASMPC
267   0038              
268   0038              IF ((__crt_enable_rst & $8080) = $80)
269   0038              
270   0038                 EXTERN _z80_rst_38h
271   0038                 jp     _z80_rst_38h
272   0038              
273   0038              ELSE
274   0038              
275   0038                 IF ((__crt_enable_rst & $8080) = $8080)
276   0038              
277   0038                 jp     __z80_rst_38h
278   0038              
279   0038                 ELSE
280   0038              
281   0038                 EXTERN l_ei_reti
282   0038  C3 00 00       jp     l_ei_reti
283   003B              
284   003B                 ENDIF
285   003B              
286   003B              ENDIF
287   003B              
288   003B              IF ((__crt_enable_rst & $8080) != $8080)
289   003B              
290   003B                 PUBLIC _z80_rst_38h_vector
291   003B                 defc   _z80_rst_38h_vector = $39
292   003B              
293   003B              ENDIF
294   003B              
295   003B                 PUBLIC l_setmem_hl
296   003B              
297   003B  77             ld (hl),a
298   003C  23             inc hl
299   003D  77             ld (hl),a
300   003E  23             inc hl
301   003F  77             ld (hl),a
302   0040  23             inc hl
303   0041  77             ld (hl),a
304   0042  23             inc hl
305   0043              
306   0043  77             ld (hl),a
307   0044  23             inc hl
308   0045  77             ld (hl),a
309   0046  23             inc hl
310   0047  77             ld (hl),a
311   0048  23             inc hl
312   0049  77             ld (hl),a
313   004A  23             inc hl
314   004B              
315   004B  77             ld (hl),a
316   004C  23             inc hl
317   004D  77             ld (hl),a
318   004E  23             inc hl
319   004F  77             ld (hl),a
320   0050  23             inc hl
321   0051  77             ld (hl),a
322   0052  23             inc hl
323   0053              
324   0053  77             ld (hl),a
325   0054  23             inc hl
326   0055  77             ld (hl),a
327   0056  23             inc hl
328   0057  77             ld (hl),a
329   0058  23             inc hl
330   0059  77             ld (hl),a
331   005A  23             inc hl
332   005B              
333   005B              l_setmem_hl:
334   005B              
335   005B  C9             ret
336   005C              
337   005C                 PUBLIC l_inc_hl
338   005C              
339   005C  23             inc hl
340   005D  23             inc hl
341   005E              
342   005E  23             inc hl
343   005F  23             inc hl
344   0060              
345   0060  23             inc hl
346   0061  23             inc hl
347   0062              
348   0062  23             inc hl
349   0063  23             inc hl
350   0064              
351   0064              l_inc_hl:
352   0064              
353   0064  C9             ret
354   0065              
355   0065              ; address = 0x0066
356   0065              
357   0065  00             defs 0x0066 - ASMPC
358   0066              
359   0066              IF (__crt_enable_nmi = 1)
360   0066              
361   0066                 EXTERN _z80_nmi
362   0066                 jp     _z80_nmi
363   0066              
364   0066              ELSE
365   0066              
366   0066                 IF (__crt_enable_nmi > 1)
367   0066              
368   0066                 jp     __z80_nmi
369   0066              
370   0066                 ELSE
371   0066              
372   0066                 EXTERN l_retn
373   0066  C3 00 00       jp     l_retn
374   0069              
375   0069                 ENDIF
376   0069              
377   0069              ENDIF
378   0069              
379   0069              IF (__crt_enable_nmi <= 1)
380   0069              
381   0069                 PUBLIC _z80_nmi_vector
382   0069                 defc   _z80_nmi_vector = $67
383   0069              
384   0069              ENDIF
385   0069              
386   0069              IF __crt_org_vector_table = -0x0080
387   0069              
388   0069              ; place vector table at address 0x0080
389   0069              
390   0069              ; current address = 0x0069
391   0069              ; that is 23 bytes to pad, make it count!
392   0069              
393   0069              PUBLIC error_mc
394   0069              
395   0069                 pop hl
396   0069                 pop hl
397   0069                 pop hl
398   0069              
399   0069              error_mc:
400   0069              
401   0069                 ld hl,-1
402   0069                 scf
403   0069                 ret
404   0069              
405   0069              PUBLIC error_zc
406   0069              
407   0069                 pop hl
408   0069                 pop hl
409   0069                 pop hl
410   0069                 pop hl
411   0069              
412   0069              error_zc:
413   0069              
414   0069                 ld hl,0
415   0069                 scf
416   0069                 ret
417   0069              
418   0069              ; address = 0x80
419   0069              
420   0069                 defs 0x80 - ASMPC
421   0069              
422   0069              section code_crt_start
423   0069              
424   0069              ENDIF
425   0069              
426   0069              IF (__crt_org_vector_table = -0x0100)
427   0069              
428   0069              ; place vector table at address 0x0100
429   0069              
430   0069              ; current address = 0x0069
431   0069              ; that is 151 bytes to pad, make it count!
432   0069              
433   0069              PUBLIC l_inc_sp
434   0069              
435   0069                 inc sp
436   0069                 inc sp
437   0069              
438   0069                 inc sp
439   0069                 inc sp
440   0069              
441   0069                 inc sp
442   0069                 inc sp
443   0069              
444   0069                 inc sp
445   0069                 inc sp
446   0069              
447   0069              l_inc_sp:
448   0069              
449   0069                 ret
450   0069              
451   0069              PUBLIC l_setmem_de
452   0069              
453   0069                 ld (de),a
454   0069                 inc de
455   0069                 ld (de),a
456   0069                 inc de
457   0069                 ld (de),a
458   0069                 inc de
459   0069                 ld (de),a
460   0069                 inc de
461   0069              
462   0069                 ld (de),a
463   0069                 inc de
464   0069                 ld (de),a
465   0069                 inc de
466   0069                 ld (de),a
467   0069                 inc de
468   0069                 ld (de),a
469   0069                 inc de
470   0069              
471   0069              l_setmem_de:
472   0069              
473   0069                 ret
474   0069              
475   0069              PUBLIC l_neg_hl
476   0069              
477   0069              l_neg_hl:
478   0069              
479   0069                 ld a,l
480   0069                 cpl
481   0069                 ld l,a
482   0069              
483   0069                 ld a,h
484   0069                 cpl
485   0069                 ld h,a
486   0069              
487   0069                 inc hl
488   0069                 ret
489   0069              
490   0069              PUBLIC l_neg_de
491   0069              
492   0069              l_neg_de:
493   0069              
494   0069                 ld a,e
495   0069                 cpl
496   0069                 ld e,a
497   0069              
498   0069                 ld a,d
499   0069                 cpl
500   0069                 ld d,a
501   0069              
502   0069                 inc de
503   0069                 ret
504   0069              
505   0069              PUBLIC l_neg_bc
506   0069              
507   0069              l_neg_bc:
508   0069              
509   0069                 ld a,c
510   0069                 cpl
511   0069                 ld c,a
512   0069              
513   0069                 ld a,b
514   0069                 cpl
515   0069                 ld b,a
516   0069              
517   0069                 inc bc
518   0069                 ret
519   0069              
520   0069              PUBLIC error_mc
521   0069              
522   0069                 pop hl
523   0069                 pop hl
524   0069                 pop hl
525   0069              
526   0069              error_mc:
527   0069              
528   0069                 ld hl,-1
529   0069                 scf
530   0069                 ret
531   0069              
532   0069              PUBLIC error_mnc
533   0069              
534   0069                 pop hl
535   0069                 pop hl
536   0069                 pop hl
537   0069              
538   0069              error_mnc:
539   0069              
540   0069                 ld hl,-1
541   0069              
542   0069                 scf
543   0069                 ccf
544   0069              
545   0069                 ret
546   0069              
547   0069              PUBLIC error_zc
548   0069              
549   0069                 pop hl
550   0069                 pop hl
551   0069                 pop hl
552   0069                 pop hl
553   0069              
554   0069              error_zc:
555   0069              
556   0069                 ld hl,0
557   0069                 scf
558   0069                 ret
559   0069              
560   0069              PUBLIC error_znc
561   0069              
562   0069                 pop hl
563   0069                 pop hl
564   0069                 pop hl
565   0069              
566   0069              error_znc:
567   0069              
568   0069                 ld hl,0
569   0069              
570   0069                 scf
571   0069                 ccf
572   0069              
573   0069                 ret
574   0069              
575   0069              PUBLIC error_lzc
576   0069              
577   0069                 pop hl
578   0069              
579   0069              error_lzc:
580   0069              
581   0069                 ld de,0
582   0069                 jp error_zc
583   0069              
584   0069              PUBLIC error_lznc
585   0069              
586   0069                 pop hl
587   0069              
588   0069              error_lznc:
589   0069              
590   0069                 ld de,0
591   0069                 jp error_znc
592   0069              
593   0069              PUBLIC error_lmc
594   0069              
595   0069                 pop hl
596   0069              
597   0069              error_lmc:
598   0069              
599   0069                 ld de,-1
600   0069                 jp error_mc
601   0069              
602   0069              PUBLIC error_lmnc
603   0069              
604   0069                 pop hl
605   0069              
606   0069              error_lmnc:
607   0069              
608   0069                 ld de,-1
609   0069                 jp error_mnc
610   0069              
611   0069              PUBLIC error_oc
612   0069              
613   0069                 pop hl
614   0069              
615   0069              error_oc:
616   0069              
617   0069                 ld hl,1
618   0069                 scf
619   0069              
620   0069                 ret
621   0069              
622   0069              PUBLIC error_onc
623   0069              
624   0069                 pop hl
625   0069                 pop hl
626   0069                 pop hl
627   0069              
628   0069              error_onc:
629   0069              
630   0069                 ld hl,1
631   0069              
632   0069                 scf
633   0069                 ccf
634   0069              
635   0069                 ret
636   0069              
637   0069              PUBLIC l_readword_hl
638   0069              
639   0069                 inc hl
640   0069                 inc hl
641   0069              
642   0069                 inc hl
643   0069                 inc hl
644   0069              
645   0069                 inc hl
646   0069                 inc hl
647   0069              
648   0069                 inc hl
649   0069                 inc hl
650   0069              
651   0069              l_readword_hl:
652   0069              
653   0069                 ld a,(hl)
654   0069                 inc hl
655   0069                 ld h,(hl)
656   0069                 ld l,a
657   0069              
658   0069                 ret
659   0069              
660   0069              PUBLIC l_offset_ix_de
661   0069              
662   0069              l_offset_ix_de:
663   0069              
664   0069                 push ix
665   0069                 pop de
666   0069              
667   0069                 add hl,de
668   0069                 ret
669   0069              
670   0069              PUBLIC l_offset_ix_bc
671   0069              
672   0069              l_offset_ix_bc:
673   0069              
674   0069                 push ix
675   0069                 pop bc
676   0069              
677   0069                 add hl,bc
678   0069                 ret
679   0069              
680   0069              ; address = 0x100
681   0069              
682   0069                 defs 0x100 - ASMPC
683   0069              
684   0069              section code_crt_start
685   0069              
686   0069              ENDIF
687   0069              
688   0069              defc __page_zero_present = 1
689   0069              
1076  0069              
1077  0069              ENDIF
1078  0069              
1079  0069              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1080  0069              ;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1081  0069              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1082  0069              
1083  0069              __Start:
1084  0069              
1085  0069                 include "../crt_start_di.inc"
1     0069                 IF (__crt_enable_eidi & 0x01)
2     0069              
3     0069  F3                di
4     006A              
5     006A                 ENDIF
6     006A              
1086  006A                 include "../crt_save_sp.inc"
1     006A              
2     006A                 ; do not save sp if
3     006A                 ; * program jumps to address on exit
4     006A                 ; * program halts on exit
5     006A              
6     006A                 IF (__crt_on_exit & 0x10000)
7     006A              
8     006A                    IF (__crt_on_exit & 0x8)
9     006A              
10    006A                       ; program restarts on exit
11    006A              
12    006A                       IF (__register_sp = -1)
13    006A              
14    006A                          ld (__sp_or_ret),sp
15    006A              
16    006A                       ENDIF
17    006A              
18    006A                    ELSE
19    006A              
20    006A                       IF (__crt_on_exit & 0x2)
21    006A              
22    006A                          ; program returns to caller on exit
23    006A              
24    006A                          ld (__sp_or_ret),sp
25    006A              
26    006A                       ELSE
27    006A              
28    006A                          IF (__crt_on_exit & 0x4)
29    006A              
30    006A                             ; program jumps to caller on exit
31    006A              
32    006A                             IF (__crt_enable_commandline != 2)
33    006A              
34    006A                                pop hl
35    006A                                ld (__sp_or_ret),hl
36    006A              
37    006A                             ELSE
38    006A              
39    006A                                pop de
40    006A                                ld (__sp_or_ret),de
41    006A              
42    006A                             ENDIF
43    006A              
44    006A                          ENDIF
45    006A              
46    006A                       ENDIF
47    006A              
48    006A                    ENDIF
49    006A              
50    006A                 ENDIF
51    006A              
1087  006A              
1088  006A              __Restart:
1089  006A              
1090  006A                 include "../crt_init_sp.inc"
1     006A              IF __register_sp < -1
2     006A              
3     006A                 ld sp,(-__register_sp)      ; stack location is stored at memory address
4     006A              
5     006A              ELSE
6     006A              
7     006A                 IF __register_sp != -1
8     006A              
9     006A  31 00 40          ld sp,__register_sp      ; stack is at fixed address
10    006D              
11    006D                 ENDIF
12    006D              
13    006D              ENDIF
14    006D              
1091  006D              
1092  006D                 ; command line
1093  006D              
1094  006D                 IF (__crt_enable_commandline = 1) || (__crt_enable_commandline >= 3)
1095  006D              
1096  006D                    include "../crt_cmdline_empty.inc"
1097  006D              
1098  006D                 ENDIF
1099  006D              
1100  006D              __Restart_2:
1101  006D              
1102  006D                 IF __crt_enable_commandline >= 1
1103  006D              
1104  006D                    push hl                  ; argv
1105  006D                    push bc                  ; argc
1106  006D              
1107  006D                 ENDIF
1108  006D              
1109  006D                 ; initialize data section
1110  006D              
1111  006D                 include "../clib_init_data.inc"
1     006D              
2     006D                 ; initialize data section
3     006D              
4     006D                 IF (__crt_model = 1)
5     006D              
6     006D                    ; rom model + data section is not compressed
7     006D              
8     006D                    EXTERN __CODE_END_tail
9     006D                    EXTERN __DATA_head, __DATA_END_tail
10    006D              
11    006D                    ld hl,__CODE_END_tail
12    006D                    ld de,__DATA_head
13    006D                    ld bc,__DATA_END_tail - __DATA_head
14    006D              
15    006D                    EXTERN asm_memcpy
16    006D                    call   asm_memcpy
17    006D              
18    006D                 ENDIF
19    006D              
20    006D                 IF (__crt_model >= 2)
21    006D              
22    006D                    ; rom model + data section is compressed
23    006D              
24    006D                    EXTERN __CODE_END_tail
25    006D              		EXTERN __DATA_head, __DATA_END_tail
26    006D              
27    006D  21 00 00          ld hl,__CODE_END_tail
28    0070  11 00 00          ld de,__DATA_head
29    0073  01 00 00          ld bc,__DATA_END_tail - __DATA_head
30    0076              
31    0076  78                ld a,b
32    0077  B1                or c
33    0078              
34    0078                    EXTERN   asm_dzx7_standard
35    0078  C4 00 00          call nz, asm_dzx7_standard
36    007B              
37    007B                 ENDIF
38    007B              
1112  007B              
1113  007B                 ; initialize bss section
1114  007B              
1115  007B                 include "../clib_init_bss.inc"
1     007B              
2     007B                 ; initialize bss section
3     007B              
4     007B                 IF __crt_initialize_bss
5     007B              
6     007B                       EXTERN asm_memset
7     007B                       EXTERN __BSS_head, __BSS_UNINITIALIZED_head
8     007B              
9     007B  21 00 00             ld hl,__BSS_head
10    007E  01 00 00             ld bc,__BSS_UNINITIALIZED_head - __BSS_head
11    0081              
12    0081  1E 00                ld e,0
13    0083  CD 00 00             call asm_memset
14    0086              
15    0086                 ENDIF
16    0086              
1116  0086              
1117  0086                 ; interrupt mode
1118  0086              
1119  0086                 include "../crt_set_interrupt_mode.inc"
1     0086                 IF (__crt_org_vector_table > 0)
2     0086              
3     0086                    ; copy interrupt vector table to final destination
4     0086              
5     0086                    EXTERN __interrupt_vectors_head
6     0086                    EXTERN __interrupt_vectors_size
7     0086              
8     0086                    ld hl,__interrupt_vectors_head
9     0086                    ld de,__crt_org_vector_table
10    0086                    ld bc,__interrupt_vectors_size
11    0086              
12    0086                    EXTERN asm_memcpy
13    0086                    call   asm_memcpy
14    0086              
15    0086                 ENDIF
16    0086              
17    0086                 IF (__crt_org_vector_table != 0)
18    0086              
19    0086                    IF (__crt_org_vector_table < 0)
20    0086              
21    0086                       ld a,-__crt_org_vector_table/$100
22    0086              
23    0086                    ELSE
24    0086              
25    0086                       ld a,__crt_org_vector_table/$100
26    0086              
27    0086                    ENDIF
28    0086              
29    0086                    ld i,a
30    0086              
31    0086                    IF (__Z180)
32    0086              
33    0086                      ; Set the z180 internal interrupt vector low byte
34    0086              
35    0086                      IF (__crt_org_vector_table < 0)
36    0086              
37    0086                         ld a,+(-__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
38    0086              
39    0086                      ELSE
40    0086              
41    0086                         ld a,+(__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
42    0086              
43    0086                      ENDIF
44    0086              
45    0086                      out0 (IL),a
46    0086              
47    0086                    ENDIF
48    0086              
49    0086                 ENDIF
50    0086              
51    0086                 IF (__crt_interrupt_mode >= 0) && (__crt_interrupt_mode <= 2)
52    0086              
53    0086                    ; set interrupt mode
54    0086              
55    0086                    im __crt_interrupt_mode
56    0086              
57    0086                 ENDIF
58    0086              
1120  0086              
1121  0086              SECTION code_crt_init          ; user and library initialization
1122  0009              SECTION code_crt_main
1123  0000              
1124  0000                 include "../crt_start_ei.inc"
1     0000                 IF (__crt_enable_eidi & 0x02)
2     0000              
3     0000  FB                ei
4     0001              
5     0001                 ENDIF
6     0001              
1125  0001              
1126  0001                 ; call user program
1127  0001              
1128  0001  CD 00 00       call _main                  ; hl = return status
1129  0004              
1130  0004                 ; run exit stack
1131  0004              
1132  0004                 IF __clib_exit_stack_size > 0
1133  0004              
1134  0004                    EXTERN asm_exit
1135  0004                    jp asm_exit              ; exit function jumps to __Exit
1136  0004              
1137  0004                 ENDIF
1138  0004              
1139  0004              __Exit:
1140  0004              
1141  0004                 IF !((__crt_on_exit & 0x10000) && (__crt_on_exit & 0x8))
1142  0004              
1143  0004                    ; not restarting
1144  0004              
1145  0004  E5                push hl                  ; save return status
1146  0005              
1147  0005                 ENDIF
1148  0005              
1149  0005              SECTION code_crt_exit          ; user and library cleanup
1150  0000              SECTION code_crt_return
1151  0000              
1152  0000                 ; close files
1153  0000              
1154  0000                 include "../clib_close.inc"
1     0000                 IF __crt_enable_close
2     0000              
3     0000                    ; TODO
4     0000                    ; close open files
5     0000              
6     0000                 ENDIF
7     0000              
1155  0000              
1156  0000                 ; terminate
1157  0000              
1158  0000                 include "../crt_exit_eidi.inc"
1     0000                 IF (__crt_enable_eidi & 0x10)
2     0000              
3     0000  F3                di
4     0001              
5     0001                 ENDIF
6     0001              
7     0001                 IF (__crt_interrupt_mode_exit >= 0) && (__crt_interrupt_mode_exit <= 2)
8     0001              
9     0001                       im __crt_interrupt_mode_exit
10    0001              
11    0001                 ENDIF
12    0001              
13    0001                 IF (__crt_enable_eidi & 0x20)
14    0001              
15    0001                    ei
16    0001              
17    0001                 ENDIF
18    0001              
1159  0001                 include "../crt_restore_sp.inc"
1     0001              
2     0001                 IF (__crt_on_exit & 0x10000)
3     0001              
4     0001                    IF (__crt_on_exit & 0x8)
5     0001              
6     0001                       ; program restarts
7     0001              
8     0001                       IF (__crt_enable_commandline < 2)
9     0001              
10    0001                          IF (__register_sp = -1)
11    0001              
12    0001                             ld sp,(__sp_or_ret)
13    0001              
14    0001                          ENDIF
15    0001              
16    0001                       ELSE
17    0001              
18    0001                          IF (__register_sp = -1)
19    0001              
20    0001                             ld sp,(__sp_or_ret)
21    0001              
22    0001                          ENDIF
23    0001              
24    0001                       ENDIF
25    0001              
26    0001                    ELSE
27    0001              
28    0001  E1                   pop hl                ; hl = return status
29    0002              
30    0002                       IF (__crt_on_exit & 0x2)
31    0002              
32    0002                          ; program returns to caller
33    0002              
34    0002                          ld sp,(__sp_or_ret)
35    0002              
36    0002                       ENDIF
37    0002              
38    0002                    ENDIF
39    0002              
40    0002                 ELSE
41    0002              
42    0002                    ; program jumps to absolute address
43    0002              
44    0002                    pop hl                   ; hl = return status
45    0002              
46    0002                 ENDIF
47    0002              
1160  0002                 include "../crt_program_exit.inc"
1     0002              
2     0002                 IF (__crt_on_exit & 0x10000)
3     0002              
4     0002                    IF (__crt_on_exit & 0x8)
5     0002              
6     0002                       ; program restarts
7     0002              
8     0002                       IF (__crt_enable_commandline < 2)
9     0002              
10    0002                          jp __Restart
11    0002              
12    0002                       ELSE
13    0002              
14    0002                          IF (__register_sp != -1)
15    0002              
16    0002                             include "../crt_init_sp.inc"
17    0002              
18    0002                          ENDIF
19    0002              
20    0002                          include "../crt_cmdline_empty.inc"
21    0002              
22    0002                          jp __Restart_2
23    0002              
24    0002                       ENDIF
25    0002              
26    0002                    ELSE
27    0002              
28    0002                       IF (__crt_on_exit & 0x2)
29    0002              
30    0002                          ; program returns to caller
31    0002              
32    0002                          ret
33    0002              
34    0002                       ELSE
35    0002              
36    0002                          IF (__crt_on_exit & 0x4)
37    0002              
38    0002                             ; program jumps to caller
39    0002              
40    0002                             ld de,(__sp_or_ret)
41    0002                             push de
42    0002                             ret
43    0002              
44    0002                          ELSE
45    0002              
46    0002                             ; program halts
47    0002              
48    0002  76                         halt
49    0003  18 FE                      jr ASMPC
50    0005              
51    0005                          ENDIF
52    0005              
53    0005                       ENDIF
54    0005              
55    0005                    ENDIF
56    0005              
57    0005                 ELSE
58    0005              
59    0005                    ; program jumps to absolute address
60    0005              
61    0005                    IF (__crt_on_exit & 0xffff)
62    0005              
63    0005                       jp __crt_on_exit & 0xffff
64    0005              
65    0005                    ELSE
66    0005              
67    0005                       rst 0
68    0005              
69    0005                    ENDIF
70    0005              
71    0005                 ENDIF
72    0005              
1161  0005              
1162  0005              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1163  0005              ;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1164  0005              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1165  0005              
1166  0005              include "../crt_jump_vectors_z80.inc"
1     0005              IF __page_zero_present
2     0005              
3     0005              SECTION smc_jump_vectors
4     0000              
5     0000              IF ((__crt_enable_rst & 0x0202) = 0x0202)
6     0000              
7     0000                 PUBLIC _z80_rst_08h_vector
8     0000              
9     0000                 defc _z80_rst_08h_vector = __z80_rst_08h + 1
10    0000              
11    0000                 EXTERN _z80_rst_08h
12    0000              
13    0000                 __z80_rst_08h:
14    0000              
15    0000                    jp _z80_rst_08h
16    0000              
17    0000              ENDIF
18    0000              
19    0000              IF ((__crt_enable_rst & 0x0404) = 0x0404)
20    0000              
21    0000                 PUBLIC _z80_rst_10h_vector
22    0000              
23    0000                 defc _z80_rst_10h_vector = __z80_rst_10h + 1
24    0000              
25    0000                 EXTERN _z80_rst_10h
26    0000              
27    0000                 __z80_rst_10h:
28    0000              
29    0000                    jp _z80_rst_10h
30    0000              
31    0000              ENDIF
32    0000              
33    0000              IF ((__crt_enable_rst & 0x0808) = 0x0808)
34    0000              
35    0000                 PUBLIC _z80_rst_18h_vector
36    0000              
37    0000                 defc _z80_rst_18h_vector = __z80_rst_18h + 1
38    0000              
39    0000                 EXTERN _z80_rst_18h
40    0000              
41    0000                 __z80_rst_18h:
42    0000              
43    0000                    jp _z80_rst_18h
44    0000              
45    0000              ENDIF
46    0000              
47    0000              IF ((__crt_enable_rst & 0x1010) = 0x1010)
48    0000              
49    0000                 PUBLIC _z80_rst_20h_vector
50    0000              
51    0000                 defc _z80_rst_20h_vector = __z80_rst_20h + 1
52    0000              
53    0000                 EXTERN _z80_rst_20h
54    0000              
55    0000                 __z80_rst_20h:
56    0000              
57    0000                    jp _z80_rst_20h
58    0000              
59    0000              ENDIF
60    0000              
61    0000              IF ((__crt_enable_rst & 0x2020) = 0x2020)
62    0000              
63    0000                 PUBLIC _z80_rst_28h_vector
64    0000              
65    0000                 defc _z80_rst_28h_vector = __z80_rst_28h + 1
66    0000              
67    0000                 EXTERN _z80_rst_28h
68    0000              
69    0000                 __z80_rst_28h:
70    0000              
71    0000                    jp _z80_rst_28h
72    0000              
73    0000              ENDIF
74    0000              
75    0000              IF ((__crt_enable_rst & 0x4040) = 0x4040)
76    0000              
77    0000                 PUBLIC _z80_rst_30h_vector
78    0000              
79    0000                 defc _z80_rst_30h_vector = __z80_rst_30h + 1
80    0000              
81    0000                 EXTERN _z80_rst_30h
82    0000              
83    0000                 __z80_rst_30h:
84    0000              
85    0000                    jp _z80_rst_30h
86    0000              
87    0000              ENDIF
88    0000              
89    0000              IF ((__crt_enable_rst & 0x8080) = 0x8080)
90    0000              
91    0000                 PUBLIC _z80_rst_38h_vector
92    0000              
93    0000                 defc _z80_rst_38h_vector = __z80_rst_38h + 1
94    0000              
95    0000                 EXTERN _z80_rst_38h
96    0000              
97    0000                 __z80_rst_38h:
98    0000              
99    0000                    jp _z80_rst_38h
100   0000              
101   0000              ENDIF
102   0000              
103   0000              IF (__crt_enable_nmi > 1)
104   0000              
105   0000                 PUBLIC _z80_nmi_vector
106   0000              
107   0000                 defc _z80_nmi_vector = __z80_nmi + 1
108   0000              
109   0000                 EXTERN _z80_nmi
110   0000              
111   0000                 __z80_nmi:
112   0000              
113   0000                    jp _z80_nmi
114   0000              
115   0000              ENDIF
116   0000              
117   0000              ENDIF
118   0000              
1167  0000              
1168  0000              IF (__crt_on_exit & 0x10000) && ((__crt_on_exit & 0x6) || ((__crt_on_exit & 0x8) && (__register_sp = -1)))
1169  0000              
1170  0000                 SECTION BSS_UNINITIALIZED
1171  0000                 __sp_or_ret:  defw 0
1172  0000              
1173  0000              ENDIF
1174  0000              
1175  0000              include "../clib_variables.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __clib_balloc_table_size > 0
7     0000              
8     0000                 ; create balloc table
9     0000              
10    0000                 SECTION data_clib
11    0000                 SECTION data_alloc_balloc
12    0000              
13    0000                 PUBLIC __balloc_array
14    0000              
15    0000                 __balloc_array:             defw __balloc_table
16    0000              
17    0000                 SECTION bss_clib
18    0000                 SECTION bss_alloc_balloc
19    0000              
20    0000                 __balloc_table:             defs __clib_balloc_table_size * 2
21    0000              
22    0000              ENDIF
23    0000              
24    0000              IF __clib_malloc_heap_size = -1
25    0000              
26    0000                 ; place malloc heap between bss section and bottom of the stack
27    0000              
28    0000                 SECTION data_clib
29    0000                 SECTION data_alloc_malloc
30    0000              
31    0000                 PUBLIC __malloc_heap
32    0000              
33    0000                 EXTERN __BSS_END_tail
34    0000              
35    0000  00 00          __malloc_heap:              defw __BSS_END_tail
36    0002              
37    0002                 SECTION code_crt_init
38    0009              
39    0009  21 FF FF       ld hl,-1                    ; ensure sp == 0 is accepted
40    000C  39             add hl,sp                   ; hl = top of the stack
41    000D              
42    000D  11 00 00       ld de,__BSS_END_tail
43    0010              
44    0010  AF             xor a
45    0011  ED 52          sbc hl,de                   ; hl = space between top of stack and end of bss - 1
46    0013              
47    0013  DA 04 00       jp c, __Exit                ; if stack overlaps bss, this is a fatal error
48    0016              
49    0016  01 0E 02       ld bc,__crt_stack_size + 14 ; amount of space reserved by stack + minimum heap size - 1
50    0019  ED 42          sbc hl,bc                   ; hl = max heap size - 15
51    001B              
52    001B  DA 04 00       jp c, __Exit                ; if no room for heap, this is a fatal error
53    001E              
54    001E  01 0F 00       ld bc,15
55    0021  09             add hl,bc
56    0022              
57    0022  4D             ld c,l
58    0023  44             ld b,h                      ; bc = available heap size
59    0024              
60    0024  EB             ex de,hl                    ; hl = __BSS_END_tail = start of heap
61    0025              
62    0025                 EXTERN asm_heap_init
63    0025  CD 00 00       call asm_heap_init
64    0028              
65    0028              ENDIF
66    0028              
67    0028              IF __clib_malloc_heap_size < -1
68    0028              
69    0028                 ; place malloc heap between bss section and including address abs(CLIB_MALLOC_HEAP_SIZE)
70    0028              
71    0028                 SECTION data_clib
72    0028                 SECTION data_alloc_malloc
73    0028              
74    0028                 PUBLIC __malloc_heap
75    0028              
76    0028                 EXTERN __BSS_END_tail
77    0028              
78    0028                 __malloc_heap:              defw __BSS_END_tail
79    0028              
80    0028                 SECTION code_crt_init
81    0028              
82    0028                 ld hl,-__clib_malloc_heap_size - 13
83    0028                 ld de,__BSS_END_tail
84    0028              
85    0028                 xor a
86    0028                 sbc hl,de
87    0028              
88    0028                 jp c, __Exit                ; if no room for minimum size heap, fatal error
89    0028              
90    0028                 ld bc,14
91    0028                 add hl,bc
92    0028              
93    0028                 ld c,l
94    0028                 ld b,h                      ; bc = available heap size
95    0028              
96    0028                 ex de,hl                    ; hl = __BSS_END_tail = start of heap
97    0028              
98    0028                 EXTERN asm_heap_init
99    0028                 call asm_heap_init
100   0028              
101   0028              ENDIF
102   0028              
103   0028              IF __clib_malloc_heap_size > 14
104   0028              
105   0028                 ; create malloc heap in bss section
106   0028              
107   0028                 SECTION data_clib
108   0028                 SECTION data_alloc_malloc
109   0028              
110   0028                 PUBLIC __malloc_heap
111   0028              
112   0028                 __malloc_heap:              defw __malloc_block
113   0028              
114   0028                 SECTION bss_clib
115   0028                 SECTION bss_alloc_malloc
116   0028              
117   0028                 __malloc_block:             defs __clib_malloc_heap_size
118   0028              
119   0028                 SECTION code_crt_init
120   0028              
121   0028                 ld hl,__malloc_block
122   0028                 ld bc,__clib_malloc_heap_size
123   0028              
124   0028                 EXTERN asm_heap_init
125   0028                 call asm_heap_init
126   0028              
127   0028              ENDIF
128   0028              
129   0028                 ; create exit stack
130   0028              
131   0028                 SECTION bss_clib
132   0000                 SECTION bss_stdlib
133   0000              
134   0000                 PUBLIC __exit_stack
135   0000              
136   0000  00             __exit_stack:               defb 0
137   0001                                             defs __exit_stack_size * 2
138   0001              
139   0001                 ; create quickexit stack
140   0001              
141   0001                 SECTION bss_clib
142   0000                 SECTION bss_stdlib
143   0001              
144   0001                 PUBLIC __quickexit_stack
145   0001              
146   0001  00             __quickexit_stack:          defb 0
147   0002                                             defs __quickexit_stack_size * 2
148   0002              
149   0002                 ; assign thread id
150   0002              
151   0002                 SECTION data_clib
152   0000                 SECTION data_threads
153   0000              
154   0000                 PUBLIC __thrd_id
155   0000              
156   0000  01             __thrd_id:                  defb 1
157   0001              
158   0001              ;; end library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
159   0001              
1176  0001              
1177  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1178  0001              ;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1179  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1180  0001              
1181  0001              include "../clib_stubs.inc"
1     0001              
2     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0001                 ;; unimplemented
4     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0001              
6     0001                 ; system()
7     0001              
8     0001                 PUBLIC __ch_system
9     0001              
10    0001                 EXTERN error_zc
11    0001              
12    0001                 defc __ch_system = error_zc
13    0001              
14    0001                 ; threads
15    0001                 ; these functions are preliminary only
16    0001              
17    0001                 PUBLIC __thread_context_switch
18    0001                 PUBLIC __thread_block_timeout
19    0001                 PUBLIC __thread_unblock
20    0001              
21    0001                 EXTERN l_ret
22    0001              
23    0001                 defc __thread_context_switch = l_ret
24    0001                 defc __thread_block_timeout  = l_ret
25    0001                 defc __thread_unblock        = l_ret
26    0001              
27    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0001                 ;; dynamically generated functions
29    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0001              
31    0001                 ; dynamic printf
32    0001              
33    0001                 IFNDEF CLIB_OPT_PRINTF
34    0001                    IFDEF CLIB_OPT_PRINTF_2
35    0001                       defc CLIB_OPT_PRINTF = 0
36    0001                    ENDIF
37    0001                 ENDIF
38    0001              
39    0001                 IFNDEF CLIB_OPT_PRINTF_2
40    0001                    IFDEF CLIB_OPT_PRINTF
41    0001                       defc CLIB_OPT_PRINTF_2 = 0
42    0001                    ENDIF
43    0001                 ENDIF
44    0001              
45    0001                 IFDEF CLIB_OPT_PRINTF
46    0001              
47    0001                    IF __SDCC_IY
48    0001              
49    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked_iy.asm"
50    0001              
51    0001                    ELSE
52    0001              
53    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked.asm"
54    0001              
55    0001                    ENDIF
56    0001              
57    0001                 ENDIF
58    0001              
59    0001                 ; dynamic scanf
60    0001              
61    0001                 IFNDEF CLIB_OPT_SCANF
62    0001                    IFDEF CLIB_OPT_SCANF_2
63    0001                       defc CLIB_OPT_SCANF = 0
64    0001                    ENDIF
65    0001                 ENDIF
66    0001              
67    0001                 IFNDEF CLIB_OPT_SCANF_2
68    0001                    IFDEF CLIB_OPT_SCANF
69    0001                       defc CLIB_OPT_SCANF_2 = 0
70    0001                    ENDIF
71    0001                 ENDIF
72    0001              
73    0001                 IFDEF CLIB_OPT_SCANF
74    0001              
75    0001                    IF __SDCC_IY
76    0001              
77    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked_iy.asm"
78    0001              
79    0001                    ELSE
80    0001              
81    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked.asm"
82    0001              
83    0001                    ENDIF
84    0001              
85    0001                 ENDIF
86    0001              
1182  0001              
1183  0001              
1184  0001              
