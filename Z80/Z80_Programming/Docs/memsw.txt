RAMSW:
	Ld	sp,Some_safe_area
        LD       a,40H         ;select upper 32k ram to slice 0 and hex display to '4'
        OUT      (MEMCON),A    ;out to memory control register (7474 with sys res to rs pin).

			;actual ram/rom switch starts here.

        LD      HL,0	       ;Base address of ROM (always 0) 
        ld      DE,HIBUG       ;Copy to address  (F000h) - 4 k rom is used.
        ld      bc,AEND-START  ; calculate  actual length of this prog (or use 1000h for 4 k)
        ldir                   ;copy rom to high ram

        JP      HIBUG+$+3      ;jump to copy in high ram

        LD      A,54H	       ;select status LED = '5'  and select lo mem as RAM
        out     (MEMCON),A     ;Set Low mem as RAM.   & PAGE 0

RM0:    ld      BC,AE1+1-START ;length of code to be put in low ram only..
        ld      de,0	       ;Destination adderss - obviously back to 0000
        ld      hl,HIBUG       ;Load hl with address of hi code
        LDIR                   ;Place a copy of zbug in low ram.
        JP      RAMSW1  ;Continue execution in low ram. (as code was compiled for low ram, jumping to the next
                        ;instruction will send it back)
RAMSW1:
        ld a,0ffh          ;prepare graphics strings. - Continue with normal initialise routine(s)  

Note: My memcontrol reg is made of 4 47ls74 sections where system reset is used to set them all to
a defined state. - using a 374/574 - yields unpredictable results (DOH! as I found out!).

                                  