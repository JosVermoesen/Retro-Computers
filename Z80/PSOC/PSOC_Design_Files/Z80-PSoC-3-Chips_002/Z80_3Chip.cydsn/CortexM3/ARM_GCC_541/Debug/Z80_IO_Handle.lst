ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Z80_IO_Handle.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HandleZ80IO,"ax",%progbits
  20              		.align	2
  21              		.global	HandleZ80IO
  22              		.thumb
  23              		.thumb_func
  24              		.type	HandleZ80IO, %function
  25              	HandleZ80IO:
  26              	.LFB63:
  27              		.file 1 "Z80_IO_Handle.c"
   1:Z80_IO_Handle.c **** /* ========================================
   2:Z80_IO_Handle.c ****  *
   3:Z80_IO_Handle.c ****  * Copyright LAND BOARDS, LLC, 2019
   4:Z80_IO_Handle.c ****  * All Rights Reserved
   5:Z80_IO_Handle.c ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:Z80_IO_Handle.c ****  *
   7:Z80_IO_Handle.c ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:Z80_IO_Handle.c ****  * WHICH IS THE PROPERTY OF Land Boards, LLC.
   9:Z80_IO_Handle.c ****  *
  10:Z80_IO_Handle.c ****  * ========================================
  11:Z80_IO_Handle.c **** */
  12:Z80_IO_Handle.c **** 
  13:Z80_IO_Handle.c **** #include <project.h>
  14:Z80_IO_Handle.c **** #include <Z80_PSoC_3Chips.h>
  15:Z80_IO_Handle.c **** 
  16:Z80_IO_Handle.c **** void HandleZ80IO(void)
  17:Z80_IO_Handle.c **** {
  28              		.loc 1 17 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  18:Z80_IO_Handle.c ****     volatile uint8 ioCrtlRegVal;
  19:Z80_IO_Handle.c ****     volatile uint8 ioZ80Addr;
  20:Z80_IO_Handle.c ****     
  21:Z80_IO_Handle.c ****     ioCrtlRegVal = IO_Stat_Reg_Read();
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 2


  37              		.loc 1 21 0
  38 0004 FFF7FEFF 		bl	IO_Stat_Reg_Read
  39              	.LVL0:
  40 0008 8DF80700 		strb	r0, [sp, #7]
  22:Z80_IO_Handle.c **** #ifdef USING_SIO
  23:Z80_IO_Handle.c ****     if ((ioCrtlRegVal & IACK_MASK) == IN_IACK_CYCLE)
  24:Z80_IO_Handle.c ****     {
  25:Z80_IO_Handle.c ****         SioReadIntRegB();
  26:Z80_IO_Handle.c ****         return;
  27:Z80_IO_Handle.c ****     }
  28:Z80_IO_Handle.c **** #endif
  29:Z80_IO_Handle.c **** #ifdef USING_6850
  30:Z80_IO_Handle.c ****     if ((ioCrtlRegVal & IACK_MASK) == IN_IACK_CYCLE)
  41              		.loc 1 30 0
  42 000c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  43 0010 03F01903 		and	r3, r3, #25
  44 0014 102B     		cmp	r3, #16
  45 0016 02D1     		bne	.L2
  31:Z80_IO_Handle.c ****     {
  32:Z80_IO_Handle.c ****         M6850ReadIntReg();
  46              		.loc 1 32 0
  47 0018 FFF7FEFF 		bl	M6850ReadIntReg
  48              	.LVL1:
  33:Z80_IO_Handle.c ****         return;
  49              		.loc 1 33 0
  50 001c B1E0     		b	.L1
  51              	.L2:
  34:Z80_IO_Handle.c ****     }
  35:Z80_IO_Handle.c **** #endif
  36:Z80_IO_Handle.c ****     ioZ80Addr = AdrLowIn_Read();        // gets the I/O address that the Z80 is accessing
  52              		.loc 1 36 0
  53 001e FFF7FEFF 		bl	AdrLowIn_Read
  54              	.LVL2:
  55 0022 8DF80600 		strb	r0, [sp, #6]
  37:Z80_IO_Handle.c ****     switch (ioZ80Addr)                  // call appropriate functions based on the address
  56              		.loc 1 37 0
  57 0026 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
  58 002a DBB2     		uxtb	r3, r3
  59 002c 382B     		cmp	r3, #56
  60 002e 00F0A180 		beq	.L4
  61 0032 0BD8     		bhi	.L5
  62 0034 192B     		cmp	r3, #25
  63 0036 67D0     		beq	.L6
  64 0038 02D8     		bhi	.L7
  65 003a 182B     		cmp	r3, #24
  66 003c 52D0     		beq	.L8
  67 003e A0E0     		b	.L1
  68              	.L7:
  69 0040 1A2B     		cmp	r3, #26
  70 0042 73D0     		beq	.L9
  71 0044 1B2B     		cmp	r3, #27
  72 0046 00F08380 		beq	.L10
  73 004a 9AE0     		b	.L1
  74              	.L5:
  75 004c 812B     		cmp	r3, #129
  76 004e 08D0     		beq	.L11
  77 0050 02D8     		bhi	.L12
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 3


  78 0052 802B     		cmp	r3, #128
  79 0054 16D0     		beq	.L13
  80 0056 94E0     		b	.L1
  81              	.L12:
  82 0058 822B     		cmp	r3, #130
  83 005a 33D0     		beq	.L14
  84 005c 832B     		cmp	r3, #131
  85 005e 21D0     		beq	.L15
  86 0060 8FE0     		b	.L1
  87              	.L11:
  38:Z80_IO_Handle.c ****     {
  39:Z80_IO_Handle.c **** #ifdef USING_SIO
  40:Z80_IO_Handle.c ****         case SIOA_D:
  41:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
  42:Z80_IO_Handle.c ****             {
  43:Z80_IO_Handle.c ****                 SioReadDataA();
  44:Z80_IO_Handle.c ****                 return;
  45:Z80_IO_Handle.c ****             }
  46:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  47:Z80_IO_Handle.c ****             {
  48:Z80_IO_Handle.c ****                 SioWriteDataA();
  49:Z80_IO_Handle.c ****                 return;
  50:Z80_IO_Handle.c ****             }
  51:Z80_IO_Handle.c ****             break;
  52:Z80_IO_Handle.c ****         case SIOA_C:    // Control register
  53:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  54:Z80_IO_Handle.c ****             {
  55:Z80_IO_Handle.c ****                 SioWriteCtrlA();
  56:Z80_IO_Handle.c ****                 return;
  57:Z80_IO_Handle.c ****             }
  58:Z80_IO_Handle.c ****             break;
  59:Z80_IO_Handle.c ****         case SIOB_D:
  60:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  61:Z80_IO_Handle.c ****             {
  62:Z80_IO_Handle.c ****                 SioReadDataB();
  63:Z80_IO_Handle.c ****                 return;
  64:Z80_IO_Handle.c ****             }
  65:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  66:Z80_IO_Handle.c ****             {
  67:Z80_IO_Handle.c ****                 SioWriteDataB();
  68:Z80_IO_Handle.c ****                 return;
  69:Z80_IO_Handle.c ****             }
  70:Z80_IO_Handle.c ****             break;
  71:Z80_IO_Handle.c ****         case SIOB_C:
  72:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  73:Z80_IO_Handle.c ****             {
  74:Z80_IO_Handle.c ****                 SioWriteCtrlB();
  75:Z80_IO_Handle.c ****                 return;
  76:Z80_IO_Handle.c ****             }
  77:Z80_IO_Handle.c ****             break;
  78:Z80_IO_Handle.c **** #endif
  79:Z80_IO_Handle.c **** #ifdef USING_SDCARD
  80:Z80_IO_Handle.c ****         case SD_DATA:           // 0x88
  81:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  82:Z80_IO_Handle.c ****             {
  83:Z80_IO_Handle.c ****                 SDReadData();
  84:Z80_IO_Handle.c ****             }
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 4


  85:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  86:Z80_IO_Handle.c ****             {
  87:Z80_IO_Handle.c ****                 SDWriteData();
  88:Z80_IO_Handle.c ****             }
  89:Z80_IO_Handle.c ****             break;
  90:Z80_IO_Handle.c ****         case SD_CONTROL: // 0x89 - write command also also includes read status
  91:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  92:Z80_IO_Handle.c ****             {
  93:Z80_IO_Handle.c ****                 SDReadStatus();
  94:Z80_IO_Handle.c ****             }
  95:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  96:Z80_IO_Handle.c ****             {
  97:Z80_IO_Handle.c ****                 SDWriteCommand();
  98:Z80_IO_Handle.c ****             }
  99:Z80_IO_Handle.c ****             break;
 100:Z80_IO_Handle.c ****         case SD_LBA0:    // 0x8A
 101:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 102:Z80_IO_Handle.c ****             {
 103:Z80_IO_Handle.c ****                 SDWriteLBA0();
 104:Z80_IO_Handle.c ****             }
 105:Z80_IO_Handle.c ****             break;
 106:Z80_IO_Handle.c ****         case SD_LBA1:   // 0x8B
 107:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 108:Z80_IO_Handle.c ****             {
 109:Z80_IO_Handle.c ****                 SDWriteLBA1();
 110:Z80_IO_Handle.c ****             }
 111:Z80_IO_Handle.c ****             break;
 112:Z80_IO_Handle.c ****         case SD_LBA2:    // 0x8C
 113:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 114:Z80_IO_Handle.c ****             {
 115:Z80_IO_Handle.c ****                 SDWriteLBA2();
 116:Z80_IO_Handle.c ****             }
 117:Z80_IO_Handle.c ****             break;
 118:Z80_IO_Handle.c **** #endif
 119:Z80_IO_Handle.c **** #ifdef USING_6850
 120:Z80_IO_Handle.c ****         case M6850_D:
 121:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
  88              		.loc 1 121 0
  89 0062 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  90 0066 DBB2     		uxtb	r3, r3
  91 0068 1C2B     		cmp	r3, #28
  92 006a 02D1     		bne	.L16
 122:Z80_IO_Handle.c ****             {
 123:Z80_IO_Handle.c ****                 M6850ReadData();
  93              		.loc 1 123 0
  94 006c FFF7FEFF 		bl	M6850ReadData
  95              	.LVL3:
 124:Z80_IO_Handle.c ****                 return;
  96              		.loc 1 124 0
  97 0070 87E0     		b	.L1
  98              	.L16:
 125:Z80_IO_Handle.c ****             }
 126:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  99              		.loc 1 126 0
 100 0072 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 101 0076 DBB2     		uxtb	r3, r3
 102 0078 1A2B     		cmp	r3, #26
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 5


 103 007a 40F08280 		bne	.L1
 127:Z80_IO_Handle.c ****             {
 128:Z80_IO_Handle.c ****                 M6850WriteData();
 104              		.loc 1 128 0
 105 007e FFF7FEFF 		bl	M6850WriteData
 106              	.LVL4:
 129:Z80_IO_Handle.c ****                 return;
 107              		.loc 1 129 0
 108 0082 7EE0     		b	.L1
 109              	.L13:
 130:Z80_IO_Handle.c ****             }
 131:Z80_IO_Handle.c ****             break;
 132:Z80_IO_Handle.c ****         case  M6850_C:    // Control register
 133:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 110              		.loc 1 133 0
 111 0084 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 112 0088 DBB2     		uxtb	r3, r3
 113 008a 1C2B     		cmp	r3, #28
 114 008c 02D1     		bne	.L17
 134:Z80_IO_Handle.c ****             {
 135:Z80_IO_Handle.c ****                 M6850ReadStatus();
 115              		.loc 1 135 0
 116 008e FFF7FEFF 		bl	M6850ReadStatus
 117              	.LVL5:
 136:Z80_IO_Handle.c ****                 return;
 118              		.loc 1 136 0
 119 0092 76E0     		b	.L1
 120              	.L17:
 137:Z80_IO_Handle.c ****             }
 138:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 121              		.loc 1 138 0
 122 0094 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 123 0098 DBB2     		uxtb	r3, r3
 124 009a 1A2B     		cmp	r3, #26
 125 009c 71D1     		bne	.L1
 139:Z80_IO_Handle.c ****             {
 140:Z80_IO_Handle.c ****                 M6850WriteCtrl();
 126              		.loc 1 140 0
 127 009e FFF7FEFF 		bl	M6850WriteCtrl
 128              	.LVL6:
 141:Z80_IO_Handle.c ****                 return;
 129              		.loc 1 141 0
 130 00a2 6EE0     		b	.L1
 131              	.L15:
 142:Z80_IO_Handle.c ****             }
 143:Z80_IO_Handle.c ****             break;
 144:Z80_IO_Handle.c **** #endif
 145:Z80_IO_Handle.c **** #ifdef USING_6850_2
 146:Z80_IO_Handle.c ****         case M6850_2_D:
 147:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 132              		.loc 1 147 0
 133 00a4 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 134 00a8 DBB2     		uxtb	r3, r3
 135 00aa 1C2B     		cmp	r3, #28
 136 00ac 02D1     		bne	.L18
 148:Z80_IO_Handle.c ****             {
 149:Z80_IO_Handle.c ****                 M6850_2_ReadData();
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 6


 137              		.loc 1 149 0
 138 00ae FFF7FEFF 		bl	M6850_2_ReadData
 139              	.LVL7:
 150:Z80_IO_Handle.c ****                 return;
 140              		.loc 1 150 0
 141 00b2 66E0     		b	.L1
 142              	.L18:
 151:Z80_IO_Handle.c ****             }
 152:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 143              		.loc 1 152 0
 144 00b4 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 145 00b8 DBB2     		uxtb	r3, r3
 146 00ba 1A2B     		cmp	r3, #26
 147 00bc 61D1     		bne	.L1
 153:Z80_IO_Handle.c ****             {
 154:Z80_IO_Handle.c ****                 M6850_2_WriteData();
 148              		.loc 1 154 0
 149 00be FFF7FEFF 		bl	M6850_2_WriteData
 150              	.LVL8:
 155:Z80_IO_Handle.c ****                 return;
 151              		.loc 1 155 0
 152 00c2 5EE0     		b	.L1
 153              	.L14:
 156:Z80_IO_Handle.c ****             }
 157:Z80_IO_Handle.c ****             break;
 158:Z80_IO_Handle.c ****         case  M6850_2_C:    // Control register
 159:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 154              		.loc 1 159 0
 155 00c4 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 156 00c8 DBB2     		uxtb	r3, r3
 157 00ca 1C2B     		cmp	r3, #28
 158 00cc 02D1     		bne	.L19
 160:Z80_IO_Handle.c ****             {
 161:Z80_IO_Handle.c ****                 M6850_2_ReadStatus();
 159              		.loc 1 161 0
 160 00ce FFF7FEFF 		bl	M6850_2_ReadStatus
 161              	.LVL9:
 162:Z80_IO_Handle.c ****                 return;
 162              		.loc 1 162 0
 163 00d2 56E0     		b	.L1
 164              	.L19:
 163:Z80_IO_Handle.c ****             }
 164:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 165              		.loc 1 164 0
 166 00d4 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 167 00d8 DBB2     		uxtb	r3, r3
 168 00da 1A2B     		cmp	r3, #26
 169 00dc 51D1     		bne	.L1
 165:Z80_IO_Handle.c ****             {
 166:Z80_IO_Handle.c ****                 M6850_2_WriteCtrl();
 170              		.loc 1 166 0
 171 00de FFF7FEFF 		bl	M6850_2_WriteCtrl
 172              	.LVL10:
 167:Z80_IO_Handle.c ****                 return;
 173              		.loc 1 167 0
 174 00e2 4EE0     		b	.L1
 175              	.L8:
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 7


 168:Z80_IO_Handle.c ****             }
 169:Z80_IO_Handle.c ****             break;
 170:Z80_IO_Handle.c **** #endif
 171:Z80_IO_Handle.c **** #ifdef USING_FRONT_PANEL
 172:Z80_IO_Handle.c ****         case FR_PNL_IO_LO:
 173:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 176              		.loc 1 173 0
 177 00e4 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 178 00e8 DBB2     		uxtb	r3, r3
 179 00ea 1C2B     		cmp	r3, #28
 180 00ec 03D1     		bne	.L20
 174:Z80_IO_Handle.c ****             {
 175:Z80_IO_Handle.c ****                 FrontPanelZ80Read(0);
 181              		.loc 1 175 0
 182 00ee 0020     		movs	r0, #0
 183 00f0 FFF7FEFF 		bl	FrontPanelZ80Read
 184              	.LVL11:
 176:Z80_IO_Handle.c ****                 return;
 185              		.loc 1 176 0
 186 00f4 45E0     		b	.L1
 187              	.L20:
 177:Z80_IO_Handle.c ****             }
 178:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 188              		.loc 1 178 0
 189 00f6 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 190 00fa DBB2     		uxtb	r3, r3
 191 00fc 1A2B     		cmp	r3, #26
 192 00fe 40D1     		bne	.L1
 179:Z80_IO_Handle.c ****             {
 180:Z80_IO_Handle.c ****                 FrontPanelZ80Write(0);
 193              		.loc 1 180 0
 194 0100 0020     		movs	r0, #0
 195 0102 FFF7FEFF 		bl	FrontPanelZ80Write
 196              	.LVL12:
 181:Z80_IO_Handle.c ****                 return;
 197              		.loc 1 181 0
 198 0106 3CE0     		b	.L1
 199              	.L6:
 182:Z80_IO_Handle.c ****             }
 183:Z80_IO_Handle.c ****             break;
 184:Z80_IO_Handle.c ****         case FR_PNL_IO_LO_MID:
 185:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 200              		.loc 1 185 0
 201 0108 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 202 010c DBB2     		uxtb	r3, r3
 203 010e 1C2B     		cmp	r3, #28
 204 0110 03D1     		bne	.L21
 186:Z80_IO_Handle.c ****             {
 187:Z80_IO_Handle.c ****                 FrontPanelZ80Read(1);
 205              		.loc 1 187 0
 206 0112 0120     		movs	r0, #1
 207 0114 FFF7FEFF 		bl	FrontPanelZ80Read
 208              	.LVL13:
 188:Z80_IO_Handle.c ****                 return;
 209              		.loc 1 188 0
 210 0118 33E0     		b	.L1
 211              	.L21:
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 8


 189:Z80_IO_Handle.c ****             }
 190:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 212              		.loc 1 190 0
 213 011a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 214 011e DBB2     		uxtb	r3, r3
 215 0120 1A2B     		cmp	r3, #26
 216 0122 2ED1     		bne	.L1
 191:Z80_IO_Handle.c ****             {
 192:Z80_IO_Handle.c ****                 FrontPanelZ80Write(1);
 217              		.loc 1 192 0
 218 0124 0120     		movs	r0, #1
 219 0126 FFF7FEFF 		bl	FrontPanelZ80Write
 220              	.LVL14:
 193:Z80_IO_Handle.c ****                 return;
 221              		.loc 1 193 0
 222 012a 2AE0     		b	.L1
 223              	.L9:
 194:Z80_IO_Handle.c ****             }
 195:Z80_IO_Handle.c ****             break;
 196:Z80_IO_Handle.c ****         case FR_PNL_IO_HI_MID:
 197:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 224              		.loc 1 197 0
 225 012c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 226 0130 DBB2     		uxtb	r3, r3
 227 0132 1C2B     		cmp	r3, #28
 228 0134 03D1     		bne	.L22
 198:Z80_IO_Handle.c ****             {
 199:Z80_IO_Handle.c ****                 FrontPanelZ80Read(2);
 229              		.loc 1 199 0
 230 0136 0220     		movs	r0, #2
 231 0138 FFF7FEFF 		bl	FrontPanelZ80Read
 232              	.LVL15:
 200:Z80_IO_Handle.c ****                 return;
 233              		.loc 1 200 0
 234 013c 21E0     		b	.L1
 235              	.L22:
 201:Z80_IO_Handle.c ****             }
 202:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 236              		.loc 1 202 0
 237 013e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 238 0142 DBB2     		uxtb	r3, r3
 239 0144 1A2B     		cmp	r3, #26
 240 0146 1CD1     		bne	.L1
 203:Z80_IO_Handle.c ****             {
 204:Z80_IO_Handle.c ****                 FrontPanelZ80Write(2);
 241              		.loc 1 204 0
 242 0148 0220     		movs	r0, #2
 243 014a FFF7FEFF 		bl	FrontPanelZ80Write
 244              	.LVL16:
 205:Z80_IO_Handle.c ****                 return;
 245              		.loc 1 205 0
 246 014e 18E0     		b	.L1
 247              	.L10:
 206:Z80_IO_Handle.c ****             }
 207:Z80_IO_Handle.c ****             break;
 208:Z80_IO_Handle.c ****         case FR_PNL_IO_HI:
 209:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 9


 248              		.loc 1 209 0
 249 0150 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 250 0154 DBB2     		uxtb	r3, r3
 251 0156 1C2B     		cmp	r3, #28
 252 0158 03D1     		bne	.L23
 210:Z80_IO_Handle.c ****             {
 211:Z80_IO_Handle.c ****                 FrontPanelZ80Read(3);
 253              		.loc 1 211 0
 254 015a 0320     		movs	r0, #3
 255 015c FFF7FEFF 		bl	FrontPanelZ80Read
 256              	.LVL17:
 212:Z80_IO_Handle.c ****                 return;
 257              		.loc 1 212 0
 258 0160 0FE0     		b	.L1
 259              	.L23:
 213:Z80_IO_Handle.c ****             }
 214:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 260              		.loc 1 214 0
 261 0162 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 262 0166 DBB2     		uxtb	r3, r3
 263 0168 1A2B     		cmp	r3, #26
 264 016a 0AD1     		bne	.L1
 215:Z80_IO_Handle.c ****             {
 216:Z80_IO_Handle.c ****                 FrontPanelZ80Write(3);
 265              		.loc 1 216 0
 266 016c 0320     		movs	r0, #3
 267 016e FFF7FEFF 		bl	FrontPanelZ80Write
 268              	.LVL18:
 217:Z80_IO_Handle.c ****                 return;
 269              		.loc 1 217 0
 270 0172 06E0     		b	.L1
 271              	.L4:
 218:Z80_IO_Handle.c ****             }
 219:Z80_IO_Handle.c ****             break;
 220:Z80_IO_Handle.c **** #endif
 221:Z80_IO_Handle.c **** #ifdef USING_MEM_MAP_1
 222:Z80_IO_Handle.c ****         case MEM_MAP_SWAP:
 223:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 272              		.loc 1 223 0
 273 0174 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 274 0178 DBB2     		uxtb	r3, r3
 275 017a 1A2B     		cmp	r3, #26
 276 017c 01D1     		bne	.L1
 224:Z80_IO_Handle.c ****             {
 225:Z80_IO_Handle.c ****                 swap_out_ROM_space();
 277              		.loc 1 225 0
 278 017e FFF7FEFF 		bl	swap_out_ROM_space
 279              	.LVL19:
 280              	.L1:
 226:Z80_IO_Handle.c ****                 return;
 227:Z80_IO_Handle.c ****             }
 228:Z80_IO_Handle.c **** #endif
 229:Z80_IO_Handle.c **** #ifdef USING_EXP_MCCP23017
 230:Z80_IO_Handle.c ****         case PIOA_D:
 231:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 232:Z80_IO_Handle.c ****             {
 233:Z80_IO_Handle.c ****                 PioReadDataA();
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 10


 234:Z80_IO_Handle.c ****                 return;
 235:Z80_IO_Handle.c ****             }
 236:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 237:Z80_IO_Handle.c ****             {
 238:Z80_IO_Handle.c ****                 PioWriteDataA();
 239:Z80_IO_Handle.c ****                 return;
 240:Z80_IO_Handle.c ****             }
 241:Z80_IO_Handle.c ****             break;
 242:Z80_IO_Handle.c ****         case PIOA_C:    // Control register
 243:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 244:Z80_IO_Handle.c ****             {
 245:Z80_IO_Handle.c ****                 PioWriteCtrlA();
 246:Z80_IO_Handle.c ****                 return;
 247:Z80_IO_Handle.c ****             }
 248:Z80_IO_Handle.c ****             break;
 249:Z80_IO_Handle.c ****         case PIOB_D:
 250:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 251:Z80_IO_Handle.c ****             {
 252:Z80_IO_Handle.c ****                 PioReadDataB();
 253:Z80_IO_Handle.c ****                 return;
 254:Z80_IO_Handle.c ****             }
 255:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 256:Z80_IO_Handle.c ****             {
 257:Z80_IO_Handle.c ****                 SioWriteDataB();
 258:Z80_IO_Handle.c ****                 return;
 259:Z80_IO_Handle.c ****             }
 260:Z80_IO_Handle.c ****             break;
 261:Z80_IO_Handle.c ****         case PIOB_C:
 262:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 263:Z80_IO_Handle.c ****             {
 264:Z80_IO_Handle.c ****                 PioWriteCtrlB();
 265:Z80_IO_Handle.c ****                 return;
 266:Z80_IO_Handle.c ****             }
 267:Z80_IO_Handle.c ****             break;
 268:Z80_IO_Handle.c **** #endif
 269:Z80_IO_Handle.c ****         default:    // Handle other cases
 270:Z80_IO_Handle.c ****             break;
 271:Z80_IO_Handle.c ****     }
 272:Z80_IO_Handle.c **** }
 281              		.loc 1 272 0
 282 0182 03B0     		add	sp, sp, #12
 283              		.cfi_def_cfa_offset 4
 284              		@ sp needed
 285 0184 5DF804FB 		ldr	pc, [sp], #4
 286              		.cfi_endproc
 287              	.LFE63:
 288              		.size	HandleZ80IO, .-HandleZ80IO
 289              		.section	.text.ackIO,"ax",%progbits
 290              		.align	2
 291              		.global	ackIO
 292              		.thumb
 293              		.thumb_func
 294              		.type	ackIO, %function
 295              	ackIO:
 296              	.LFB64:
 273:Z80_IO_Handle.c **** 
 274:Z80_IO_Handle.c **** void ackIO(void)
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 11


 275:Z80_IO_Handle.c **** {
 297              		.loc 1 275 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301 0000 08B5     		push	{r3, lr}
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 3, -8
 304              		.cfi_offset 14, -4
 276:Z80_IO_Handle.c ****     IO_Ctrl_Reg_Write(IO_Ctrl_Reg_Read() | CLR_IO_INT_BIT);
 305              		.loc 1 276 0
 306 0002 FFF7FEFF 		bl	IO_Ctrl_Reg_Read
 307              	.LVL20:
 308 0006 40F00100 		orr	r0, r0, #1
 309 000a C0B2     		uxtb	r0, r0
 310 000c FFF7FEFF 		bl	IO_Ctrl_Reg_Write
 311              	.LVL21:
 312 0010 08BD     		pop	{r3, pc}
 313              		.cfi_endproc
 314              	.LFE64:
 315              		.size	ackIO, .-ackIO
 316 0012 00BF     		.section	.text.waitNextIORq,"ax",%progbits
 317              		.align	2
 318              		.global	waitNextIORq
 319              		.thumb
 320              		.thumb_func
 321              		.type	waitNextIORq, %function
 322              	waitNextIORq:
 323              	.LFB65:
 277:Z80_IO_Handle.c **** }
 278:Z80_IO_Handle.c **** 
 279:Z80_IO_Handle.c **** void waitNextIORq(void)
 280:Z80_IO_Handle.c **** {
 324              		.loc 1 280 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 08B5     		push	{r3, lr}
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
 332              	.L28:
 281:Z80_IO_Handle.c ****     while ((IO_Stat_Reg_Read() & IOBUSY_BIT) == 0x00);
 333              		.loc 1 281 0 discriminator 1
 334 0002 FFF7FEFF 		bl	IO_Stat_Reg_Read
 335              	.LVL22:
 336 0006 10F0100F 		tst	r0, #16
 337 000a FAD0     		beq	.L28
 282:Z80_IO_Handle.c **** }
 338              		.loc 1 282 0
 339 000c 08BD     		pop	{r3, pc}
 340              		.cfi_endproc
 341              	.LFE65:
 342              		.size	waitNextIORq, .-waitNextIORq
 343 000e 00BF     		.text
 344              	.Letext0:
 345              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 12


 346              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 347              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 348              		.file 5 "Generated_Source\\PSoC5/IO_Stat_Reg.h"
 349              		.file 6 "./Z80_6850_Emul.h"
 350              		.file 7 "Generated_Source\\PSoC5/AdrLowIn.h"
 351              		.file 8 "./Z80_6850_2_Emul.h"
 352              		.file 9 "./FrontPanel.h"
 353              		.file 10 "./Z80_Mem_Mappers.h"
 354              		.file 11 "Generated_Source\\PSoC5/IO_Ctrl_Reg.h"
 355              		.file 12 "Generated_Source\\PSoC5/core_cm3.h"
 356              		.section	.debug_info,"",%progbits
 357              	.Ldebug_info0:
 358 0000 F2020000 		.4byte	0x2f2
 359 0004 0400     		.2byte	0x4
 360 0006 00000000 		.4byte	.Ldebug_abbrev0
 361 000a 04       		.byte	0x4
 362 000b 01       		.uleb128 0x1
 363 000c 0E010000 		.4byte	.LASF38
 364 0010 0C       		.byte	0xc
 365 0011 B6020000 		.4byte	.LASF39
 366 0015 2B000000 		.4byte	.LASF40
 367 0019 00000000 		.4byte	.Ldebug_ranges0+0
 368 001d 00000000 		.4byte	0
 369 0021 00000000 		.4byte	.Ldebug_line0
 370 0025 02       		.uleb128 0x2
 371 0026 01       		.byte	0x1
 372 0027 06       		.byte	0x6
 373 0028 11030000 		.4byte	.LASF0
 374 002c 02       		.uleb128 0x2
 375 002d 01       		.byte	0x1
 376 002e 08       		.byte	0x8
 377 002f 00010000 		.4byte	.LASF1
 378 0033 02       		.uleb128 0x2
 379 0034 02       		.byte	0x2
 380 0035 05       		.byte	0x5
 381 0036 D9020000 		.4byte	.LASF2
 382 003a 02       		.uleb128 0x2
 383 003b 02       		.byte	0x2
 384 003c 07       		.byte	0x7
 385 003d AD010000 		.4byte	.LASF3
 386 0041 03       		.uleb128 0x3
 387 0042 21000000 		.4byte	.LASF9
 388 0046 02       		.byte	0x2
 389 0047 3F       		.byte	0x3f
 390 0048 4C000000 		.4byte	0x4c
 391 004c 02       		.uleb128 0x2
 392 004d 04       		.byte	0x4
 393 004e 05       		.byte	0x5
 394 004f FC020000 		.4byte	.LASF4
 395 0053 02       		.uleb128 0x2
 396 0054 04       		.byte	0x4
 397 0055 07       		.byte	0x7
 398 0056 3B020000 		.4byte	.LASF5
 399 005a 02       		.uleb128 0x2
 400 005b 08       		.byte	0x8
 401 005c 05       		.byte	0x5
 402 005d 91020000 		.4byte	.LASF6
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 13


 403 0061 02       		.uleb128 0x2
 404 0062 08       		.byte	0x8
 405 0063 07       		.byte	0x7
 406 0064 5A020000 		.4byte	.LASF7
 407 0068 04       		.uleb128 0x4
 408 0069 04       		.byte	0x4
 409 006a 05       		.byte	0x5
 410 006b 696E7400 		.ascii	"int\000"
 411 006f 02       		.uleb128 0x2
 412 0070 04       		.byte	0x4
 413 0071 07       		.byte	0x7
 414 0072 4D020000 		.4byte	.LASF8
 415 0076 03       		.uleb128 0x3
 416 0077 80020000 		.4byte	.LASF10
 417 007b 03       		.byte	0x3
 418 007c 2C       		.byte	0x2c
 419 007d 41000000 		.4byte	0x41
 420 0081 05       		.uleb128 0x5
 421 0082 E3020000 		.4byte	.LASF11
 422 0086 04       		.byte	0x4
 423 0087 E401     		.2byte	0x1e4
 424 0089 2C000000 		.4byte	0x2c
 425 008d 02       		.uleb128 0x2
 426 008e 04       		.byte	0x4
 427 008f 04       		.byte	0x4
 428 0090 FA000000 		.4byte	.LASF12
 429 0094 02       		.uleb128 0x2
 430 0095 08       		.byte	0x8
 431 0096 04       		.byte	0x4
 432 0097 B2000000 		.4byte	.LASF13
 433 009b 02       		.uleb128 0x2
 434 009c 01       		.byte	0x1
 435 009d 08       		.byte	0x8
 436 009e 9F020000 		.4byte	.LASF14
 437 00a2 06       		.uleb128 0x6
 438 00a3 81000000 		.4byte	0x81
 439 00a7 02       		.uleb128 0x2
 440 00a8 08       		.byte	0x8
 441 00a9 04       		.byte	0x4
 442 00aa 05030000 		.4byte	.LASF15
 443 00ae 02       		.uleb128 0x2
 444 00af 04       		.byte	0x4
 445 00b0 07       		.byte	0x7
 446 00b1 88020000 		.4byte	.LASF16
 447 00b5 07       		.uleb128 0x7
 448 00b6 C0010000 		.4byte	.LASF19
 449 00ba 01       		.byte	0x1
 450 00bb 10       		.byte	0x10
 451 00bc 00000000 		.4byte	.LFB63
 452 00c0 88010000 		.4byte	.LFE63-.LFB63
 453 00c4 01       		.uleb128 0x1
 454 00c5 9C       		.byte	0x9c
 455 00c6 EB010000 		.4byte	0x1eb
 456 00ca 08       		.uleb128 0x8
 457 00cb CB000000 		.4byte	.LASF17
 458 00cf 01       		.byte	0x1
 459 00d0 12       		.byte	0x12
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 14


 460 00d1 A2000000 		.4byte	0xa2
 461 00d5 02       		.uleb128 0x2
 462 00d6 91       		.byte	0x91
 463 00d7 77       		.sleb128 -9
 464 00d8 08       		.uleb128 0x8
 465 00d9 1D030000 		.4byte	.LASF18
 466 00dd 01       		.byte	0x1
 467 00de 13       		.byte	0x13
 468 00df A2000000 		.4byte	0xa2
 469 00e3 02       		.uleb128 0x2
 470 00e4 91       		.byte	0x91
 471 00e5 76       		.sleb128 -10
 472 00e6 09       		.uleb128 0x9
 473 00e7 08000000 		.4byte	.LVL0
 474 00eb 45020000 		.4byte	0x245
 475 00ef 09       		.uleb128 0x9
 476 00f0 1C000000 		.4byte	.LVL1
 477 00f4 50020000 		.4byte	0x250
 478 00f8 09       		.uleb128 0x9
 479 00f9 22000000 		.4byte	.LVL2
 480 00fd 5B020000 		.4byte	0x25b
 481 0101 09       		.uleb128 0x9
 482 0102 70000000 		.4byte	.LVL3
 483 0106 66020000 		.4byte	0x266
 484 010a 09       		.uleb128 0x9
 485 010b 82000000 		.4byte	.LVL4
 486 010f 71020000 		.4byte	0x271
 487 0113 09       		.uleb128 0x9
 488 0114 92000000 		.4byte	.LVL5
 489 0118 7C020000 		.4byte	0x27c
 490 011c 09       		.uleb128 0x9
 491 011d A2000000 		.4byte	.LVL6
 492 0121 87020000 		.4byte	0x287
 493 0125 09       		.uleb128 0x9
 494 0126 B2000000 		.4byte	.LVL7
 495 012a 92020000 		.4byte	0x292
 496 012e 09       		.uleb128 0x9
 497 012f C2000000 		.4byte	.LVL8
 498 0133 9D020000 		.4byte	0x29d
 499 0137 09       		.uleb128 0x9
 500 0138 D2000000 		.4byte	.LVL9
 501 013c A8020000 		.4byte	0x2a8
 502 0140 09       		.uleb128 0x9
 503 0141 E2000000 		.4byte	.LVL10
 504 0145 B3020000 		.4byte	0x2b3
 505 0149 0A       		.uleb128 0xa
 506 014a F4000000 		.4byte	.LVL11
 507 014e BE020000 		.4byte	0x2be
 508 0152 5C010000 		.4byte	0x15c
 509 0156 0B       		.uleb128 0xb
 510 0157 01       		.uleb128 0x1
 511 0158 50       		.byte	0x50
 512 0159 01       		.uleb128 0x1
 513 015a 30       		.byte	0x30
 514 015b 00       		.byte	0
 515 015c 0A       		.uleb128 0xa
 516 015d 06010000 		.4byte	.LVL12
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 15


 517 0161 C9020000 		.4byte	0x2c9
 518 0165 6F010000 		.4byte	0x16f
 519 0169 0B       		.uleb128 0xb
 520 016a 01       		.uleb128 0x1
 521 016b 50       		.byte	0x50
 522 016c 01       		.uleb128 0x1
 523 016d 30       		.byte	0x30
 524 016e 00       		.byte	0
 525 016f 0A       		.uleb128 0xa
 526 0170 18010000 		.4byte	.LVL13
 527 0174 BE020000 		.4byte	0x2be
 528 0178 82010000 		.4byte	0x182
 529 017c 0B       		.uleb128 0xb
 530 017d 01       		.uleb128 0x1
 531 017e 50       		.byte	0x50
 532 017f 01       		.uleb128 0x1
 533 0180 31       		.byte	0x31
 534 0181 00       		.byte	0
 535 0182 0A       		.uleb128 0xa
 536 0183 2A010000 		.4byte	.LVL14
 537 0187 C9020000 		.4byte	0x2c9
 538 018b 95010000 		.4byte	0x195
 539 018f 0B       		.uleb128 0xb
 540 0190 01       		.uleb128 0x1
 541 0191 50       		.byte	0x50
 542 0192 01       		.uleb128 0x1
 543 0193 31       		.byte	0x31
 544 0194 00       		.byte	0
 545 0195 0A       		.uleb128 0xa
 546 0196 3C010000 		.4byte	.LVL15
 547 019a BE020000 		.4byte	0x2be
 548 019e A8010000 		.4byte	0x1a8
 549 01a2 0B       		.uleb128 0xb
 550 01a3 01       		.uleb128 0x1
 551 01a4 50       		.byte	0x50
 552 01a5 01       		.uleb128 0x1
 553 01a6 32       		.byte	0x32
 554 01a7 00       		.byte	0
 555 01a8 0A       		.uleb128 0xa
 556 01a9 4E010000 		.4byte	.LVL16
 557 01ad C9020000 		.4byte	0x2c9
 558 01b1 BB010000 		.4byte	0x1bb
 559 01b5 0B       		.uleb128 0xb
 560 01b6 01       		.uleb128 0x1
 561 01b7 50       		.byte	0x50
 562 01b8 01       		.uleb128 0x1
 563 01b9 32       		.byte	0x32
 564 01ba 00       		.byte	0
 565 01bb 0A       		.uleb128 0xa
 566 01bc 60010000 		.4byte	.LVL17
 567 01c0 BE020000 		.4byte	0x2be
 568 01c4 CE010000 		.4byte	0x1ce
 569 01c8 0B       		.uleb128 0xb
 570 01c9 01       		.uleb128 0x1
 571 01ca 50       		.byte	0x50
 572 01cb 01       		.uleb128 0x1
 573 01cc 33       		.byte	0x33
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 16


 574 01cd 00       		.byte	0
 575 01ce 0A       		.uleb128 0xa
 576 01cf 72010000 		.4byte	.LVL18
 577 01d3 C9020000 		.4byte	0x2c9
 578 01d7 E1010000 		.4byte	0x1e1
 579 01db 0B       		.uleb128 0xb
 580 01dc 01       		.uleb128 0x1
 581 01dd 50       		.byte	0x50
 582 01de 01       		.uleb128 0x1
 583 01df 33       		.byte	0x33
 584 01e0 00       		.byte	0
 585 01e1 09       		.uleb128 0x9
 586 01e2 82010000 		.4byte	.LVL19
 587 01e6 D4020000 		.4byte	0x2d4
 588 01ea 00       		.byte	0
 589 01eb 0C       		.uleb128 0xc
 590 01ec D3020000 		.4byte	.LASF20
 591 01f0 01       		.byte	0x1
 592 01f1 1201     		.2byte	0x112
 593 01f3 00000000 		.4byte	.LFB64
 594 01f7 12000000 		.4byte	.LFE64-.LFB64
 595 01fb 01       		.uleb128 0x1
 596 01fc 9C       		.byte	0x9c
 597 01fd 14020000 		.4byte	0x214
 598 0201 09       		.uleb128 0x9
 599 0202 06000000 		.4byte	.LVL20
 600 0206 DF020000 		.4byte	0x2df
 601 020a 09       		.uleb128 0x9
 602 020b 10000000 		.4byte	.LVL21
 603 020f EA020000 		.4byte	0x2ea
 604 0213 00       		.byte	0
 605 0214 0C       		.uleb128 0xc
 606 0215 C6020000 		.4byte	.LASF21
 607 0219 01       		.byte	0x1
 608 021a 1701     		.2byte	0x117
 609 021c 00000000 		.4byte	.LFB65
 610 0220 0E000000 		.4byte	.LFE65-.LFB65
 611 0224 01       		.uleb128 0x1
 612 0225 9C       		.byte	0x9c
 613 0226 34020000 		.4byte	0x234
 614 022a 09       		.uleb128 0x9
 615 022b 06000000 		.4byte	.LVL22
 616 022f 45020000 		.4byte	0x245
 617 0233 00       		.byte	0
 618 0234 0D       		.uleb128 0xd
 619 0235 0C020000 		.4byte	.LASF41
 620 0239 0C       		.byte	0xc
 621 023a 1207     		.2byte	0x712
 622 023c 40020000 		.4byte	0x240
 623 0240 06       		.uleb128 0x6
 624 0241 76000000 		.4byte	0x76
 625 0245 0E       		.uleb128 0xe
 626 0246 9C010000 		.4byte	.LASF22
 627 024a 9C010000 		.4byte	.LASF22
 628 024e 05       		.byte	0x5
 629 024f 30       		.byte	0x30
 630 0250 0E       		.uleb128 0xe
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 17


 631 0251 2B020000 		.4byte	.LASF23
 632 0255 2B020000 		.4byte	.LASF23
 633 0259 06       		.byte	0x6
 634 025a 17       		.byte	0x17
 635 025b 0E       		.uleb128 0xe
 636 025c FE010000 		.4byte	.LASF24
 637 0260 FE010000 		.4byte	.LASF24
 638 0264 07       		.byte	0x7
 639 0265 30       		.byte	0x30
 640 0266 0E       		.uleb128 0xe
 641 0267 13000000 		.4byte	.LASF25
 642 026b 13000000 		.4byte	.LASF25
 643 026f 06       		.byte	0x6
 644 0270 11       		.byte	0x11
 645 0271 0E       		.uleb128 0xe
 646 0272 D8000000 		.4byte	.LASF26
 647 0276 D8000000 		.4byte	.LASF26
 648 027a 06       		.byte	0x6
 649 027b 12       		.byte	0x12
 650 027c 0E       		.uleb128 0xe
 651 027d EE010000 		.4byte	.LASF27
 652 0281 EE010000 		.4byte	.LASF27
 653 0285 06       		.byte	0x6
 654 0286 13       		.byte	0x13
 655 0287 0E       		.uleb128 0xe
 656 0288 71020000 		.4byte	.LASF28
 657 028c 71020000 		.4byte	.LASF28
 658 0290 06       		.byte	0x6
 659 0291 14       		.byte	0x14
 660 0292 0E       		.uleb128 0xe
 661 0293 DD010000 		.4byte	.LASF29
 662 0297 DD010000 		.4byte	.LASF29
 663 029b 08       		.byte	0x8
 664 029c 11       		.byte	0x11
 665 029d 0E       		.uleb128 0xe
 666 029e A0000000 		.4byte	.LASF30
 667 02a2 A0000000 		.4byte	.LASF30
 668 02a6 08       		.byte	0x8
 669 02a7 12       		.byte	0x12
 670 02a8 0E       		.uleb128 0xe
 671 02a9 E9020000 		.4byte	.LASF31
 672 02ad E9020000 		.4byte	.LASF31
 673 02b1 08       		.byte	0x8
 674 02b2 13       		.byte	0x13
 675 02b3 0E       		.uleb128 0xe
 676 02b4 19020000 		.4byte	.LASF32
 677 02b8 19020000 		.4byte	.LASF32
 678 02bc 08       		.byte	0x8
 679 02bd 14       		.byte	0x14
 680 02be 0E       		.uleb128 0xe
 681 02bf B9000000 		.4byte	.LASF33
 682 02c3 B9000000 		.4byte	.LASF33
 683 02c7 09       		.byte	0x9
 684 02c8 41       		.byte	0x41
 685 02c9 0E       		.uleb128 0xe
 686 02ca 00000000 		.4byte	.LASF34
 687 02ce 00000000 		.4byte	.LASF34
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 18


 688 02d2 09       		.byte	0x9
 689 02d3 42       		.byte	0x42
 690 02d4 0E       		.uleb128 0xe
 691 02d5 E7000000 		.4byte	.LASF35
 692 02d9 E7000000 		.4byte	.LASF35
 693 02dd 0A       		.byte	0xa
 694 02de 19       		.byte	0x19
 695 02df 0E       		.uleb128 0xe
 696 02e0 CC010000 		.4byte	.LASF36
 697 02e4 CC010000 		.4byte	.LASF36
 698 02e8 0B       		.byte	0xb
 699 02e9 30       		.byte	0x30
 700 02ea 0E       		.uleb128 0xe
 701 02eb A4020000 		.4byte	.LASF37
 702 02ef A4020000 		.4byte	.LASF37
 703 02f3 0B       		.byte	0xb
 704 02f4 2F       		.byte	0x2f
 705 02f5 00       		.byte	0
 706              		.section	.debug_abbrev,"",%progbits
 707              	.Ldebug_abbrev0:
 708 0000 01       		.uleb128 0x1
 709 0001 11       		.uleb128 0x11
 710 0002 01       		.byte	0x1
 711 0003 25       		.uleb128 0x25
 712 0004 0E       		.uleb128 0xe
 713 0005 13       		.uleb128 0x13
 714 0006 0B       		.uleb128 0xb
 715 0007 03       		.uleb128 0x3
 716 0008 0E       		.uleb128 0xe
 717 0009 1B       		.uleb128 0x1b
 718 000a 0E       		.uleb128 0xe
 719 000b 55       		.uleb128 0x55
 720 000c 17       		.uleb128 0x17
 721 000d 11       		.uleb128 0x11
 722 000e 01       		.uleb128 0x1
 723 000f 10       		.uleb128 0x10
 724 0010 17       		.uleb128 0x17
 725 0011 00       		.byte	0
 726 0012 00       		.byte	0
 727 0013 02       		.uleb128 0x2
 728 0014 24       		.uleb128 0x24
 729 0015 00       		.byte	0
 730 0016 0B       		.uleb128 0xb
 731 0017 0B       		.uleb128 0xb
 732 0018 3E       		.uleb128 0x3e
 733 0019 0B       		.uleb128 0xb
 734 001a 03       		.uleb128 0x3
 735 001b 0E       		.uleb128 0xe
 736 001c 00       		.byte	0
 737 001d 00       		.byte	0
 738 001e 03       		.uleb128 0x3
 739 001f 16       		.uleb128 0x16
 740 0020 00       		.byte	0
 741 0021 03       		.uleb128 0x3
 742 0022 0E       		.uleb128 0xe
 743 0023 3A       		.uleb128 0x3a
 744 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 19


 745 0025 3B       		.uleb128 0x3b
 746 0026 0B       		.uleb128 0xb
 747 0027 49       		.uleb128 0x49
 748 0028 13       		.uleb128 0x13
 749 0029 00       		.byte	0
 750 002a 00       		.byte	0
 751 002b 04       		.uleb128 0x4
 752 002c 24       		.uleb128 0x24
 753 002d 00       		.byte	0
 754 002e 0B       		.uleb128 0xb
 755 002f 0B       		.uleb128 0xb
 756 0030 3E       		.uleb128 0x3e
 757 0031 0B       		.uleb128 0xb
 758 0032 03       		.uleb128 0x3
 759 0033 08       		.uleb128 0x8
 760 0034 00       		.byte	0
 761 0035 00       		.byte	0
 762 0036 05       		.uleb128 0x5
 763 0037 16       		.uleb128 0x16
 764 0038 00       		.byte	0
 765 0039 03       		.uleb128 0x3
 766 003a 0E       		.uleb128 0xe
 767 003b 3A       		.uleb128 0x3a
 768 003c 0B       		.uleb128 0xb
 769 003d 3B       		.uleb128 0x3b
 770 003e 05       		.uleb128 0x5
 771 003f 49       		.uleb128 0x49
 772 0040 13       		.uleb128 0x13
 773 0041 00       		.byte	0
 774 0042 00       		.byte	0
 775 0043 06       		.uleb128 0x6
 776 0044 35       		.uleb128 0x35
 777 0045 00       		.byte	0
 778 0046 49       		.uleb128 0x49
 779 0047 13       		.uleb128 0x13
 780 0048 00       		.byte	0
 781 0049 00       		.byte	0
 782 004a 07       		.uleb128 0x7
 783 004b 2E       		.uleb128 0x2e
 784 004c 01       		.byte	0x1
 785 004d 3F       		.uleb128 0x3f
 786 004e 19       		.uleb128 0x19
 787 004f 03       		.uleb128 0x3
 788 0050 0E       		.uleb128 0xe
 789 0051 3A       		.uleb128 0x3a
 790 0052 0B       		.uleb128 0xb
 791 0053 3B       		.uleb128 0x3b
 792 0054 0B       		.uleb128 0xb
 793 0055 27       		.uleb128 0x27
 794 0056 19       		.uleb128 0x19
 795 0057 11       		.uleb128 0x11
 796 0058 01       		.uleb128 0x1
 797 0059 12       		.uleb128 0x12
 798 005a 06       		.uleb128 0x6
 799 005b 40       		.uleb128 0x40
 800 005c 18       		.uleb128 0x18
 801 005d 9742     		.uleb128 0x2117
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 20


 802 005f 19       		.uleb128 0x19
 803 0060 01       		.uleb128 0x1
 804 0061 13       		.uleb128 0x13
 805 0062 00       		.byte	0
 806 0063 00       		.byte	0
 807 0064 08       		.uleb128 0x8
 808 0065 34       		.uleb128 0x34
 809 0066 00       		.byte	0
 810 0067 03       		.uleb128 0x3
 811 0068 0E       		.uleb128 0xe
 812 0069 3A       		.uleb128 0x3a
 813 006a 0B       		.uleb128 0xb
 814 006b 3B       		.uleb128 0x3b
 815 006c 0B       		.uleb128 0xb
 816 006d 49       		.uleb128 0x49
 817 006e 13       		.uleb128 0x13
 818 006f 02       		.uleb128 0x2
 819 0070 18       		.uleb128 0x18
 820 0071 00       		.byte	0
 821 0072 00       		.byte	0
 822 0073 09       		.uleb128 0x9
 823 0074 898201   		.uleb128 0x4109
 824 0077 00       		.byte	0
 825 0078 11       		.uleb128 0x11
 826 0079 01       		.uleb128 0x1
 827 007a 31       		.uleb128 0x31
 828 007b 13       		.uleb128 0x13
 829 007c 00       		.byte	0
 830 007d 00       		.byte	0
 831 007e 0A       		.uleb128 0xa
 832 007f 898201   		.uleb128 0x4109
 833 0082 01       		.byte	0x1
 834 0083 11       		.uleb128 0x11
 835 0084 01       		.uleb128 0x1
 836 0085 31       		.uleb128 0x31
 837 0086 13       		.uleb128 0x13
 838 0087 01       		.uleb128 0x1
 839 0088 13       		.uleb128 0x13
 840 0089 00       		.byte	0
 841 008a 00       		.byte	0
 842 008b 0B       		.uleb128 0xb
 843 008c 8A8201   		.uleb128 0x410a
 844 008f 00       		.byte	0
 845 0090 02       		.uleb128 0x2
 846 0091 18       		.uleb128 0x18
 847 0092 9142     		.uleb128 0x2111
 848 0094 18       		.uleb128 0x18
 849 0095 00       		.byte	0
 850 0096 00       		.byte	0
 851 0097 0C       		.uleb128 0xc
 852 0098 2E       		.uleb128 0x2e
 853 0099 01       		.byte	0x1
 854 009a 3F       		.uleb128 0x3f
 855 009b 19       		.uleb128 0x19
 856 009c 03       		.uleb128 0x3
 857 009d 0E       		.uleb128 0xe
 858 009e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 21


 859 009f 0B       		.uleb128 0xb
 860 00a0 3B       		.uleb128 0x3b
 861 00a1 05       		.uleb128 0x5
 862 00a2 27       		.uleb128 0x27
 863 00a3 19       		.uleb128 0x19
 864 00a4 11       		.uleb128 0x11
 865 00a5 01       		.uleb128 0x1
 866 00a6 12       		.uleb128 0x12
 867 00a7 06       		.uleb128 0x6
 868 00a8 40       		.uleb128 0x40
 869 00a9 18       		.uleb128 0x18
 870 00aa 9742     		.uleb128 0x2117
 871 00ac 19       		.uleb128 0x19
 872 00ad 01       		.uleb128 0x1
 873 00ae 13       		.uleb128 0x13
 874 00af 00       		.byte	0
 875 00b0 00       		.byte	0
 876 00b1 0D       		.uleb128 0xd
 877 00b2 34       		.uleb128 0x34
 878 00b3 00       		.byte	0
 879 00b4 03       		.uleb128 0x3
 880 00b5 0E       		.uleb128 0xe
 881 00b6 3A       		.uleb128 0x3a
 882 00b7 0B       		.uleb128 0xb
 883 00b8 3B       		.uleb128 0x3b
 884 00b9 05       		.uleb128 0x5
 885 00ba 49       		.uleb128 0x49
 886 00bb 13       		.uleb128 0x13
 887 00bc 3F       		.uleb128 0x3f
 888 00bd 19       		.uleb128 0x19
 889 00be 3C       		.uleb128 0x3c
 890 00bf 19       		.uleb128 0x19
 891 00c0 00       		.byte	0
 892 00c1 00       		.byte	0
 893 00c2 0E       		.uleb128 0xe
 894 00c3 2E       		.uleb128 0x2e
 895 00c4 00       		.byte	0
 896 00c5 3F       		.uleb128 0x3f
 897 00c6 19       		.uleb128 0x19
 898 00c7 3C       		.uleb128 0x3c
 899 00c8 19       		.uleb128 0x19
 900 00c9 6E       		.uleb128 0x6e
 901 00ca 0E       		.uleb128 0xe
 902 00cb 03       		.uleb128 0x3
 903 00cc 0E       		.uleb128 0xe
 904 00cd 3A       		.uleb128 0x3a
 905 00ce 0B       		.uleb128 0xb
 906 00cf 3B       		.uleb128 0x3b
 907 00d0 0B       		.uleb128 0xb
 908 00d1 00       		.byte	0
 909 00d2 00       		.byte	0
 910 00d3 00       		.byte	0
 911              		.section	.debug_aranges,"",%progbits
 912 0000 2C000000 		.4byte	0x2c
 913 0004 0200     		.2byte	0x2
 914 0006 00000000 		.4byte	.Ldebug_info0
 915 000a 04       		.byte	0x4
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 22


 916 000b 00       		.byte	0
 917 000c 0000     		.2byte	0
 918 000e 0000     		.2byte	0
 919 0010 00000000 		.4byte	.LFB63
 920 0014 88010000 		.4byte	.LFE63-.LFB63
 921 0018 00000000 		.4byte	.LFB64
 922 001c 12000000 		.4byte	.LFE64-.LFB64
 923 0020 00000000 		.4byte	.LFB65
 924 0024 0E000000 		.4byte	.LFE65-.LFB65
 925 0028 00000000 		.4byte	0
 926 002c 00000000 		.4byte	0
 927              		.section	.debug_ranges,"",%progbits
 928              	.Ldebug_ranges0:
 929 0000 00000000 		.4byte	.LFB63
 930 0004 88010000 		.4byte	.LFE63
 931 0008 00000000 		.4byte	.LFB64
 932 000c 12000000 		.4byte	.LFE64
 933 0010 00000000 		.4byte	.LFB65
 934 0014 0E000000 		.4byte	.LFE65
 935 0018 00000000 		.4byte	0
 936 001c 00000000 		.4byte	0
 937              		.section	.debug_line,"",%progbits
 938              	.Ldebug_line0:
 939 0000 57020000 		.section	.debug_str,"MS",%progbits,1
 939      0200DA01 
 939      00000201 
 939      FB0E0D00 
 939      01010101 
 940              	.LASF34:
 941 0000 46726F6E 		.ascii	"FrontPanelZ80Write\000"
 941      7450616E 
 941      656C5A38 
 941      30577269 
 941      746500
 942              	.LASF25:
 943 0013 4D363835 		.ascii	"M6850ReadData\000"
 943      30526561 
 943      64446174 
 943      6100
 944              	.LASF9:
 945 0021 5F5F696E 		.ascii	"__int32_t\000"
 945      7433325F 
 945      7400
 946              	.LASF40:
 947 002b 433A5C55 		.ascii	"C:\\Users\\dgilliland\\Documents\\GitHub\\Retro-Com"
 947      73657273 
 947      5C646769 
 947      6C6C696C 
 947      616E645C 
 948 0059 70757465 		.ascii	"puters\\Z80\\PSOC\\PSOC_Design_Files\\Z80-PSoC-3-Ch"
 948      72735C5A 
 948      38305C50 
 948      534F435C 
 948      50534F43 
 949 0088 6970735F 		.ascii	"ips_002\\Z80_3Chip.cydsn\000"
 949      3030325C 
 949      5A38305F 
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 23


 949      33436869 
 949      702E6379 
 950              	.LASF30:
 951 00a0 4D363835 		.ascii	"M6850_2_WriteData\000"
 951      305F325F 
 951      57726974 
 951      65446174 
 951      6100
 952              	.LASF13:
 953 00b2 646F7562 		.ascii	"double\000"
 953      6C6500
 954              	.LASF33:
 955 00b9 46726F6E 		.ascii	"FrontPanelZ80Read\000"
 955      7450616E 
 955      656C5A38 
 955      30526561 
 955      6400
 956              	.LASF17:
 957 00cb 696F4372 		.ascii	"ioCrtlRegVal\000"
 957      746C5265 
 957      6756616C 
 957      00
 958              	.LASF26:
 959 00d8 4D363835 		.ascii	"M6850WriteData\000"
 959      30577269 
 959      74654461 
 959      746100
 960              	.LASF35:
 961 00e7 73776170 		.ascii	"swap_out_ROM_space\000"
 961      5F6F7574 
 961      5F524F4D 
 961      5F737061 
 961      636500
 962              	.LASF12:
 963 00fa 666C6F61 		.ascii	"float\000"
 963      7400
 964              	.LASF1:
 965 0100 756E7369 		.ascii	"unsigned char\000"
 965      676E6564 
 965      20636861 
 965      7200
 966              	.LASF38:
 967 010e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 967      43313120 
 967      352E342E 
 967      31203230 
 967      31363036 
 968 0141 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 968      20726576 
 968      6973696F 
 968      6E203233 
 968      37373135 
 969 0174 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 969      66756E63 
 969      74696F6E 
 969      2D736563 
 969      74696F6E 
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 24


 970              	.LASF22:
 971 019c 494F5F53 		.ascii	"IO_Stat_Reg_Read\000"
 971      7461745F 
 971      5265675F 
 971      52656164 
 971      00
 972              	.LASF3:
 973 01ad 73686F72 		.ascii	"short unsigned int\000"
 973      7420756E 
 973      7369676E 
 973      65642069 
 973      6E7400
 974              	.LASF19:
 975 01c0 48616E64 		.ascii	"HandleZ80IO\000"
 975      6C655A38 
 975      30494F00 
 976              	.LASF36:
 977 01cc 494F5F43 		.ascii	"IO_Ctrl_Reg_Read\000"
 977      74726C5F 
 977      5265675F 
 977      52656164 
 977      00
 978              	.LASF29:
 979 01dd 4D363835 		.ascii	"M6850_2_ReadData\000"
 979      305F325F 
 979      52656164 
 979      44617461 
 979      00
 980              	.LASF27:
 981 01ee 4D363835 		.ascii	"M6850ReadStatus\000"
 981      30526561 
 981      64537461 
 981      74757300 
 982              	.LASF24:
 983 01fe 4164724C 		.ascii	"AdrLowIn_Read\000"
 983      6F77496E 
 983      5F526561 
 983      6400
 984              	.LASF41:
 985 020c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 985      52784275 
 985      66666572 
 985      00
 986              	.LASF32:
 987 0219 4D363835 		.ascii	"M6850_2_WriteCtrl\000"
 987      305F325F 
 987      57726974 
 987      65437472 
 987      6C00
 988              	.LASF23:
 989 022b 4D363835 		.ascii	"M6850ReadIntReg\000"
 989      30526561 
 989      64496E74 
 989      52656700 
 990              	.LASF5:
 991 023b 6C6F6E67 		.ascii	"long unsigned int\000"
 991      20756E73 
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 25


 991      69676E65 
 991      6420696E 
 991      7400
 992              	.LASF8:
 993 024d 756E7369 		.ascii	"unsigned int\000"
 993      676E6564 
 993      20696E74 
 993      00
 994              	.LASF7:
 995 025a 6C6F6E67 		.ascii	"long long unsigned int\000"
 995      206C6F6E 
 995      6720756E 
 995      7369676E 
 995      65642069 
 996              	.LASF28:
 997 0271 4D363835 		.ascii	"M6850WriteCtrl\000"
 997      30577269 
 997      74654374 
 997      726C00
 998              	.LASF10:
 999 0280 696E7433 		.ascii	"int32_t\000"
 999      325F7400 
 1000              	.LASF16:
 1001 0288 73697A65 		.ascii	"sizetype\000"
 1001      74797065 
 1001      00
 1002              	.LASF6:
 1003 0291 6C6F6E67 		.ascii	"long long int\000"
 1003      206C6F6E 
 1003      6720696E 
 1003      7400
 1004              	.LASF14:
 1005 029f 63686172 		.ascii	"char\000"
 1005      00
 1006              	.LASF37:
 1007 02a4 494F5F43 		.ascii	"IO_Ctrl_Reg_Write\000"
 1007      74726C5F 
 1007      5265675F 
 1007      57726974 
 1007      6500
 1008              	.LASF39:
 1009 02b6 5A38305F 		.ascii	"Z80_IO_Handle.c\000"
 1009      494F5F48 
 1009      616E646C 
 1009      652E6300 
 1010              	.LASF21:
 1011 02c6 77616974 		.ascii	"waitNextIORq\000"
 1011      4E657874 
 1011      494F5271 
 1011      00
 1012              	.LASF20:
 1013 02d3 61636B49 		.ascii	"ackIO\000"
 1013      4F00
 1014              	.LASF2:
 1015 02d9 73686F72 		.ascii	"short int\000"
 1015      7420696E 
 1015      7400
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\cceJgtXc.s 			page 26


 1016              	.LASF11:
 1017 02e3 75696E74 		.ascii	"uint8\000"
 1017      3800
 1018              	.LASF31:
 1019 02e9 4D363835 		.ascii	"M6850_2_ReadStatus\000"
 1019      305F325F 
 1019      52656164 
 1019      53746174 
 1019      757300
 1020              	.LASF4:
 1021 02fc 6C6F6E67 		.ascii	"long int\000"
 1021      20696E74 
 1021      00
 1022              	.LASF15:
 1023 0305 6C6F6E67 		.ascii	"long double\000"
 1023      20646F75 
 1023      626C6500 
 1024              	.LASF0:
 1025 0311 7369676E 		.ascii	"signed char\000"
 1025      65642063 
 1025      68617200 
 1026              	.LASF18:
 1027 031d 696F5A38 		.ascii	"ioZ80Addr\000"
 1027      30416464 
 1027      7200
 1028              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
