ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Z80_IO_Handle.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HandleZ80IO,"ax",%progbits
  20              		.align	2
  21              		.global	HandleZ80IO
  22              		.thumb
  23              		.thumb_func
  24              		.type	HandleZ80IO, %function
  25              	HandleZ80IO:
  26              	.LFB63:
  27              		.file 1 "Z80_IO_Handle.c"
   1:Z80_IO_Handle.c **** /* ========================================
   2:Z80_IO_Handle.c **** *
   3:Z80_IO_Handle.c **** * Copyright LAND BOARDS, LLC, 2019
   4:Z80_IO_Handle.c **** * All Rights Reserved
   5:Z80_IO_Handle.c **** * UNPUBLISHED, LICENSED SOFTWARE.
   6:Z80_IO_Handle.c **** *
   7:Z80_IO_Handle.c **** * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:Z80_IO_Handle.c **** * WHICH IS THE PROPERTY OF Land Boards, LLC.
   9:Z80_IO_Handle.c **** *
  10:Z80_IO_Handle.c **** * ========================================
  11:Z80_IO_Handle.c **** */
  12:Z80_IO_Handle.c **** 
  13:Z80_IO_Handle.c **** #include <project.h>
  14:Z80_IO_Handle.c **** #include <Z80_PSoC_3Chips.h>
  15:Z80_IO_Handle.c **** 
  16:Z80_IO_Handle.c **** void HandleZ80IO(void)
  17:Z80_IO_Handle.c **** {
  28              		.loc 1 17 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  18:Z80_IO_Handle.c **** 	volatile uint8 ioCrtlRegVal;
  19:Z80_IO_Handle.c **** 	volatile uint8 ioZ80Addr;
  20:Z80_IO_Handle.c **** 	
  21:Z80_IO_Handle.c **** 	ioCrtlRegVal = IO_Stat_Reg_Status;
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 2


  37              		.loc 1 21 0
  38 0004 6E4B     		ldr	r3, .L24
  39 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  40 0008 DBB2     		uxtb	r3, r3
  41 000a 8DF80730 		strb	r3, [sp, #7]
  22:Z80_IO_Handle.c **** // Only 1 interrupt source in this configuration
  23:Z80_IO_Handle.c **** // If there are more than 1 interrupt sources the code below could be replaced with priority encode
  24:Z80_IO_Handle.c **** #ifdef USING_SIO
  25:Z80_IO_Handle.c **** 	if ((ioCrtlRegVal & IACK_MASK) == IN_IACK_CYCLE)
  26:Z80_IO_Handle.c **** 	{
  27:Z80_IO_Handle.c **** 		SioReadIntRegB();
  28:Z80_IO_Handle.c **** 		return;
  29:Z80_IO_Handle.c **** 	}
  30:Z80_IO_Handle.c **** #else
  31:Z80_IO_Handle.c ****     #ifdef USING_6850
  32:Z80_IO_Handle.c ****     	if ((ioCrtlRegVal & IACK_MASK) == IN_IACK_CYCLE)
  42              		.loc 1 32 0
  43 000e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  44 0012 03F01903 		and	r3, r3, #25
  45 0016 102B     		cmp	r3, #16
  46 0018 02D1     		bne	.L2
  33:Z80_IO_Handle.c ****     	{
  34:Z80_IO_Handle.c ****     		M6850ReadIntReg();
  47              		.loc 1 34 0
  48 001a FFF7FEFF 		bl	M6850ReadIntReg
  49              	.LVL0:
  35:Z80_IO_Handle.c ****     		return;
  50              		.loc 1 35 0
  51 001e CCE0     		b	.L1
  52              	.L2:
  36:Z80_IO_Handle.c ****     	}
  37:Z80_IO_Handle.c ****     #endif
  38:Z80_IO_Handle.c **** #endif
  39:Z80_IO_Handle.c **** 	ioZ80Addr = AdrLowIn_Status;        // gets the I/O address that the Z80 is accessing
  53              		.loc 1 39 0
  54 0020 684B     		ldr	r3, .L24+4
  55 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  56 0024 DBB2     		uxtb	r3, r3
  57 0026 8DF80630 		strb	r3, [sp, #6]
  40:Z80_IO_Handle.c **** 	switch (ioZ80Addr)                  // call appropriate functions based on the address
  58              		.loc 1 40 0
  59 002a 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
  60 002e 203B     		subs	r3, r3, #32
  61 0030 6C2B     		cmp	r3, #108
  62 0032 00F2C180 		bhi	.L4
  63 0036 DFE803F0 		tbb	[pc, r3]
  64              	.L6:
  65 003a 37       		.byte	(.L5-.L6)/2
  66 003b 4F       		.byte	(.L7-.L6)/2
  67 003c 47       		.byte	(.L8-.L6)/2
  68 003d 5F       		.byte	(.L9-.L6)/2
  69 003e BF       		.byte	(.L4-.L6)/2
  70 003f BF       		.byte	(.L4-.L6)/2
  71 0040 BF       		.byte	(.L4-.L6)/2
  72 0041 BF       		.byte	(.L4-.L6)/2
  73 0042 BF       		.byte	(.L4-.L6)/2
  74 0043 BF       		.byte	(.L4-.L6)/2
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 3


  75 0044 BF       		.byte	(.L4-.L6)/2
  76 0045 BF       		.byte	(.L4-.L6)/2
  77 0046 BF       		.byte	(.L4-.L6)/2
  78 0047 BF       		.byte	(.L4-.L6)/2
  79 0048 BF       		.byte	(.L4-.L6)/2
  80 0049 BF       		.byte	(.L4-.L6)/2
  81 004a BF       		.byte	(.L4-.L6)/2
  82 004b BF       		.byte	(.L4-.L6)/2
  83 004c BF       		.byte	(.L4-.L6)/2
  84 004d BF       		.byte	(.L4-.L6)/2
  85 004e BF       		.byte	(.L4-.L6)/2
  86 004f BF       		.byte	(.L4-.L6)/2
  87 0050 BF       		.byte	(.L4-.L6)/2
  88 0051 BF       		.byte	(.L4-.L6)/2
  89 0052 BF       		.byte	(.L4-.L6)/2
  90 0053 BF       		.byte	(.L4-.L6)/2
  91 0054 BF       		.byte	(.L4-.L6)/2
  92 0055 BF       		.byte	(.L4-.L6)/2
  93 0056 BF       		.byte	(.L4-.L6)/2
  94 0057 BF       		.byte	(.L4-.L6)/2
  95 0058 BF       		.byte	(.L4-.L6)/2
  96 0059 BF       		.byte	(.L4-.L6)/2
  97 005a BF       		.byte	(.L4-.L6)/2
  98 005b BF       		.byte	(.L4-.L6)/2
  99 005c BF       		.byte	(.L4-.L6)/2
 100 005d BF       		.byte	(.L4-.L6)/2
 101 005e BF       		.byte	(.L4-.L6)/2
 102 005f BF       		.byte	(.L4-.L6)/2
 103 0060 BF       		.byte	(.L4-.L6)/2
 104 0061 BF       		.byte	(.L4-.L6)/2
 105 0062 BF       		.byte	(.L4-.L6)/2
 106 0063 BF       		.byte	(.L4-.L6)/2
 107 0064 BF       		.byte	(.L4-.L6)/2
 108 0065 BF       		.byte	(.L4-.L6)/2
 109 0066 BF       		.byte	(.L4-.L6)/2
 110 0067 BF       		.byte	(.L4-.L6)/2
 111 0068 BF       		.byte	(.L4-.L6)/2
 112 0069 BF       		.byte	(.L4-.L6)/2
 113 006a BF       		.byte	(.L4-.L6)/2
 114 006b BF       		.byte	(.L4-.L6)/2
 115 006c BF       		.byte	(.L4-.L6)/2
 116 006d BF       		.byte	(.L4-.L6)/2
 117 006e BF       		.byte	(.L4-.L6)/2
 118 006f BF       		.byte	(.L4-.L6)/2
 119 0070 BF       		.byte	(.L4-.L6)/2
 120 0071 BF       		.byte	(.L4-.L6)/2
 121 0072 BF       		.byte	(.L4-.L6)/2
 122 0073 BF       		.byte	(.L4-.L6)/2
 123 0074 BF       		.byte	(.L4-.L6)/2
 124 0075 BF       		.byte	(.L4-.L6)/2
 125 0076 BF       		.byte	(.L4-.L6)/2
 126 0077 BF       		.byte	(.L4-.L6)/2
 127 0078 BF       		.byte	(.L4-.L6)/2
 128 0079 BF       		.byte	(.L4-.L6)/2
 129 007a BF       		.byte	(.L4-.L6)/2
 130 007b BF       		.byte	(.L4-.L6)/2
 131 007c BF       		.byte	(.L4-.L6)/2
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 4


 132 007d BF       		.byte	(.L4-.L6)/2
 133 007e BF       		.byte	(.L4-.L6)/2
 134 007f BF       		.byte	(.L4-.L6)/2
 135 0080 BF       		.byte	(.L4-.L6)/2
 136 0081 BF       		.byte	(.L4-.L6)/2
 137 0082 BF       		.byte	(.L4-.L6)/2
 138 0083 BF       		.byte	(.L4-.L6)/2
 139 0084 BF       		.byte	(.L4-.L6)/2
 140 0085 BF       		.byte	(.L4-.L6)/2
 141 0086 BF       		.byte	(.L4-.L6)/2
 142 0087 BF       		.byte	(.L4-.L6)/2
 143 0088 BF       		.byte	(.L4-.L6)/2
 144 0089 BF       		.byte	(.L4-.L6)/2
 145 008a BF       		.byte	(.L4-.L6)/2
 146 008b BF       		.byte	(.L4-.L6)/2
 147 008c BF       		.byte	(.L4-.L6)/2
 148 008d BF       		.byte	(.L4-.L6)/2
 149 008e BF       		.byte	(.L4-.L6)/2
 150 008f BF       		.byte	(.L4-.L6)/2
 151 0090 BF       		.byte	(.L4-.L6)/2
 152 0091 BF       		.byte	(.L4-.L6)/2
 153 0092 BF       		.byte	(.L4-.L6)/2
 154 0093 BF       		.byte	(.L4-.L6)/2
 155 0094 BF       		.byte	(.L4-.L6)/2
 156 0095 BF       		.byte	(.L4-.L6)/2
 157 0096 BF       		.byte	(.L4-.L6)/2
 158 0097 BF       		.byte	(.L4-.L6)/2
 159 0098 BF       		.byte	(.L4-.L6)/2
 160 0099 BF       		.byte	(.L4-.L6)/2
 161 009a 77       		.byte	(.L10-.L6)/2
 162 009b 67       		.byte	(.L11-.L6)/2
 163 009c BF       		.byte	(.L4-.L6)/2
 164 009d BF       		.byte	(.L4-.L6)/2
 165 009e BF       		.byte	(.L4-.L6)/2
 166 009f BF       		.byte	(.L4-.L6)/2
 167 00a0 BF       		.byte	(.L4-.L6)/2
 168 00a1 BF       		.byte	(.L4-.L6)/2
 169 00a2 97       		.byte	(.L12-.L6)/2
 170 00a3 87       		.byte	(.L13-.L6)/2
 171 00a4 A7       		.byte	(.L14-.L6)/2
 172 00a5 AF       		.byte	(.L15-.L6)/2
 173 00a6 B7       		.byte	(.L16-.L6)/2
 174 00a7 00       		.p2align 1
 175              	.L5:
  41:Z80_IO_Handle.c **** 	{
  42:Z80_IO_Handle.c ****     #ifdef USING_SIO
  43:Z80_IO_Handle.c ****     	case SIOA_D:
  44:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
  45:Z80_IO_Handle.c ****     		{
  46:Z80_IO_Handle.c ****     			SioReadDataA();
  47:Z80_IO_Handle.c ****     			return;
  48:Z80_IO_Handle.c ****     		}
  49:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  50:Z80_IO_Handle.c ****     		{
  51:Z80_IO_Handle.c ****     			SioWriteDataA();
  52:Z80_IO_Handle.c ****     			return;
  53:Z80_IO_Handle.c ****     		}
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 5


  54:Z80_IO_Handle.c ****     		break;
  55:Z80_IO_Handle.c ****     	case SIOA_C:    // Control register
  56:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  57:Z80_IO_Handle.c ****     		{
  58:Z80_IO_Handle.c ****     			SioWriteCtrlA();
  59:Z80_IO_Handle.c ****     			return;
  60:Z80_IO_Handle.c ****     		}
  61:Z80_IO_Handle.c ****     		break;
  62:Z80_IO_Handle.c ****     	case SIOB_D:
  63:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  64:Z80_IO_Handle.c ****     		{
  65:Z80_IO_Handle.c ****     			SioReadDataB();
  66:Z80_IO_Handle.c ****     			return;
  67:Z80_IO_Handle.c ****     		}
  68:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  69:Z80_IO_Handle.c ****     		{
  70:Z80_IO_Handle.c ****     			SioWriteDataB();
  71:Z80_IO_Handle.c ****     			return;
  72:Z80_IO_Handle.c ****     		}
  73:Z80_IO_Handle.c ****     		break;
  74:Z80_IO_Handle.c ****     	case SIOB_C:
  75:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  76:Z80_IO_Handle.c ****     		{
  77:Z80_IO_Handle.c ****     			SioWriteCtrlB();
  78:Z80_IO_Handle.c ****     			return;
  79:Z80_IO_Handle.c ****     		}
  80:Z80_IO_Handle.c ****     		break;
  81:Z80_IO_Handle.c ****     #endif
  82:Z80_IO_Handle.c ****     #ifdef USING_FRONT_PANEL
  83:Z80_IO_Handle.c ****     	case FR_PNL_IO_LO:
  84:Z80_IO_Handle.c ****         {
  85:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  86:Z80_IO_Handle.c ****     		{
  87:Z80_IO_Handle.c ****     			FrontPanelZ80Read(0);
  88:Z80_IO_Handle.c ****     			break;
  89:Z80_IO_Handle.c ****     		}
  90:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  91:Z80_IO_Handle.c ****     		{
  92:Z80_IO_Handle.c ****     			FrontPanelZ80Write(0);
  93:Z80_IO_Handle.c ****     			break;
  94:Z80_IO_Handle.c ****     		}
  95:Z80_IO_Handle.c ****     		break;
  96:Z80_IO_Handle.c ****         }
  97:Z80_IO_Handle.c ****     	case FR_PNL_IO_LO_MID:
  98:Z80_IO_Handle.c ****         {
  99:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 100:Z80_IO_Handle.c ****     		{
 101:Z80_IO_Handle.c ****     			FrontPanelZ80Read(1);
 102:Z80_IO_Handle.c ****     			break;
 103:Z80_IO_Handle.c ****     		}
 104:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 105:Z80_IO_Handle.c ****     		{
 106:Z80_IO_Handle.c ****     			FrontPanelZ80Write(1);
 107:Z80_IO_Handle.c ****     			break;
 108:Z80_IO_Handle.c ****     		}
 109:Z80_IO_Handle.c ****         }
 110:Z80_IO_Handle.c ****     	case FR_PNL_IO_HI_MID:
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 6


 111:Z80_IO_Handle.c ****         {
 112:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 113:Z80_IO_Handle.c ****     		{
 114:Z80_IO_Handle.c ****     			FrontPanelZ80Read(2);
 115:Z80_IO_Handle.c ****     			break;
 116:Z80_IO_Handle.c ****     		}
 117:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 118:Z80_IO_Handle.c ****     		{
 119:Z80_IO_Handle.c ****     			FrontPanelZ80Write(2);
 120:Z80_IO_Handle.c ****     			break;
 121:Z80_IO_Handle.c ****     		}
 122:Z80_IO_Handle.c ****         }
 123:Z80_IO_Handle.c ****     	case FR_PNL_IO_HI:
 124:Z80_IO_Handle.c ****         {
 125:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 126:Z80_IO_Handle.c ****     		{
 127:Z80_IO_Handle.c ****     			FrontPanelZ80Read(3);
 128:Z80_IO_Handle.c ****     			break;
 129:Z80_IO_Handle.c ****     		}
 130:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 131:Z80_IO_Handle.c ****     		{
 132:Z80_IO_Handle.c ****     			FrontPanelZ80Write(3);
 133:Z80_IO_Handle.c ****     			break;
 134:Z80_IO_Handle.c ****     		}
 135:Z80_IO_Handle.c ****         }
 136:Z80_IO_Handle.c ****     #endif
 137:Z80_IO_Handle.c ****     #ifdef USING_EXP_MCCP23017
 138:Z80_IO_Handle.c ****     	case PIOA_D:
 139:Z80_IO_Handle.c ****     	{
 140:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 176              		.loc 1 140 0
 177 00a8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 178 00ac DBB2     		uxtb	r3, r3
 179 00ae 1C2B     		cmp	r3, #28
 180 00b0 02D1     		bne	.L17
 141:Z80_IO_Handle.c ****     		{
 142:Z80_IO_Handle.c ****     			PioReadDataA();
 181              		.loc 1 142 0
 182 00b2 FFF7FEFF 		bl	PioReadDataA
 183              	.LVL1:
 143:Z80_IO_Handle.c ****     			break;
 184              		.loc 1 143 0
 185 00b6 80E0     		b	.L1
 186              	.L17:
 144:Z80_IO_Handle.c ****     		}
 145:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 187              		.loc 1 145 0
 188 00b8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 189 00bc DBB2     		uxtb	r3, r3
 190 00be 1A2B     		cmp	r3, #26
 191 00c0 02D1     		bne	.L8
 146:Z80_IO_Handle.c ****     		{
 147:Z80_IO_Handle.c ****     			PioWriteDataA();
 192              		.loc 1 147 0
 193 00c2 FFF7FEFF 		bl	PioWriteDataA
 194              	.LVL2:
 148:Z80_IO_Handle.c ****     			break;
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 7


 195              		.loc 1 148 0
 196 00c6 78E0     		b	.L1
 197              	.L8:
 149:Z80_IO_Handle.c ****     		}
 150:Z80_IO_Handle.c ****         }
 151:Z80_IO_Handle.c ****     	case PIOA_C:    // Control register
 152:Z80_IO_Handle.c ****         {
 153:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 198              		.loc 1 153 0
 199 00c8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 200 00cc DBB2     		uxtb	r3, r3
 201 00ce 1A2B     		cmp	r3, #26
 202 00d0 02D1     		bne	.L7
 154:Z80_IO_Handle.c ****     		{
 155:Z80_IO_Handle.c ****     			PioWriteCtrlA();
 203              		.loc 1 155 0
 204 00d2 FFF7FEFF 		bl	PioWriteCtrlA
 205              	.LVL3:
 156:Z80_IO_Handle.c ****     			break;
 206              		.loc 1 156 0
 207 00d6 70E0     		b	.L1
 208              	.L7:
 157:Z80_IO_Handle.c ****     		}
 158:Z80_IO_Handle.c ****         }
 159:Z80_IO_Handle.c ****     	case PIOB_D:
 160:Z80_IO_Handle.c ****         {
 161:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 209              		.loc 1 161 0
 210 00d8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 211 00dc DBB2     		uxtb	r3, r3
 212 00de 1C2B     		cmp	r3, #28
 213 00e0 02D1     		bne	.L18
 162:Z80_IO_Handle.c ****     		{
 163:Z80_IO_Handle.c ****     			PioReadDataB();
 214              		.loc 1 163 0
 215 00e2 FFF7FEFF 		bl	PioReadDataB
 216              	.LVL4:
 164:Z80_IO_Handle.c ****     			break;
 217              		.loc 1 164 0
 218 00e6 68E0     		b	.L1
 219              	.L18:
 165:Z80_IO_Handle.c ****     		}
 166:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 220              		.loc 1 166 0
 221 00e8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 222 00ec DBB2     		uxtb	r3, r3
 223 00ee 1A2B     		cmp	r3, #26
 224 00f0 02D1     		bne	.L9
 167:Z80_IO_Handle.c ****     		{
 168:Z80_IO_Handle.c ****     			PioWriteDataB();
 225              		.loc 1 168 0
 226 00f2 FFF7FEFF 		bl	PioWriteDataB
 227              	.LVL5:
 169:Z80_IO_Handle.c ****     			break;
 228              		.loc 1 169 0
 229 00f6 60E0     		b	.L1
 230              	.L9:
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 8


 170:Z80_IO_Handle.c ****     		}
 171:Z80_IO_Handle.c ****         }
 172:Z80_IO_Handle.c ****     	case PIOB_C:
 173:Z80_IO_Handle.c ****         {
 174:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 231              		.loc 1 174 0
 232 00f8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 233 00fc DBB2     		uxtb	r3, r3
 234 00fe 1A2B     		cmp	r3, #26
 235 0100 02D1     		bne	.L11
 175:Z80_IO_Handle.c ****     		{
 176:Z80_IO_Handle.c ****     			PioWriteCtrlB();
 236              		.loc 1 176 0
 237 0102 FFF7FEFF 		bl	PioWriteCtrlB
 238              	.LVL6:
 177:Z80_IO_Handle.c ****     			break;
 239              		.loc 1 177 0
 240 0106 58E0     		b	.L1
 241              	.L11:
 178:Z80_IO_Handle.c ****     		}
 179:Z80_IO_Handle.c ****         }
 180:Z80_IO_Handle.c ****     #endif
 181:Z80_IO_Handle.c ****     #ifdef USING_MMU4_SWAP
 182:Z80_IO_Handle.c ****         case MEM_MAP_SWAP_OUT:
 183:Z80_IO_Handle.c ****         {
 184:Z80_IO_Handle.c ****             ackIO();
 185:Z80_IO_Handle.c ****             break;
 186:Z80_IO_Handle.c ****         }
 187:Z80_IO_Handle.c ****         case MEM_MAP_SWAP_BACK:
 188:Z80_IO_Handle.c ****         {
 189:Z80_IO_Handle.c ****             // Copy back the original code in the original BIOS here
 190:Z80_IO_Handle.c ****             // This allows restarting the BIOS cleanly
 191:Z80_IO_Handle.c ****             // Use busreq / busack to get ahold of the Z80 bus
 192:Z80_IO_Handle.c ****             BUSRQ_n_Write(0);
 193:Z80_IO_Handle.c ****             // ack the transfer
 194:Z80_IO_Handle.c ****             ackIO();
 195:Z80_IO_Handle.c ****             while (BUSACK_n_Read() == 1);
 196:Z80_IO_Handle.c ****             // wait for busack
 197:Z80_IO_Handle.c ****             loadSRAM();
 198:Z80_IO_Handle.c ****             // Remove the busreq
 199:Z80_IO_Handle.c ****             BUSRQ_n_Write(1);
 200:Z80_IO_Handle.c ****             break;
 201:Z80_IO_Handle.c ****         }
 202:Z80_IO_Handle.c ****     #endif
 203:Z80_IO_Handle.c ****     #ifdef USING_RTC
 204:Z80_IO_Handle.c ****     	case RTC_DATA:
 205:Z80_IO_Handle.c ****         {
 206:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 207:Z80_IO_Handle.c ****     		{
 208:Z80_IO_Handle.c ****     			readRTC();
 209:Z80_IO_Handle.c ****     		}
 210:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 211:Z80_IO_Handle.c ****     		{
 212:Z80_IO_Handle.c ****     			writeRTC();
 213:Z80_IO_Handle.c ****     		}
 214:Z80_IO_Handle.c ****     		break;
 215:Z80_IO_Handle.c ****         }
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 9


 216:Z80_IO_Handle.c ****     	case RTC_CSR:
 217:Z80_IO_Handle.c ****         {
 218:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 219:Z80_IO_Handle.c ****     		{
 220:Z80_IO_Handle.c ****     			readCmdRTC();
 221:Z80_IO_Handle.c ****     		}
 222:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 223:Z80_IO_Handle.c ****     		{
 224:Z80_IO_Handle.c ****     			writeCmdRTC();
 225:Z80_IO_Handle.c ****     		}
 226:Z80_IO_Handle.c ****     		break;            
 227:Z80_IO_Handle.c ****     	case DAC_DATA:
 228:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 229:Z80_IO_Handle.c ****     		{
 230:Z80_IO_Handle.c ****     			readDAC();
 231:Z80_IO_Handle.c ****     		}
 232:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 233:Z80_IO_Handle.c ****     		{
 234:Z80_IO_Handle.c ****     			writeDAC();
 235:Z80_IO_Handle.c ****     		}
 236:Z80_IO_Handle.c ****     		break;
 237:Z80_IO_Handle.c ****         }
 238:Z80_IO_Handle.c ****     #endif
 239:Z80_IO_Handle.c ****     #ifdef USING_DAC
 240:Z80_IO_Handle.c ****     	case DAC_CSR:
 241:Z80_IO_Handle.c ****         {
 242:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 243:Z80_IO_Handle.c ****     		{
 244:Z80_IO_Handle.c ****     			readStatDAC();
 245:Z80_IO_Handle.c ****     		}
 246:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 247:Z80_IO_Handle.c ****     		{
 248:Z80_IO_Handle.c ****     			writeCmdDAC();
 249:Z80_IO_Handle.c ****     		}
 250:Z80_IO_Handle.c ****     		break;            
 251:Z80_IO_Handle.c ****         }
 252:Z80_IO_Handle.c ****     #endif
 253:Z80_IO_Handle.c ****     #ifdef USING_6850
 254:Z80_IO_Handle.c ****     	case M6850_D:
 255:Z80_IO_Handle.c ****         {
 256:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 242              		.loc 1 256 0
 243 0108 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 244 010c DBB2     		uxtb	r3, r3
 245 010e 1C2B     		cmp	r3, #28
 246 0110 02D1     		bne	.L19
 257:Z80_IO_Handle.c ****     		{
 258:Z80_IO_Handle.c ****     			M6850ReadData();
 247              		.loc 1 258 0
 248 0112 FFF7FEFF 		bl	M6850ReadData
 249              	.LVL7:
 259:Z80_IO_Handle.c ****     			break;
 250              		.loc 1 259 0
 251 0116 50E0     		b	.L1
 252              	.L19:
 260:Z80_IO_Handle.c ****     		}
 261:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 10


 253              		.loc 1 261 0
 254 0118 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 255 011c DBB2     		uxtb	r3, r3
 256 011e 1A2B     		cmp	r3, #26
 257 0120 02D1     		bne	.L10
 262:Z80_IO_Handle.c ****     		{
 263:Z80_IO_Handle.c ****     			M6850WriteData();
 258              		.loc 1 263 0
 259 0122 FFF7FEFF 		bl	M6850WriteData
 260              	.LVL8:
 264:Z80_IO_Handle.c ****     			break;
 261              		.loc 1 264 0
 262 0126 48E0     		b	.L1
 263              	.L10:
 265:Z80_IO_Handle.c ****     		}
 266:Z80_IO_Handle.c ****     	}
 267:Z80_IO_Handle.c ****         case  M6850_C:    // Control register
 268:Z80_IO_Handle.c ****         {
 269:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 264              		.loc 1 269 0
 265 0128 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 266 012c DBB2     		uxtb	r3, r3
 267 012e 1C2B     		cmp	r3, #28
 268 0130 02D1     		bne	.L20
 270:Z80_IO_Handle.c ****     		{
 271:Z80_IO_Handle.c ****     			M6850ReadStatus();
 269              		.loc 1 271 0
 270 0132 FFF7FEFF 		bl	M6850ReadStatus
 271              	.LVL9:
 272:Z80_IO_Handle.c ****     			break;
 272              		.loc 1 272 0
 273 0136 40E0     		b	.L1
 274              	.L20:
 273:Z80_IO_Handle.c ****     		}
 274:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 275              		.loc 1 274 0
 276 0138 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 277 013c DBB2     		uxtb	r3, r3
 278 013e 1A2B     		cmp	r3, #26
 279 0140 02D1     		bne	.L13
 275:Z80_IO_Handle.c ****     		{
 276:Z80_IO_Handle.c ****     			M6850WriteCtrl();
 280              		.loc 1 276 0
 281 0142 FFF7FEFF 		bl	M6850WriteCtrl
 282              	.LVL10:
 277:Z80_IO_Handle.c ****     			break;
 283              		.loc 1 277 0
 284 0146 38E0     		b	.L1
 285              	.L13:
 278:Z80_IO_Handle.c ****     		}
 279:Z80_IO_Handle.c ****         }
 280:Z80_IO_Handle.c ****         #ifdef MULTIBOOT_CPM
 281:Z80_IO_Handle.c ****             case M6850_B:   // Baud rate register - do nothing in this configuration
 282:Z80_IO_Handle.c ****             {
 283:Z80_IO_Handle.c ****                     ackIO();
 284:Z80_IO_Handle.c ****                     break;
 285:Z80_IO_Handle.c ****             }
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 11


 286:Z80_IO_Handle.c ****         #endif
 287:Z80_IO_Handle.c ****     #endif
 288:Z80_IO_Handle.c ****     #ifdef USING_6850_2
 289:Z80_IO_Handle.c ****     	case M6850_2_D:
 290:Z80_IO_Handle.c ****         {
 291:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 292:Z80_IO_Handle.c ****     		{
 293:Z80_IO_Handle.c ****     			M6850_2_ReadData();
 294:Z80_IO_Handle.c ****     			break;
 295:Z80_IO_Handle.c ****     		}
 296:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 297:Z80_IO_Handle.c ****     		{
 298:Z80_IO_Handle.c ****     			M6850_2_WriteData();
 299:Z80_IO_Handle.c ****     			break;
 300:Z80_IO_Handle.c ****     		}
 301:Z80_IO_Handle.c ****     		break;
 302:Z80_IO_Handle.c ****         }
 303:Z80_IO_Handle.c ****     	case  M6850_2_C:    // Control register
 304:Z80_IO_Handle.c ****         {
 305:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 306:Z80_IO_Handle.c ****     		{
 307:Z80_IO_Handle.c ****     			M6850_2_ReadStatus();
 308:Z80_IO_Handle.c ****     			break;
 309:Z80_IO_Handle.c ****     		}
 310:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 311:Z80_IO_Handle.c ****     		{
 312:Z80_IO_Handle.c ****     			M6850_2_WriteCtrl();
 313:Z80_IO_Handle.c ****     			break;
 314:Z80_IO_Handle.c ****     		}
 315:Z80_IO_Handle.c ****         }
 316:Z80_IO_Handle.c ****             #ifdef MULTIBOOT_CPM
 317:Z80_IO_Handle.c ****                 case M6850_2_B: // Baud rate register - do nothing in this configuration
 318:Z80_IO_Handle.c ****                     {
 319:Z80_IO_Handle.c ****                         ackIO();
 320:Z80_IO_Handle.c ****                         break;
 321:Z80_IO_Handle.c ****                     }
 322:Z80_IO_Handle.c ****             #endif
 323:Z80_IO_Handle.c ****     #endif
 324:Z80_IO_Handle.c ****     #ifdef USING_SDCARD
 325:Z80_IO_Handle.c ****     	case SD_CONTROL: // 0x89 - write command also also includes read status
 326:Z80_IO_Handle.c ****         {
 327:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 286              		.loc 1 327 0
 287 0148 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 288 014c DBB2     		uxtb	r3, r3
 289 014e 1C2B     		cmp	r3, #28
 290 0150 02D1     		bne	.L21
 328:Z80_IO_Handle.c ****     			SDReadStatus();
 291              		.loc 1 328 0
 292 0152 FFF7FEFF 		bl	SDReadStatus
 293              	.LVL11:
 294 0156 30E0     		b	.L1
 295              	.L21:
 329:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 296              		.loc 1 329 0
 297 0158 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 298 015c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 12


 299 015e 1A2B     		cmp	r3, #26
 300 0160 2BD1     		bne	.L1
 330:Z80_IO_Handle.c ****     			SDWriteCommand();
 301              		.loc 1 330 0
 302 0162 FFF7FEFF 		bl	SDWriteCommand
 303              	.LVL12:
 304 0166 28E0     		b	.L1
 305              	.L12:
 331:Z80_IO_Handle.c ****     		break;
 332:Z80_IO_Handle.c ****         }
 333:Z80_IO_Handle.c ****         case SD_DATA:           // 0x88
 334:Z80_IO_Handle.c ****         {
 335:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 306              		.loc 1 335 0
 307 0168 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 308 016c DBB2     		uxtb	r3, r3
 309 016e 1C2B     		cmp	r3, #28
 310 0170 02D1     		bne	.L22
 336:Z80_IO_Handle.c ****     			SDReadData();
 311              		.loc 1 336 0
 312 0172 FFF7FEFF 		bl	SDReadData
 313              	.LVL13:
 314 0176 20E0     		b	.L1
 315              	.L22:
 337:Z80_IO_Handle.c ****     		else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 316              		.loc 1 337 0
 317 0178 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 318 017c DBB2     		uxtb	r3, r3
 319 017e 1A2B     		cmp	r3, #26
 320 0180 1BD1     		bne	.L1
 338:Z80_IO_Handle.c ****     			SDWriteData();
 321              		.loc 1 338 0
 322 0182 FFF7FEFF 		bl	SDWriteData
 323              	.LVL14:
 324 0186 18E0     		b	.L1
 325              	.L14:
 339:Z80_IO_Handle.c ****     		break;
 340:Z80_IO_Handle.c ****         }
 341:Z80_IO_Handle.c ****     	case SD_LBA0:    // 0x8A
 342:Z80_IO_Handle.c ****     	{
 343:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 326              		.loc 1 343 0
 327 0188 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 328 018c DBB2     		uxtb	r3, r3
 329 018e 1A2B     		cmp	r3, #26
 330 0190 13D1     		bne	.L1
 344:Z80_IO_Handle.c ****     			SDWriteLBA0();
 331              		.loc 1 344 0
 332 0192 FFF7FEFF 		bl	SDWriteLBA0
 333              	.LVL15:
 334 0196 10E0     		b	.L1
 335              	.L15:
 345:Z80_IO_Handle.c ****     		break;
 346:Z80_IO_Handle.c ****         }
 347:Z80_IO_Handle.c ****     	case SD_LBA1:   // 0x8B
 348:Z80_IO_Handle.c ****         {
 349:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 13


 336              		.loc 1 349 0
 337 0198 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 338 019c DBB2     		uxtb	r3, r3
 339 019e 1A2B     		cmp	r3, #26
 340 01a0 0BD1     		bne	.L1
 350:Z80_IO_Handle.c ****     			SDWriteLBA1();
 341              		.loc 1 350 0
 342 01a2 FFF7FEFF 		bl	SDWriteLBA1
 343              	.LVL16:
 344 01a6 08E0     		b	.L1
 345              	.L16:
 351:Z80_IO_Handle.c ****     		break;
 352:Z80_IO_Handle.c ****         }
 353:Z80_IO_Handle.c ****     	case SD_LBA2:    // 0x8C
 354:Z80_IO_Handle.c ****         {
 355:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 346              		.loc 1 355 0
 347 01a8 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 348 01ac DBB2     		uxtb	r3, r3
 349 01ae 1A2B     		cmp	r3, #26
 350 01b0 03D1     		bne	.L1
 356:Z80_IO_Handle.c ****     		{
 357:Z80_IO_Handle.c ****     			SDWriteLBA2();
 351              		.loc 1 357 0
 352 01b2 FFF7FEFF 		bl	SDWriteLBA2
 353              	.LVL17:
 354 01b6 00E0     		b	.L1
 355              	.L4:
 356 01b8 FEE7     		b	.L4
 357              	.L1:
 358:Z80_IO_Handle.c ****     		}
 359:Z80_IO_Handle.c ****     		break;
 360:Z80_IO_Handle.c ****         }
 361:Z80_IO_Handle.c ****     #endif
 362:Z80_IO_Handle.c ****     #ifdef USING_MMU4
 363:Z80_IO_Handle.c ****     	case MMUSELECT:
 364:Z80_IO_Handle.c ****         {
 365:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 366:Z80_IO_Handle.c ****     		{
 367:Z80_IO_Handle.c ****     			wrMMU4SelectReg();
 368:Z80_IO_Handle.c ****     			break;
 369:Z80_IO_Handle.c ****     		}
 370:Z80_IO_Handle.c ****             break;
 371:Z80_IO_Handle.c ****         case MMUFRAME:
 372:Z80_IO_Handle.c ****             {
 373:Z80_IO_Handle.c ****                 wrMMU4Bank();
 374:Z80_IO_Handle.c ****                 break;
 375:Z80_IO_Handle.c ****             }
 376:Z80_IO_Handle.c ****         }
 377:Z80_IO_Handle.c ****     #endif
 378:Z80_IO_Handle.c ****     #ifdef USING_MEM_MAP_1
 379:Z80_IO_Handle.c ****     	case MEM_MAP_SWAP:
 380:Z80_IO_Handle.c ****         {
 381:Z80_IO_Handle.c ****     		if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 382:Z80_IO_Handle.c ****     		{
 383:Z80_IO_Handle.c ****     			swap_out_ROM_space();
 384:Z80_IO_Handle.c ****     			break;
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 14


 385:Z80_IO_Handle.c ****     		}
 386:Z80_IO_Handle.c ****         }
 387:Z80_IO_Handle.c ****     #endif
 388:Z80_IO_Handle.c ****     	default:    // Handle other cases
 389:Z80_IO_Handle.c ****         {
 390:Z80_IO_Handle.c ****                     // If I ackIO() then it would makes cases which are not handled
 391:Z80_IO_Handle.c ****             while(1);
 392:Z80_IO_Handle.c ****     		break;
 393:Z80_IO_Handle.c ****         }
 394:Z80_IO_Handle.c ****     }
 395:Z80_IO_Handle.c **** }
 358              		.loc 1 395 0
 359 01ba 03B0     		add	sp, sp, #12
 360              		.cfi_def_cfa_offset 4
 361              		@ sp needed
 362 01bc 5DF804FB 		ldr	pc, [sp], #4
 363              	.L25:
 364              		.align	2
 365              	.L24:
 366 01c0 64650040 		.word	1073767780
 367 01c4 61640040 		.word	1073767521
 368              		.cfi_endproc
 369              	.LFE63:
 370              		.size	HandleZ80IO, .-HandleZ80IO
 371              		.section	.text.ackIO,"ax",%progbits
 372              		.align	2
 373              		.global	ackIO
 374              		.thumb
 375              		.thumb_func
 376              		.type	ackIO, %function
 377              	ackIO:
 378              	.LFB64:
 396:Z80_IO_Handle.c **** 
 397:Z80_IO_Handle.c **** void ackIO(void)
 398:Z80_IO_Handle.c **** {
 379              		.loc 1 398 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 399:Z80_IO_Handle.c **** 	IO_Ctrl_Reg_Control = (IO_Ctrl_Reg_Control | CLR_IO_INT_BIT);
 384              		.loc 1 399 0
 385 0000 024A     		ldr	r2, .L27
 386 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 387 0004 43F00103 		orr	r3, r3, #1
 388 0008 1370     		strb	r3, [r2]
 389 000a 7047     		bx	lr
 390              	.L28:
 391              		.align	2
 392              	.L27:
 393 000c 74650040 		.word	1073767796
 394              		.cfi_endproc
 395              	.LFE64:
 396              		.size	ackIO, .-ackIO
 397              		.section	.text.waitNextIORq,"ax",%progbits
 398              		.align	2
 399              		.global	waitNextIORq
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 15


 400              		.thumb
 401              		.thumb_func
 402              		.type	waitNextIORq, %function
 403              	waitNextIORq:
 404              	.LFB65:
 400:Z80_IO_Handle.c **** }
 401:Z80_IO_Handle.c **** 
 402:Z80_IO_Handle.c **** void waitNextIORq(void)
 403:Z80_IO_Handle.c **** {
 405              		.loc 1 403 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410              	.L30:
 404:Z80_IO_Handle.c **** 	while ((IO_Stat_Reg_Status & IOBUSY_BIT) == 0x00);
 411              		.loc 1 404 0 discriminator 1
 412 0000 024B     		ldr	r3, .L31
 413 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 414 0004 13F0100F 		tst	r3, #16
 415 0008 FAD0     		beq	.L30
 405:Z80_IO_Handle.c **** }
 416              		.loc 1 405 0
 417 000a 7047     		bx	lr
 418              	.L32:
 419              		.align	2
 420              	.L31:
 421 000c 64650040 		.word	1073767780
 422              		.cfi_endproc
 423              	.LFE65:
 424              		.size	waitNextIORq, .-waitNextIORq
 425              		.text
 426              	.Letext0:
 427              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 428              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 429              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 430              		.file 5 "./Z80_6850_Emul.h"
 431              		.file 6 "./Z80_PIO_emul.h"
 432              		.file 7 "./Z80_SDCard_Emul.h"
 433              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 434              		.section	.debug_info,"",%progbits
 435              	.Ldebug_info0:
 436 0000 8D020000 		.4byte	0x28d
 437 0004 0400     		.2byte	0x4
 438 0006 00000000 		.4byte	.Ldebug_abbrev0
 439 000a 04       		.byte	0x4
 440 000b 01       		.uleb128 0x1
 441 000c ED000000 		.4byte	.LASF40
 442 0010 0C       		.byte	0xc
 443 0011 A6020000 		.4byte	.LASF41
 444 0015 30000000 		.4byte	.LASF42
 445 0019 00000000 		.4byte	.Ldebug_ranges0+0
 446 001d 00000000 		.4byte	0
 447 0021 00000000 		.4byte	.Ldebug_line0
 448 0025 02       		.uleb128 0x2
 449 0026 01       		.byte	0x1
 450 0027 06       		.byte	0x6
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 16


 451 0028 53020000 		.4byte	.LASF0
 452 002c 02       		.uleb128 0x2
 453 002d 01       		.byte	0x1
 454 002e 08       		.byte	0x8
 455 002f DF000000 		.4byte	.LASF1
 456 0033 02       		.uleb128 0x2
 457 0034 02       		.byte	0x2
 458 0035 05       		.byte	0x5
 459 0036 C9020000 		.4byte	.LASF2
 460 003a 02       		.uleb128 0x2
 461 003b 02       		.byte	0x2
 462 003c 07       		.byte	0x7
 463 003d 92010000 		.4byte	.LASF3
 464 0041 03       		.uleb128 0x3
 465 0042 26000000 		.4byte	.LASF9
 466 0046 02       		.byte	0x2
 467 0047 3F       		.byte	0x3f
 468 0048 4C000000 		.4byte	0x4c
 469 004c 02       		.uleb128 0x2
 470 004d 04       		.byte	0x4
 471 004e 05       		.byte	0x5
 472 004f D9020000 		.4byte	.LASF4
 473 0053 02       		.uleb128 0x2
 474 0054 04       		.byte	0x4
 475 0055 07       		.byte	0x7
 476 0056 80010000 		.4byte	.LASF5
 477 005a 02       		.uleb128 0x2
 478 005b 08       		.byte	0x8
 479 005c 05       		.byte	0x5
 480 005d 88020000 		.4byte	.LASF6
 481 0061 02       		.uleb128 0x2
 482 0062 08       		.byte	0x8
 483 0063 07       		.byte	0x7
 484 0064 2D020000 		.4byte	.LASF7
 485 0068 04       		.uleb128 0x4
 486 0069 04       		.byte	0x4
 487 006a 05       		.byte	0x5
 488 006b 696E7400 		.ascii	"int\000"
 489 006f 02       		.uleb128 0x2
 490 0070 04       		.byte	0x4
 491 0071 07       		.byte	0x7
 492 0072 04020000 		.4byte	.LASF8
 493 0076 03       		.uleb128 0x3
 494 0077 6B020000 		.4byte	.LASF10
 495 007b 03       		.byte	0x3
 496 007c 2C       		.byte	0x2c
 497 007d 41000000 		.4byte	0x41
 498 0081 05       		.uleb128 0x5
 499 0082 D3020000 		.4byte	.LASF11
 500 0086 04       		.byte	0x4
 501 0087 E401     		.2byte	0x1e4
 502 0089 2C000000 		.4byte	0x2c
 503 008d 02       		.uleb128 0x2
 504 008e 04       		.byte	0x4
 505 008f 04       		.byte	0x4
 506 0090 D9000000 		.4byte	.LASF12
 507 0094 02       		.uleb128 0x2
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 17


 508 0095 08       		.byte	0x8
 509 0096 04       		.byte	0x4
 510 0097 C1010000 		.4byte	.LASF13
 511 009b 02       		.uleb128 0x2
 512 009c 01       		.byte	0x1
 513 009d 08       		.byte	0x8
 514 009e 96020000 		.4byte	.LASF14
 515 00a2 05       		.uleb128 0x5
 516 00a3 7B010000 		.4byte	.LASF15
 517 00a7 04       		.byte	0x4
 518 00a8 8E02     		.2byte	0x28e
 519 00aa AE000000 		.4byte	0xae
 520 00ae 06       		.uleb128 0x6
 521 00af 81000000 		.4byte	0x81
 522 00b3 02       		.uleb128 0x2
 523 00b4 08       		.byte	0x8
 524 00b5 04       		.byte	0x4
 525 00b6 FC020000 		.4byte	.LASF16
 526 00ba 02       		.uleb128 0x2
 527 00bb 04       		.byte	0x4
 528 00bc 07       		.byte	0x7
 529 00bd 73020000 		.4byte	.LASF17
 530 00c1 07       		.uleb128 0x7
 531 00c2 1A000000 		.4byte	.LASF43
 532 00c6 01       		.byte	0x1
 533 00c7 10       		.byte	0x10
 534 00c8 00000000 		.4byte	.LFB63
 535 00cc C8010000 		.4byte	.LFE63-.LFB63
 536 00d0 01       		.uleb128 0x1
 537 00d1 9C       		.byte	0x9c
 538 00d2 95010000 		.4byte	0x195
 539 00d6 08       		.uleb128 0x8
 540 00d7 BD000000 		.4byte	.LASF18
 541 00db 01       		.byte	0x1
 542 00dc 12       		.byte	0x12
 543 00dd AE000000 		.4byte	0xae
 544 00e1 02       		.uleb128 0x2
 545 00e2 91       		.byte	0x91
 546 00e3 77       		.sleb128 -9
 547 00e4 08       		.uleb128 0x8
 548 00e5 14030000 		.4byte	.LASF19
 549 00e9 01       		.byte	0x1
 550 00ea 13       		.byte	0x13
 551 00eb AE000000 		.4byte	0xae
 552 00ef 02       		.uleb128 0x2
 553 00f0 91       		.byte	0x91
 554 00f1 76       		.sleb128 -10
 555 00f2 09       		.uleb128 0x9
 556 00f3 1E000000 		.4byte	.LVL0
 557 00f7 CA010000 		.4byte	0x1ca
 558 00fb 09       		.uleb128 0x9
 559 00fc B6000000 		.4byte	.LVL1
 560 0100 D5010000 		.4byte	0x1d5
 561 0104 09       		.uleb128 0x9
 562 0105 C6000000 		.4byte	.LVL2
 563 0109 E0010000 		.4byte	0x1e0
 564 010d 09       		.uleb128 0x9
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 18


 565 010e D6000000 		.4byte	.LVL3
 566 0112 EB010000 		.4byte	0x1eb
 567 0116 09       		.uleb128 0x9
 568 0117 E6000000 		.4byte	.LVL4
 569 011b F6010000 		.4byte	0x1f6
 570 011f 09       		.uleb128 0x9
 571 0120 F6000000 		.4byte	.LVL5
 572 0124 01020000 		.4byte	0x201
 573 0128 09       		.uleb128 0x9
 574 0129 06010000 		.4byte	.LVL6
 575 012d 0C020000 		.4byte	0x20c
 576 0131 09       		.uleb128 0x9
 577 0132 16010000 		.4byte	.LVL7
 578 0136 17020000 		.4byte	0x217
 579 013a 09       		.uleb128 0x9
 580 013b 26010000 		.4byte	.LVL8
 581 013f 22020000 		.4byte	0x222
 582 0143 09       		.uleb128 0x9
 583 0144 36010000 		.4byte	.LVL9
 584 0148 2D020000 		.4byte	0x22d
 585 014c 09       		.uleb128 0x9
 586 014d 46010000 		.4byte	.LVL10
 587 0151 38020000 		.4byte	0x238
 588 0155 09       		.uleb128 0x9
 589 0156 56010000 		.4byte	.LVL11
 590 015a 43020000 		.4byte	0x243
 591 015e 09       		.uleb128 0x9
 592 015f 66010000 		.4byte	.LVL12
 593 0163 4E020000 		.4byte	0x24e
 594 0167 09       		.uleb128 0x9
 595 0168 76010000 		.4byte	.LVL13
 596 016c 59020000 		.4byte	0x259
 597 0170 09       		.uleb128 0x9
 598 0171 86010000 		.4byte	.LVL14
 599 0175 64020000 		.4byte	0x264
 600 0179 09       		.uleb128 0x9
 601 017a 96010000 		.4byte	.LVL15
 602 017e 6F020000 		.4byte	0x26f
 603 0182 09       		.uleb128 0x9
 604 0183 A6010000 		.4byte	.LVL16
 605 0187 7A020000 		.4byte	0x27a
 606 018b 09       		.uleb128 0x9
 607 018c B6010000 		.4byte	.LVL17
 608 0190 85020000 		.4byte	0x285
 609 0194 00       		.byte	0
 610 0195 0A       		.uleb128 0xa
 611 0196 C3020000 		.4byte	.LASF20
 612 019a 01       		.byte	0x1
 613 019b 8D01     		.2byte	0x18d
 614 019d 00000000 		.4byte	.LFB64
 615 01a1 10000000 		.4byte	.LFE64-.LFB64
 616 01a5 01       		.uleb128 0x1
 617 01a6 9C       		.byte	0x9c
 618 01a7 0A       		.uleb128 0xa
 619 01a8 B6020000 		.4byte	.LASF21
 620 01ac 01       		.byte	0x1
 621 01ad 9201     		.2byte	0x192
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 19


 622 01af 00000000 		.4byte	.LFB65
 623 01b3 10000000 		.4byte	.LFE65-.LFB65
 624 01b7 01       		.uleb128 0x1
 625 01b8 9C       		.byte	0x9c
 626 01b9 0B       		.uleb128 0xb
 627 01ba B4010000 		.4byte	.LASF44
 628 01be 08       		.byte	0x8
 629 01bf 1207     		.2byte	0x712
 630 01c1 C5010000 		.4byte	0x1c5
 631 01c5 06       		.uleb128 0x6
 632 01c6 76000000 		.4byte	0x76
 633 01ca 0C       		.uleb128 0xc
 634 01cb F4010000 		.4byte	.LASF22
 635 01cf F4010000 		.4byte	.LASF22
 636 01d3 05       		.byte	0x5
 637 01d4 18       		.byte	0x18
 638 01d5 0C       		.uleb128 0xc
 639 01d6 E2020000 		.4byte	.LASF23
 640 01da E2020000 		.4byte	.LASF23
 641 01de 06       		.byte	0x6
 642 01df 39       		.byte	0x39
 643 01e0 0C       		.uleb128 0xc
 644 01e1 11020000 		.4byte	.LASF24
 645 01e5 11020000 		.4byte	.LASF24
 646 01e9 06       		.byte	0x6
 647 01ea 3A       		.byte	0x3a
 648 01eb 0C       		.uleb128 0xc
 649 01ec D8010000 		.4byte	.LASF25
 650 01f0 D8010000 		.4byte	.LASF25
 651 01f4 06       		.byte	0x6
 652 01f5 3B       		.byte	0x3b
 653 01f6 0C       		.uleb128 0xc
 654 01f7 EF020000 		.4byte	.LASF26
 655 01fb EF020000 		.4byte	.LASF26
 656 01ff 06       		.byte	0x6
 657 0200 3C       		.byte	0x3c
 658 0201 0C       		.uleb128 0xc
 659 0202 1F020000 		.4byte	.LASF27
 660 0206 1F020000 		.4byte	.LASF27
 661 020a 06       		.byte	0x6
 662 020b 3D       		.byte	0x3d
 663 020c 0C       		.uleb128 0xc
 664 020d E6010000 		.4byte	.LASF28
 665 0211 E6010000 		.4byte	.LASF28
 666 0215 06       		.byte	0x6
 667 0216 3E       		.byte	0x3e
 668 0217 0C       		.uleb128 0xc
 669 0218 0C000000 		.4byte	.LASF29
 670 021c 0C000000 		.4byte	.LASF29
 671 0220 05       		.byte	0x5
 672 0221 12       		.byte	0x12
 673 0222 0C       		.uleb128 0xc
 674 0223 CA000000 		.4byte	.LASF30
 675 0227 CA000000 		.4byte	.LASF30
 676 022b 05       		.byte	0x5
 677 022c 13       		.byte	0x13
 678 022d 0C       		.uleb128 0xc
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 20


 679 022e C8010000 		.4byte	.LASF31
 680 0232 C8010000 		.4byte	.LASF31
 681 0236 05       		.byte	0x5
 682 0237 14       		.byte	0x14
 683 0238 0C       		.uleb128 0xc
 684 0239 44020000 		.4byte	.LASF32
 685 023d 44020000 		.4byte	.LASF32
 686 0241 05       		.byte	0x5
 687 0242 15       		.byte	0x15
 688 0243 0C       		.uleb128 0xc
 689 0244 B0000000 		.4byte	.LASF33
 690 0248 B0000000 		.4byte	.LASF33
 691 024c 07       		.byte	0x7
 692 024d 33       		.byte	0x33
 693 024e 0C       		.uleb128 0xc
 694 024f A5010000 		.4byte	.LASF34
 695 0253 A5010000 		.4byte	.LASF34
 696 0257 07       		.byte	0x7
 697 0258 34       		.byte	0x34
 698 0259 0C       		.uleb128 0xc
 699 025a 9B020000 		.4byte	.LASF35
 700 025e 9B020000 		.4byte	.LASF35
 701 0262 07       		.byte	0x7
 702 0263 31       		.byte	0x31
 703 0264 0C       		.uleb128 0xc
 704 0265 08030000 		.4byte	.LASF36
 705 0269 08030000 		.4byte	.LASF36
 706 026d 07       		.byte	0x7
 707 026e 32       		.byte	0x32
 708 026f 0C       		.uleb128 0xc
 709 0270 5F020000 		.4byte	.LASF37
 710 0274 5F020000 		.4byte	.LASF37
 711 0278 07       		.byte	0x7
 712 0279 35       		.byte	0x35
 713 027a 0C       		.uleb128 0xc
 714 027b 00000000 		.4byte	.LASF38
 715 027f 00000000 		.4byte	.LASF38
 716 0283 07       		.byte	0x7
 717 0284 36       		.byte	0x36
 718 0285 0C       		.uleb128 0xc
 719 0286 7C020000 		.4byte	.LASF39
 720 028a 7C020000 		.4byte	.LASF39
 721 028e 07       		.byte	0x7
 722 028f 37       		.byte	0x37
 723 0290 00       		.byte	0
 724              		.section	.debug_abbrev,"",%progbits
 725              	.Ldebug_abbrev0:
 726 0000 01       		.uleb128 0x1
 727 0001 11       		.uleb128 0x11
 728 0002 01       		.byte	0x1
 729 0003 25       		.uleb128 0x25
 730 0004 0E       		.uleb128 0xe
 731 0005 13       		.uleb128 0x13
 732 0006 0B       		.uleb128 0xb
 733 0007 03       		.uleb128 0x3
 734 0008 0E       		.uleb128 0xe
 735 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 21


 736 000a 0E       		.uleb128 0xe
 737 000b 55       		.uleb128 0x55
 738 000c 17       		.uleb128 0x17
 739 000d 11       		.uleb128 0x11
 740 000e 01       		.uleb128 0x1
 741 000f 10       		.uleb128 0x10
 742 0010 17       		.uleb128 0x17
 743 0011 00       		.byte	0
 744 0012 00       		.byte	0
 745 0013 02       		.uleb128 0x2
 746 0014 24       		.uleb128 0x24
 747 0015 00       		.byte	0
 748 0016 0B       		.uleb128 0xb
 749 0017 0B       		.uleb128 0xb
 750 0018 3E       		.uleb128 0x3e
 751 0019 0B       		.uleb128 0xb
 752 001a 03       		.uleb128 0x3
 753 001b 0E       		.uleb128 0xe
 754 001c 00       		.byte	0
 755 001d 00       		.byte	0
 756 001e 03       		.uleb128 0x3
 757 001f 16       		.uleb128 0x16
 758 0020 00       		.byte	0
 759 0021 03       		.uleb128 0x3
 760 0022 0E       		.uleb128 0xe
 761 0023 3A       		.uleb128 0x3a
 762 0024 0B       		.uleb128 0xb
 763 0025 3B       		.uleb128 0x3b
 764 0026 0B       		.uleb128 0xb
 765 0027 49       		.uleb128 0x49
 766 0028 13       		.uleb128 0x13
 767 0029 00       		.byte	0
 768 002a 00       		.byte	0
 769 002b 04       		.uleb128 0x4
 770 002c 24       		.uleb128 0x24
 771 002d 00       		.byte	0
 772 002e 0B       		.uleb128 0xb
 773 002f 0B       		.uleb128 0xb
 774 0030 3E       		.uleb128 0x3e
 775 0031 0B       		.uleb128 0xb
 776 0032 03       		.uleb128 0x3
 777 0033 08       		.uleb128 0x8
 778 0034 00       		.byte	0
 779 0035 00       		.byte	0
 780 0036 05       		.uleb128 0x5
 781 0037 16       		.uleb128 0x16
 782 0038 00       		.byte	0
 783 0039 03       		.uleb128 0x3
 784 003a 0E       		.uleb128 0xe
 785 003b 3A       		.uleb128 0x3a
 786 003c 0B       		.uleb128 0xb
 787 003d 3B       		.uleb128 0x3b
 788 003e 05       		.uleb128 0x5
 789 003f 49       		.uleb128 0x49
 790 0040 13       		.uleb128 0x13
 791 0041 00       		.byte	0
 792 0042 00       		.byte	0
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 22


 793 0043 06       		.uleb128 0x6
 794 0044 35       		.uleb128 0x35
 795 0045 00       		.byte	0
 796 0046 49       		.uleb128 0x49
 797 0047 13       		.uleb128 0x13
 798 0048 00       		.byte	0
 799 0049 00       		.byte	0
 800 004a 07       		.uleb128 0x7
 801 004b 2E       		.uleb128 0x2e
 802 004c 01       		.byte	0x1
 803 004d 3F       		.uleb128 0x3f
 804 004e 19       		.uleb128 0x19
 805 004f 03       		.uleb128 0x3
 806 0050 0E       		.uleb128 0xe
 807 0051 3A       		.uleb128 0x3a
 808 0052 0B       		.uleb128 0xb
 809 0053 3B       		.uleb128 0x3b
 810 0054 0B       		.uleb128 0xb
 811 0055 27       		.uleb128 0x27
 812 0056 19       		.uleb128 0x19
 813 0057 11       		.uleb128 0x11
 814 0058 01       		.uleb128 0x1
 815 0059 12       		.uleb128 0x12
 816 005a 06       		.uleb128 0x6
 817 005b 40       		.uleb128 0x40
 818 005c 18       		.uleb128 0x18
 819 005d 9742     		.uleb128 0x2117
 820 005f 19       		.uleb128 0x19
 821 0060 01       		.uleb128 0x1
 822 0061 13       		.uleb128 0x13
 823 0062 00       		.byte	0
 824 0063 00       		.byte	0
 825 0064 08       		.uleb128 0x8
 826 0065 34       		.uleb128 0x34
 827 0066 00       		.byte	0
 828 0067 03       		.uleb128 0x3
 829 0068 0E       		.uleb128 0xe
 830 0069 3A       		.uleb128 0x3a
 831 006a 0B       		.uleb128 0xb
 832 006b 3B       		.uleb128 0x3b
 833 006c 0B       		.uleb128 0xb
 834 006d 49       		.uleb128 0x49
 835 006e 13       		.uleb128 0x13
 836 006f 02       		.uleb128 0x2
 837 0070 18       		.uleb128 0x18
 838 0071 00       		.byte	0
 839 0072 00       		.byte	0
 840 0073 09       		.uleb128 0x9
 841 0074 898201   		.uleb128 0x4109
 842 0077 00       		.byte	0
 843 0078 11       		.uleb128 0x11
 844 0079 01       		.uleb128 0x1
 845 007a 31       		.uleb128 0x31
 846 007b 13       		.uleb128 0x13
 847 007c 00       		.byte	0
 848 007d 00       		.byte	0
 849 007e 0A       		.uleb128 0xa
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 23


 850 007f 2E       		.uleb128 0x2e
 851 0080 00       		.byte	0
 852 0081 3F       		.uleb128 0x3f
 853 0082 19       		.uleb128 0x19
 854 0083 03       		.uleb128 0x3
 855 0084 0E       		.uleb128 0xe
 856 0085 3A       		.uleb128 0x3a
 857 0086 0B       		.uleb128 0xb
 858 0087 3B       		.uleb128 0x3b
 859 0088 05       		.uleb128 0x5
 860 0089 27       		.uleb128 0x27
 861 008a 19       		.uleb128 0x19
 862 008b 11       		.uleb128 0x11
 863 008c 01       		.uleb128 0x1
 864 008d 12       		.uleb128 0x12
 865 008e 06       		.uleb128 0x6
 866 008f 40       		.uleb128 0x40
 867 0090 18       		.uleb128 0x18
 868 0091 9742     		.uleb128 0x2117
 869 0093 19       		.uleb128 0x19
 870 0094 00       		.byte	0
 871 0095 00       		.byte	0
 872 0096 0B       		.uleb128 0xb
 873 0097 34       		.uleb128 0x34
 874 0098 00       		.byte	0
 875 0099 03       		.uleb128 0x3
 876 009a 0E       		.uleb128 0xe
 877 009b 3A       		.uleb128 0x3a
 878 009c 0B       		.uleb128 0xb
 879 009d 3B       		.uleb128 0x3b
 880 009e 05       		.uleb128 0x5
 881 009f 49       		.uleb128 0x49
 882 00a0 13       		.uleb128 0x13
 883 00a1 3F       		.uleb128 0x3f
 884 00a2 19       		.uleb128 0x19
 885 00a3 3C       		.uleb128 0x3c
 886 00a4 19       		.uleb128 0x19
 887 00a5 00       		.byte	0
 888 00a6 00       		.byte	0
 889 00a7 0C       		.uleb128 0xc
 890 00a8 2E       		.uleb128 0x2e
 891 00a9 00       		.byte	0
 892 00aa 3F       		.uleb128 0x3f
 893 00ab 19       		.uleb128 0x19
 894 00ac 3C       		.uleb128 0x3c
 895 00ad 19       		.uleb128 0x19
 896 00ae 6E       		.uleb128 0x6e
 897 00af 0E       		.uleb128 0xe
 898 00b0 03       		.uleb128 0x3
 899 00b1 0E       		.uleb128 0xe
 900 00b2 3A       		.uleb128 0x3a
 901 00b3 0B       		.uleb128 0xb
 902 00b4 3B       		.uleb128 0x3b
 903 00b5 0B       		.uleb128 0xb
 904 00b6 00       		.byte	0
 905 00b7 00       		.byte	0
 906 00b8 00       		.byte	0
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 24


 907              		.section	.debug_aranges,"",%progbits
 908 0000 2C000000 		.4byte	0x2c
 909 0004 0200     		.2byte	0x2
 910 0006 00000000 		.4byte	.Ldebug_info0
 911 000a 04       		.byte	0x4
 912 000b 00       		.byte	0
 913 000c 0000     		.2byte	0
 914 000e 0000     		.2byte	0
 915 0010 00000000 		.4byte	.LFB63
 916 0014 C8010000 		.4byte	.LFE63-.LFB63
 917 0018 00000000 		.4byte	.LFB64
 918 001c 10000000 		.4byte	.LFE64-.LFB64
 919 0020 00000000 		.4byte	.LFB65
 920 0024 10000000 		.4byte	.LFE65-.LFB65
 921 0028 00000000 		.4byte	0
 922 002c 00000000 		.4byte	0
 923              		.section	.debug_ranges,"",%progbits
 924              	.Ldebug_ranges0:
 925 0000 00000000 		.4byte	.LFB63
 926 0004 C8010000 		.4byte	.LFE63
 927 0008 00000000 		.4byte	.LFB64
 928 000c 10000000 		.4byte	.LFE64
 929 0010 00000000 		.4byte	.LFB65
 930 0014 10000000 		.4byte	.LFE65
 931 0018 00000000 		.4byte	0
 932 001c 00000000 		.4byte	0
 933              		.section	.debug_line,"",%progbits
 934              	.Ldebug_line0:
 935 0000 12020000 		.section	.debug_str,"MS",%progbits,1
 935      02009501 
 935      00000201 
 935      FB0E0D00 
 935      01010101 
 936              	.LASF38:
 937 0000 53445772 		.ascii	"SDWriteLBA1\000"
 937      6974654C 
 937      42413100 
 938              	.LASF29:
 939 000c 4D363835 		.ascii	"M6850ReadData\000"
 939      30526561 
 939      64446174 
 939      6100
 940              	.LASF43:
 941 001a 48616E64 		.ascii	"HandleZ80IO\000"
 941      6C655A38 
 941      30494F00 
 942              	.LASF9:
 943 0026 5F5F696E 		.ascii	"__int32_t\000"
 943      7433325F 
 943      7400
 944              	.LASF42:
 945 0030 433A5C55 		.ascii	"C:\\Users\\HPz420\\Documents\\GitHub\\Doug Gillilan"
 945      73657273 
 945      5C48507A 
 945      3432305C 
 945      446F6375 
 946 005e 645C5265 		.ascii	"d\\Retro-Computers\\Z80\\PSOC\\PSOC_Design_Files\\Z"
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 25


 946      74726F2D 
 946      436F6D70 
 946      75746572 
 946      735C5A38 
 947 008c 38302D50 		.ascii	"80-PSoC-3-Chips_002\\Z80_3Chip.cydsn\000"
 947      536F432D 
 947      332D4368 
 947      6970735F 
 947      3030325C 
 948              	.LASF33:
 949 00b0 53445265 		.ascii	"SDReadStatus\000"
 949      61645374 
 949      61747573 
 949      00
 950              	.LASF18:
 951 00bd 696F4372 		.ascii	"ioCrtlRegVal\000"
 951      746C5265 
 951      6756616C 
 951      00
 952              	.LASF30:
 953 00ca 4D363835 		.ascii	"M6850WriteData\000"
 953      30577269 
 953      74654461 
 953      746100
 954              	.LASF12:
 955 00d9 666C6F61 		.ascii	"float\000"
 955      7400
 956              	.LASF1:
 957 00df 756E7369 		.ascii	"unsigned char\000"
 957      676E6564 
 957      20636861 
 957      7200
 958              	.LASF40:
 959 00ed 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 959      43313120 
 959      352E342E 
 959      31203230 
 959      31363036 
 960 0120 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 960      20726576 
 960      6973696F 
 960      6E203233 
 960      37373135 
 961 0153 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 961      66756E63 
 961      74696F6E 
 961      2D736563 
 961      74696F6E 
 962              	.LASF15:
 963 017b 72656738 		.ascii	"reg8\000"
 963      00
 964              	.LASF5:
 965 0180 6C6F6E67 		.ascii	"long unsigned int\000"
 965      20756E73 
 965      69676E65 
 965      6420696E 
 965      7400
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 26


 966              	.LASF3:
 967 0192 73686F72 		.ascii	"short unsigned int\000"
 967      7420756E 
 967      7369676E 
 967      65642069 
 967      6E7400
 968              	.LASF34:
 969 01a5 53445772 		.ascii	"SDWriteCommand\000"
 969      69746543 
 969      6F6D6D61 
 969      6E6400
 970              	.LASF44:
 971 01b4 49544D5F 		.ascii	"ITM_RxBuffer\000"
 971      52784275 
 971      66666572 
 971      00
 972              	.LASF13:
 973 01c1 646F7562 		.ascii	"double\000"
 973      6C6500
 974              	.LASF31:
 975 01c8 4D363835 		.ascii	"M6850ReadStatus\000"
 975      30526561 
 975      64537461 
 975      74757300 
 976              	.LASF25:
 977 01d8 50696F57 		.ascii	"PioWriteCtrlA\000"
 977      72697465 
 977      4374726C 
 977      4100
 978              	.LASF28:
 979 01e6 50696F57 		.ascii	"PioWriteCtrlB\000"
 979      72697465 
 979      4374726C 
 979      4200
 980              	.LASF22:
 981 01f4 4D363835 		.ascii	"M6850ReadIntReg\000"
 981      30526561 
 981      64496E74 
 981      52656700 
 982              	.LASF8:
 983 0204 756E7369 		.ascii	"unsigned int\000"
 983      676E6564 
 983      20696E74 
 983      00
 984              	.LASF24:
 985 0211 50696F57 		.ascii	"PioWriteDataA\000"
 985      72697465 
 985      44617461 
 985      4100
 986              	.LASF27:
 987 021f 50696F57 		.ascii	"PioWriteDataB\000"
 987      72697465 
 987      44617461 
 987      4200
 988              	.LASF7:
 989 022d 6C6F6E67 		.ascii	"long long unsigned int\000"
 989      206C6F6E 
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 27


 989      6720756E 
 989      7369676E 
 989      65642069 
 990              	.LASF32:
 991 0244 4D363835 		.ascii	"M6850WriteCtrl\000"
 991      30577269 
 991      74654374 
 991      726C00
 992              	.LASF0:
 993 0253 7369676E 		.ascii	"signed char\000"
 993      65642063 
 993      68617200 
 994              	.LASF37:
 995 025f 53445772 		.ascii	"SDWriteLBA0\000"
 995      6974654C 
 995      42413000 
 996              	.LASF10:
 997 026b 696E7433 		.ascii	"int32_t\000"
 997      325F7400 
 998              	.LASF17:
 999 0273 73697A65 		.ascii	"sizetype\000"
 999      74797065 
 999      00
 1000              	.LASF39:
 1001 027c 53445772 		.ascii	"SDWriteLBA2\000"
 1001      6974654C 
 1001      42413200 
 1002              	.LASF6:
 1003 0288 6C6F6E67 		.ascii	"long long int\000"
 1003      206C6F6E 
 1003      6720696E 
 1003      7400
 1004              	.LASF14:
 1005 0296 63686172 		.ascii	"char\000"
 1005      00
 1006              	.LASF35:
 1007 029b 53445265 		.ascii	"SDReadData\000"
 1007      61644461 
 1007      746100
 1008              	.LASF41:
 1009 02a6 5A38305F 		.ascii	"Z80_IO_Handle.c\000"
 1009      494F5F48 
 1009      616E646C 
 1009      652E6300 
 1010              	.LASF21:
 1011 02b6 77616974 		.ascii	"waitNextIORq\000"
 1011      4E657874 
 1011      494F5271 
 1011      00
 1012              	.LASF20:
 1013 02c3 61636B49 		.ascii	"ackIO\000"
 1013      4F00
 1014              	.LASF2:
 1015 02c9 73686F72 		.ascii	"short int\000"
 1015      7420696E 
 1015      7400
 1016              	.LASF11:
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\ccvmWEXQ.s 			page 28


 1017 02d3 75696E74 		.ascii	"uint8\000"
 1017      3800
 1018              	.LASF4:
 1019 02d9 6C6F6E67 		.ascii	"long int\000"
 1019      20696E74 
 1019      00
 1020              	.LASF23:
 1021 02e2 50696F52 		.ascii	"PioReadDataA\000"
 1021      65616444 
 1021      61746141 
 1021      00
 1022              	.LASF26:
 1023 02ef 50696F52 		.ascii	"PioReadDataB\000"
 1023      65616444 
 1023      61746142 
 1023      00
 1024              	.LASF16:
 1025 02fc 6C6F6E67 		.ascii	"long double\000"
 1025      20646F75 
 1025      626C6500 
 1026              	.LASF36:
 1027 0308 53445772 		.ascii	"SDWriteData\000"
 1027      69746544 
 1027      61746100 
 1028              	.LASF19:
 1029 0314 696F5A38 		.ascii	"ioZ80Addr\000"
 1029      30416464 
 1029      7200
 1030              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
