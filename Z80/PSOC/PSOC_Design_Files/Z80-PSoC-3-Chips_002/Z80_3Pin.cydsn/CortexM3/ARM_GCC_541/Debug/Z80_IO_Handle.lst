ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Z80_IO_Handle.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HandleZ80IO,"ax",%progbits
  20              		.align	2
  21              		.global	HandleZ80IO
  22              		.thumb
  23              		.thumb_func
  24              		.type	HandleZ80IO, %function
  25              	HandleZ80IO:
  26              	.LFB63:
  27              		.file 1 "Z80_IO_Handle.c"
   1:Z80_IO_Handle.c **** /* ========================================
   2:Z80_IO_Handle.c ****  *
   3:Z80_IO_Handle.c ****  * Copyright LAND BOARDS, LLC, 2019
   4:Z80_IO_Handle.c ****  * All Rights Reserved
   5:Z80_IO_Handle.c ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:Z80_IO_Handle.c ****  *
   7:Z80_IO_Handle.c ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:Z80_IO_Handle.c ****  * WHICH IS THE PROPERTY OF Land Boards, LLC.
   9:Z80_IO_Handle.c ****  *
  10:Z80_IO_Handle.c ****  * ========================================
  11:Z80_IO_Handle.c **** */
  12:Z80_IO_Handle.c **** 
  13:Z80_IO_Handle.c **** #include <project.h>
  14:Z80_IO_Handle.c **** #include "FrontPanel.h"
  15:Z80_IO_Handle.c **** #include "Z80_IO_Handle.h"
  16:Z80_IO_Handle.c **** #include "Z80_SIO_emul.h"
  17:Z80_IO_Handle.c **** #include "Z80_PIO_emul.h"
  18:Z80_IO_Handle.c **** #include "Z80_6850_Emul.h"
  19:Z80_IO_Handle.c **** #include "Z80_CFCard_Emul.h"
  20:Z80_IO_Handle.c **** #include "Hardware_Config.h"
  21:Z80_IO_Handle.c **** 
  22:Z80_IO_Handle.c **** void HandleZ80IO(void)
  23:Z80_IO_Handle.c **** {
  28              		.loc 1 23 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 2


  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  24:Z80_IO_Handle.c ****     volatile uint8 ioCrtlRegVal;
  25:Z80_IO_Handle.c ****     volatile uint8 ioZ80Addr;
  26:Z80_IO_Handle.c ****     
  27:Z80_IO_Handle.c ****     ioCrtlRegVal = IO_Stat_Reg_Read();
  37              		.loc 1 27 0
  38 0004 FFF7FEFF 		bl	IO_Stat_Reg_Read
  39              	.LVL0:
  40 0008 8DF80700 		strb	r0, [sp, #7]
  28:Z80_IO_Handle.c **** #ifdef USING_SIO
  29:Z80_IO_Handle.c ****     if ((ioCrtlRegVal & IACK_MASK) == IN_IACK_CYCLE)
  30:Z80_IO_Handle.c ****     {
  31:Z80_IO_Handle.c ****         SioReadIntRegB();
  32:Z80_IO_Handle.c ****         return;
  33:Z80_IO_Handle.c ****     }
  34:Z80_IO_Handle.c **** #endif
  35:Z80_IO_Handle.c **** #ifdef USING_6850
  36:Z80_IO_Handle.c ****     if ((ioCrtlRegVal & IACK_MASK) == IN_IACK_CYCLE)
  41              		.loc 1 36 0
  42 000c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  43 0010 03F01903 		and	r3, r3, #25
  44 0014 102B     		cmp	r3, #16
  45 0016 02D1     		bne	.L2
  37:Z80_IO_Handle.c ****     {
  38:Z80_IO_Handle.c ****         M6850ReadIntReg();
  46              		.loc 1 38 0
  47 0018 FFF7FEFF 		bl	M6850ReadIntReg
  48              	.LVL1:
  39:Z80_IO_Handle.c ****         return;
  49              		.loc 1 39 0
  50 001c 7CE0     		b	.L1
  51              	.L2:
  40:Z80_IO_Handle.c ****     }
  41:Z80_IO_Handle.c **** #endif
  42:Z80_IO_Handle.c ****     ioZ80Addr = AdrLowIn_Read();
  52              		.loc 1 42 0
  53 001e FFF7FEFF 		bl	AdrLowIn_Read
  54              	.LVL2:
  55 0022 8DF80600 		strb	r0, [sp, #6]
  43:Z80_IO_Handle.c ****     switch (ioZ80Addr)
  56              		.loc 1 43 0
  57 0026 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
  58 002a DBB2     		uxtb	r3, r3
  59 002c 1A2B     		cmp	r3, #26
  60 002e 50D0     		beq	.L4
  61 0030 04D8     		bhi	.L5
  62 0032 182B     		cmp	r3, #24
  63 0034 29D0     		beq	.L6
  64 0036 192B     		cmp	r3, #25
  65 0038 39D0     		beq	.L7
  66 003a 6DE0     		b	.L1
  67              	.L5:
  68 003c 802B     		cmp	r3, #128
  69 003e 14D0     		beq	.L8
  70 0040 812B     		cmp	r3, #129
  71 0042 02D0     		beq	.L9
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 3


  72 0044 1B2B     		cmp	r3, #27
  73 0046 67D1     		bne	.L1
  74 0048 55E0     		b	.L10
  75              	.L9:
  44:Z80_IO_Handle.c ****     {
  45:Z80_IO_Handle.c **** #ifdef USING_SIO
  46:Z80_IO_Handle.c ****         case SIOA_D:
  47:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
  48:Z80_IO_Handle.c ****             {
  49:Z80_IO_Handle.c ****                 SioReadDataA();
  50:Z80_IO_Handle.c ****                 return;
  51:Z80_IO_Handle.c ****             }
  52:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  53:Z80_IO_Handle.c ****             {
  54:Z80_IO_Handle.c ****                 SioWriteDataA();
  55:Z80_IO_Handle.c ****                 return;
  56:Z80_IO_Handle.c ****             }
  57:Z80_IO_Handle.c ****             break;
  58:Z80_IO_Handle.c ****         case SIOA_C:    // Control register
  59:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  60:Z80_IO_Handle.c ****             {
  61:Z80_IO_Handle.c ****                 SioWriteCtrlA();
  62:Z80_IO_Handle.c ****                 return;
  63:Z80_IO_Handle.c ****             }
  64:Z80_IO_Handle.c ****             break;
  65:Z80_IO_Handle.c ****         case SIOB_D:
  66:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  67:Z80_IO_Handle.c ****             {
  68:Z80_IO_Handle.c ****                 SioReadDataB();
  69:Z80_IO_Handle.c ****                 return;
  70:Z80_IO_Handle.c ****             }
  71:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  72:Z80_IO_Handle.c ****             {
  73:Z80_IO_Handle.c ****                 SioWriteDataB();
  74:Z80_IO_Handle.c ****                 return;
  75:Z80_IO_Handle.c ****             }
  76:Z80_IO_Handle.c ****             break;
  77:Z80_IO_Handle.c ****         case SIOB_C:
  78:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  79:Z80_IO_Handle.c ****             {
  80:Z80_IO_Handle.c ****                 SioWriteCtrlB();
  81:Z80_IO_Handle.c ****                 return;
  82:Z80_IO_Handle.c ****             }
  83:Z80_IO_Handle.c ****             break;
  84:Z80_IO_Handle.c **** #endif
  85:Z80_IO_Handle.c **** #ifdef USING_CFCARD
  86:Z80_IO_Handle.c ****         case CF_DATA:           // 0x10
  87:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  88:Z80_IO_Handle.c ****             {
  89:Z80_IO_Handle.c ****                 CFReadData();
  90:Z80_IO_Handle.c ****             }
  91:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  92:Z80_IO_Handle.c ****             {
  93:Z80_IO_Handle.c ****                 CFWriteData();
  94:Z80_IO_Handle.c ****             }
  95:Z80_IO_Handle.c ****             break;
  96:Z80_IO_Handle.c ****         case CF_FEATURES_ERROR: // 0x11
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 4


  97:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
  98:Z80_IO_Handle.c ****             {
  99:Z80_IO_Handle.c ****                 CFReadErrorStat();
 100:Z80_IO_Handle.c ****             }
 101:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 102:Z80_IO_Handle.c ****             {
 103:Z80_IO_Handle.c ****                 CFWriteFeatures();
 104:Z80_IO_Handle.c ****             }
 105:Z80_IO_Handle.c ****             break;
 106:Z80_IO_Handle.c ****         case CF_SECCOUNT:       // 0x12
 107:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 108:Z80_IO_Handle.c ****             {
 109:Z80_IO_Handle.c ****                 CFReadSectorCount();
 110:Z80_IO_Handle.c ****             }
 111:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 112:Z80_IO_Handle.c ****             {
 113:Z80_IO_Handle.c ****                 CFWriteSectorCount();
 114:Z80_IO_Handle.c ****             }
 115:Z80_IO_Handle.c ****             break;
 116:Z80_IO_Handle.c ****         case CF_SECTOR_LAB0:    // 0x13
 117:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 118:Z80_IO_Handle.c ****             {
 119:Z80_IO_Handle.c ****                 CFReadSector();
 120:Z80_IO_Handle.c ****             }
 121:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 122:Z80_IO_Handle.c ****             {
 123:Z80_IO_Handle.c ****                 CFWriteLBA0();
 124:Z80_IO_Handle.c ****             }
 125:Z80_IO_Handle.c ****             break;
 126:Z80_IO_Handle.c ****         case CF_CYL_LOW_LBA1:   // 0x14
 127:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 128:Z80_IO_Handle.c ****             {
 129:Z80_IO_Handle.c ****                 CFReadCylLow();
 130:Z80_IO_Handle.c ****             }
 131:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 132:Z80_IO_Handle.c ****             {
 133:Z80_IO_Handle.c ****                 CFWriteLBA1();
 134:Z80_IO_Handle.c ****             }
 135:Z80_IO_Handle.c ****             break;
 136:Z80_IO_Handle.c ****         case CF_CYL_HI_LBA2:    // 0x15
 137:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 138:Z80_IO_Handle.c ****             {
 139:Z80_IO_Handle.c ****                 CFReadCylHigh();
 140:Z80_IO_Handle.c ****             }
 141:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 142:Z80_IO_Handle.c ****             {
 143:Z80_IO_Handle.c ****                 CFWriteLBA2();
 144:Z80_IO_Handle.c ****             }
 145:Z80_IO_Handle.c ****             break;
 146:Z80_IO_Handle.c ****         case CF_HEAD_LBA3:    // 0x16
 147:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 148:Z80_IO_Handle.c ****             {
 149:Z80_IO_Handle.c ****                 CFReadHead();
 150:Z80_IO_Handle.c ****             }
 151:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 152:Z80_IO_Handle.c ****             {
 153:Z80_IO_Handle.c ****                 CFWriteLBA3();
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 5


 154:Z80_IO_Handle.c ****             }
 155:Z80_IO_Handle.c ****             break;
 156:Z80_IO_Handle.c ****         case CF_STATUS_COMMAND: // 0x17
 157:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 158:Z80_IO_Handle.c ****             {
 159:Z80_IO_Handle.c ****                 CFReadStatus();
 160:Z80_IO_Handle.c ****             }
 161:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 162:Z80_IO_Handle.c ****             {
 163:Z80_IO_Handle.c ****                 CFWriteCommand();
 164:Z80_IO_Handle.c ****             }
 165:Z80_IO_Handle.c ****             break;
 166:Z80_IO_Handle.c **** #endif
 167:Z80_IO_Handle.c **** #ifdef USING_6850
 168:Z80_IO_Handle.c ****         case M6850_D:
 169:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
  76              		.loc 1 169 0
  77 004a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  78 004e DBB2     		uxtb	r3, r3
  79 0050 1C2B     		cmp	r3, #28
  80 0052 02D1     		bne	.L11
 170:Z80_IO_Handle.c ****             {
 171:Z80_IO_Handle.c ****                 M6850ReadData();
  81              		.loc 1 171 0
  82 0054 FFF7FEFF 		bl	M6850ReadData
  83              	.LVL3:
 172:Z80_IO_Handle.c ****                 return;
  84              		.loc 1 172 0
  85 0058 5EE0     		b	.L1
  86              	.L11:
 173:Z80_IO_Handle.c ****             }
 174:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
  87              		.loc 1 174 0
  88 005a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  89 005e DBB2     		uxtb	r3, r3
  90 0060 1A2B     		cmp	r3, #26
  91 0062 59D1     		bne	.L1
 175:Z80_IO_Handle.c ****             {
 176:Z80_IO_Handle.c ****                 M6850WriteData();
  92              		.loc 1 176 0
  93 0064 FFF7FEFF 		bl	M6850WriteData
  94              	.LVL4:
 177:Z80_IO_Handle.c ****                 return;
  95              		.loc 1 177 0
  96 0068 56E0     		b	.L1
  97              	.L8:
 178:Z80_IO_Handle.c ****             }
 179:Z80_IO_Handle.c ****             break;
 180:Z80_IO_Handle.c ****         case  M6850_C:    // Control register
 181:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
  98              		.loc 1 181 0
  99 006a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 100 006e DBB2     		uxtb	r3, r3
 101 0070 1C2B     		cmp	r3, #28
 102 0072 02D1     		bne	.L12
 182:Z80_IO_Handle.c ****             {
 183:Z80_IO_Handle.c ****                 M6850ReadStatus();
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 6


 103              		.loc 1 183 0
 104 0074 FFF7FEFF 		bl	M6850ReadStatus
 105              	.LVL5:
 184:Z80_IO_Handle.c ****                 return;
 106              		.loc 1 184 0
 107 0078 4EE0     		b	.L1
 108              	.L12:
 185:Z80_IO_Handle.c ****             }
 186:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 109              		.loc 1 186 0
 110 007a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 111 007e DBB2     		uxtb	r3, r3
 112 0080 1A2B     		cmp	r3, #26
 113 0082 49D1     		bne	.L1
 187:Z80_IO_Handle.c ****             {
 188:Z80_IO_Handle.c ****                 M6850WriteCtrl();
 114              		.loc 1 188 0
 115 0084 FFF7FEFF 		bl	M6850WriteCtrl
 116              	.LVL6:
 189:Z80_IO_Handle.c ****                 return;
 117              		.loc 1 189 0
 118 0088 46E0     		b	.L1
 119              	.L6:
 190:Z80_IO_Handle.c ****             }
 191:Z80_IO_Handle.c ****             break;
 192:Z80_IO_Handle.c **** #endif
 193:Z80_IO_Handle.c **** #ifdef USING_FRONT_PANEL
 194:Z80_IO_Handle.c ****         case FR_PNL_IO_LO:
 195:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 120              		.loc 1 195 0
 121 008a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 122 008e DBB2     		uxtb	r3, r3
 123 0090 1C2B     		cmp	r3, #28
 124 0092 03D1     		bne	.L13
 196:Z80_IO_Handle.c ****             {
 197:Z80_IO_Handle.c ****                 FrontPanelZ80Read(0);
 125              		.loc 1 197 0
 126 0094 0020     		movs	r0, #0
 127 0096 FFF7FEFF 		bl	FrontPanelZ80Read
 128              	.LVL7:
 198:Z80_IO_Handle.c ****                 return;
 129              		.loc 1 198 0
 130 009a 3DE0     		b	.L1
 131              	.L13:
 199:Z80_IO_Handle.c ****             }
 200:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 132              		.loc 1 200 0
 133 009c 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 134 00a0 DBB2     		uxtb	r3, r3
 135 00a2 1A2B     		cmp	r3, #26
 136 00a4 38D1     		bne	.L1
 201:Z80_IO_Handle.c ****             {
 202:Z80_IO_Handle.c ****                 FrontPanelZ80Write(0);
 137              		.loc 1 202 0
 138 00a6 0020     		movs	r0, #0
 139 00a8 FFF7FEFF 		bl	FrontPanelZ80Write
 140              	.LVL8:
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 7


 203:Z80_IO_Handle.c ****                 return;
 141              		.loc 1 203 0
 142 00ac 34E0     		b	.L1
 143              	.L7:
 204:Z80_IO_Handle.c ****             }
 205:Z80_IO_Handle.c ****             break;
 206:Z80_IO_Handle.c ****         case FR_PNL_IO_LO_MID:
 207:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 144              		.loc 1 207 0
 145 00ae 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 146 00b2 DBB2     		uxtb	r3, r3
 147 00b4 1C2B     		cmp	r3, #28
 148 00b6 03D1     		bne	.L14
 208:Z80_IO_Handle.c ****             {
 209:Z80_IO_Handle.c ****                 FrontPanelZ80Read(1);
 149              		.loc 1 209 0
 150 00b8 0120     		movs	r0, #1
 151 00ba FFF7FEFF 		bl	FrontPanelZ80Read
 152              	.LVL9:
 210:Z80_IO_Handle.c ****                 return;
 153              		.loc 1 210 0
 154 00be 2BE0     		b	.L1
 155              	.L14:
 211:Z80_IO_Handle.c ****             }
 212:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 156              		.loc 1 212 0
 157 00c0 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 158 00c4 DBB2     		uxtb	r3, r3
 159 00c6 1A2B     		cmp	r3, #26
 160 00c8 26D1     		bne	.L1
 213:Z80_IO_Handle.c ****             {
 214:Z80_IO_Handle.c ****                 FrontPanelZ80Write(1);
 161              		.loc 1 214 0
 162 00ca 0120     		movs	r0, #1
 163 00cc FFF7FEFF 		bl	FrontPanelZ80Write
 164              	.LVL10:
 215:Z80_IO_Handle.c ****                 return;
 165              		.loc 1 215 0
 166 00d0 22E0     		b	.L1
 167              	.L4:
 216:Z80_IO_Handle.c ****             }
 217:Z80_IO_Handle.c ****             break;
 218:Z80_IO_Handle.c ****         case FR_PNL_IO_HI_MID:
 219:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 168              		.loc 1 219 0
 169 00d2 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 170 00d6 DBB2     		uxtb	r3, r3
 171 00d8 1C2B     		cmp	r3, #28
 172 00da 03D1     		bne	.L15
 220:Z80_IO_Handle.c ****             {
 221:Z80_IO_Handle.c ****                 FrontPanelZ80Read(2);
 173              		.loc 1 221 0
 174 00dc 0220     		movs	r0, #2
 175 00de FFF7FEFF 		bl	FrontPanelZ80Read
 176              	.LVL11:
 222:Z80_IO_Handle.c ****                 return;
 177              		.loc 1 222 0
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 8


 178 00e2 19E0     		b	.L1
 179              	.L15:
 223:Z80_IO_Handle.c ****             }
 224:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 180              		.loc 1 224 0
 181 00e4 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 182 00e8 DBB2     		uxtb	r3, r3
 183 00ea 1A2B     		cmp	r3, #26
 184 00ec 14D1     		bne	.L1
 225:Z80_IO_Handle.c ****             {
 226:Z80_IO_Handle.c ****                 FrontPanelZ80Write(2);
 185              		.loc 1 226 0
 186 00ee 0220     		movs	r0, #2
 187 00f0 FFF7FEFF 		bl	FrontPanelZ80Write
 188              	.LVL12:
 227:Z80_IO_Handle.c ****                 return;
 189              		.loc 1 227 0
 190 00f4 10E0     		b	.L1
 191              	.L10:
 228:Z80_IO_Handle.c ****             }
 229:Z80_IO_Handle.c ****             break;
 230:Z80_IO_Handle.c ****         case FR_PNL_IO_HI:
 231:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 192              		.loc 1 231 0
 193 00f6 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 194 00fa DBB2     		uxtb	r3, r3
 195 00fc 1C2B     		cmp	r3, #28
 196 00fe 03D1     		bne	.L16
 232:Z80_IO_Handle.c ****             {
 233:Z80_IO_Handle.c ****                 FrontPanelZ80Read(3);
 197              		.loc 1 233 0
 198 0100 0320     		movs	r0, #3
 199 0102 FFF7FEFF 		bl	FrontPanelZ80Read
 200              	.LVL13:
 234:Z80_IO_Handle.c ****                 return;
 201              		.loc 1 234 0
 202 0106 07E0     		b	.L1
 203              	.L16:
 235:Z80_IO_Handle.c ****             }
 236:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 204              		.loc 1 236 0
 205 0108 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 206 010c DBB2     		uxtb	r3, r3
 207 010e 1A2B     		cmp	r3, #26
 208 0110 02D1     		bne	.L1
 237:Z80_IO_Handle.c ****             {
 238:Z80_IO_Handle.c ****                 FrontPanelZ80Write(3);
 209              		.loc 1 238 0
 210 0112 0320     		movs	r0, #3
 211 0114 FFF7FEFF 		bl	FrontPanelZ80Write
 212              	.LVL14:
 213              	.L1:
 239:Z80_IO_Handle.c ****                 return;
 240:Z80_IO_Handle.c ****             }
 241:Z80_IO_Handle.c ****             break;
 242:Z80_IO_Handle.c **** #endif
 243:Z80_IO_Handle.c **** #ifdef USING_EXP_MCCP23017
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 9


 244:Z80_IO_Handle.c ****         case PIOA_D:
 245:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)             // regular read cycle
 246:Z80_IO_Handle.c ****             {
 247:Z80_IO_Handle.c ****                 PioReadDataA();
 248:Z80_IO_Handle.c ****                 return;
 249:Z80_IO_Handle.c ****             }
 250:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 251:Z80_IO_Handle.c ****             {
 252:Z80_IO_Handle.c ****                 PioWriteDataA();
 253:Z80_IO_Handle.c ****                 return;
 254:Z80_IO_Handle.c ****             }
 255:Z80_IO_Handle.c ****             break;
 256:Z80_IO_Handle.c ****         case PIOA_C:    // Control register
 257:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 258:Z80_IO_Handle.c ****             {
 259:Z80_IO_Handle.c ****                 PioWriteCtrlA();
 260:Z80_IO_Handle.c ****                 return;
 261:Z80_IO_Handle.c ****             }
 262:Z80_IO_Handle.c ****             break;
 263:Z80_IO_Handle.c ****         case PIOB_D:
 264:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_READ_CYCLE)            // regular read cycle
 265:Z80_IO_Handle.c ****             {
 266:Z80_IO_Handle.c ****                 PioReadDataB();
 267:Z80_IO_Handle.c ****                 return;
 268:Z80_IO_Handle.c ****             }
 269:Z80_IO_Handle.c ****             else if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 270:Z80_IO_Handle.c ****             {
 271:Z80_IO_Handle.c ****                 SioWriteDataB();
 272:Z80_IO_Handle.c ****                 return;
 273:Z80_IO_Handle.c ****             }
 274:Z80_IO_Handle.c ****             break;
 275:Z80_IO_Handle.c ****         case PIOB_C:
 276:Z80_IO_Handle.c ****             if (ioCrtlRegVal == REGULAR_WRITE_CYCLE)      // regular write cycle
 277:Z80_IO_Handle.c ****             {
 278:Z80_IO_Handle.c ****                 PioWriteCtrlB();
 279:Z80_IO_Handle.c ****                 return;
 280:Z80_IO_Handle.c ****             }
 281:Z80_IO_Handle.c ****             break;
 282:Z80_IO_Handle.c **** #endif
 283:Z80_IO_Handle.c ****         default:    // Handle other cases
 284:Z80_IO_Handle.c ****             break;
 285:Z80_IO_Handle.c ****     }
 286:Z80_IO_Handle.c **** }
 214              		.loc 1 286 0
 215 0118 03B0     		add	sp, sp, #12
 216              		.cfi_def_cfa_offset 4
 217              		@ sp needed
 218 011a 5DF804FB 		ldr	pc, [sp], #4
 219              		.cfi_endproc
 220              	.LFE63:
 221              		.size	HandleZ80IO, .-HandleZ80IO
 222 011e 00BF     		.section	.text.ackIO,"ax",%progbits
 223              		.align	2
 224              		.global	ackIO
 225              		.thumb
 226              		.thumb_func
 227              		.type	ackIO, %function
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 10


 228              	ackIO:
 229              	.LFB64:
 287:Z80_IO_Handle.c **** 
 288:Z80_IO_Handle.c **** void ackIO(void)
 289:Z80_IO_Handle.c **** {
 230              		.loc 1 289 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234 0000 08B5     		push	{r3, lr}
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 3, -8
 237              		.cfi_offset 14, -4
 290:Z80_IO_Handle.c ****     IO_Ctrl_Reg_Write(IO_Ctrl_Reg_Read() | CLR_IO_INT_BIT);
 238              		.loc 1 290 0
 239 0002 FFF7FEFF 		bl	IO_Ctrl_Reg_Read
 240              	.LVL15:
 241 0006 40F00100 		orr	r0, r0, #1
 242 000a C0B2     		uxtb	r0, r0
 243 000c FFF7FEFF 		bl	IO_Ctrl_Reg_Write
 244              	.LVL16:
 245 0010 08BD     		pop	{r3, pc}
 246              		.cfi_endproc
 247              	.LFE64:
 248              		.size	ackIO, .-ackIO
 249 0012 00BF     		.section	.text.waitNextIORq,"ax",%progbits
 250              		.align	2
 251              		.global	waitNextIORq
 252              		.thumb
 253              		.thumb_func
 254              		.type	waitNextIORq, %function
 255              	waitNextIORq:
 256              	.LFB65:
 291:Z80_IO_Handle.c **** }
 292:Z80_IO_Handle.c **** 
 293:Z80_IO_Handle.c **** void waitNextIORq(void)
 294:Z80_IO_Handle.c **** {
 257              		.loc 1 294 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261 0000 08B5     		push	{r3, lr}
 262              		.cfi_def_cfa_offset 8
 263              		.cfi_offset 3, -8
 264              		.cfi_offset 14, -4
 265              	.L21:
 295:Z80_IO_Handle.c ****     while ((IO_Stat_Reg_Read() & IOBUSY_BIT) == 0x00);
 266              		.loc 1 295 0 discriminator 1
 267 0002 FFF7FEFF 		bl	IO_Stat_Reg_Read
 268              	.LVL17:
 269 0006 10F0100F 		tst	r0, #16
 270 000a FAD0     		beq	.L21
 296:Z80_IO_Handle.c **** }
 271              		.loc 1 296 0
 272 000c 08BD     		pop	{r3, pc}
 273              		.cfi_endproc
 274              	.LFE65:
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 11


 275              		.size	waitNextIORq, .-waitNextIORq
 276 000e 00BF     		.text
 277              	.Letext0:
 278              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 279              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 280              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 281              		.file 5 "Generated_Source\\PSoC5/IO_Stat_Reg.h"
 282              		.file 6 "Z80_6850_Emul.h"
 283              		.file 7 "Generated_Source\\PSoC5/AdrLowIn.h"
 284              		.file 8 "FrontPanel.h"
 285              		.file 9 "Generated_Source\\PSoC5/IO_Ctrl_Reg.h"
 286              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 287              		.section	.debug_info,"",%progbits
 288              	.Ldebug_info0:
 289 0000 8A020000 		.4byte	0x28a
 290 0004 0400     		.2byte	0x4
 291 0006 00000000 		.4byte	.Ldebug_abbrev0
 292 000a 04       		.byte	0x4
 293 000b 01       		.uleb128 0x1
 294 000c 74000000 		.4byte	.LASF33
 295 0010 0C       		.byte	0xc
 296 0011 F9010000 		.4byte	.LASF34
 297 0015 26020000 		.4byte	.LASF35
 298 0019 00000000 		.4byte	.Ldebug_ranges0+0
 299 001d 00000000 		.4byte	0
 300 0021 00000000 		.4byte	.Ldebug_line0
 301 0025 02       		.uleb128 0x2
 302 0026 01       		.byte	0x1
 303 0027 06       		.byte	0x6
 304 0028 C0020000 		.4byte	.LASF0
 305 002c 02       		.uleb128 0x2
 306 002d 01       		.byte	0x1
 307 002e 08       		.byte	0x8
 308 002f 66000000 		.4byte	.LASF1
 309 0033 02       		.uleb128 0x2
 310 0034 02       		.byte	0x2
 311 0035 05       		.byte	0x5
 312 0036 1C020000 		.4byte	.LASF2
 313 003a 02       		.uleb128 0x2
 314 003b 02       		.byte	0x2
 315 003c 07       		.byte	0x7
 316 003d 13010000 		.4byte	.LASF3
 317 0041 03       		.uleb128 0x3
 318 0042 21000000 		.4byte	.LASF9
 319 0046 02       		.byte	0x2
 320 0047 3F       		.byte	0x3f
 321 0048 4C000000 		.4byte	0x4c
 322 004c 02       		.uleb128 0x2
 323 004d 04       		.byte	0x4
 324 004e 05       		.byte	0x5
 325 004f AB020000 		.4byte	.LASF4
 326 0053 02       		.uleb128 0x2
 327 0054 04       		.byte	0x4
 328 0055 07       		.byte	0x7
 329 0056 43010000 		.4byte	.LASF5
 330 005a 02       		.uleb128 0x2
 331 005b 08       		.byte	0x8
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 12


 332 005c 05       		.byte	0x5
 333 005d D4010000 		.4byte	.LASF6
 334 0061 02       		.uleb128 0x2
 335 0062 08       		.byte	0x8
 336 0063 07       		.byte	0x7
 337 0064 9D010000 		.4byte	.LASF7
 338 0068 04       		.uleb128 0x4
 339 0069 04       		.byte	0x4
 340 006a 05       		.byte	0x5
 341 006b 696E7400 		.ascii	"int\000"
 342 006f 02       		.uleb128 0x2
 343 0070 04       		.byte	0x4
 344 0071 07       		.byte	0x7
 345 0072 90010000 		.4byte	.LASF8
 346 0076 03       		.uleb128 0x3
 347 0077 C3010000 		.4byte	.LASF10
 348 007b 03       		.byte	0x3
 349 007c 2C       		.byte	0x2c
 350 007d 41000000 		.4byte	0x41
 351 0081 05       		.uleb128 0x5
 352 0082 A5020000 		.4byte	.LASF11
 353 0086 04       		.byte	0x4
 354 0087 E401     		.2byte	0x1e4
 355 0089 2C000000 		.4byte	0x2c
 356 008d 02       		.uleb128 0x2
 357 008e 04       		.byte	0x4
 358 008f 04       		.byte	0x4
 359 0090 60000000 		.4byte	.LASF12
 360 0094 02       		.uleb128 0x2
 361 0095 08       		.byte	0x8
 362 0096 04       		.byte	0x4
 363 0097 2B000000 		.4byte	.LASF13
 364 009b 02       		.uleb128 0x2
 365 009c 01       		.byte	0x1
 366 009d 08       		.byte	0x8
 367 009e E2010000 		.4byte	.LASF14
 368 00a2 06       		.uleb128 0x6
 369 00a3 81000000 		.4byte	0x81
 370 00a7 02       		.uleb128 0x2
 371 00a8 08       		.byte	0x8
 372 00a9 04       		.byte	0x4
 373 00aa B4020000 		.4byte	.LASF15
 374 00ae 02       		.uleb128 0x2
 375 00af 04       		.byte	0x4
 376 00b0 07       		.byte	0x7
 377 00b1 CB010000 		.4byte	.LASF16
 378 00b5 07       		.uleb128 0x7
 379 00b6 26010000 		.4byte	.LASF19
 380 00ba 01       		.byte	0x1
 381 00bb 16       		.byte	0x16
 382 00bc 00000000 		.4byte	.LFB63
 383 00c0 1E010000 		.4byte	.LFE63-.LFB63
 384 00c4 01       		.uleb128 0x1
 385 00c5 9C       		.byte	0x9c
 386 00c6 BA010000 		.4byte	0x1ba
 387 00ca 08       		.uleb128 0x8
 388 00cb 44000000 		.4byte	.LASF17
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 13


 389 00cf 01       		.byte	0x1
 390 00d0 18       		.byte	0x18
 391 00d1 A2000000 		.4byte	0xa2
 392 00d5 02       		.uleb128 0x2
 393 00d6 91       		.byte	0x91
 394 00d7 77       		.sleb128 -9
 395 00d8 08       		.uleb128 0x8
 396 00d9 CC020000 		.4byte	.LASF18
 397 00dd 01       		.byte	0x1
 398 00de 19       		.byte	0x19
 399 00df A2000000 		.4byte	0xa2
 400 00e3 02       		.uleb128 0x2
 401 00e4 91       		.byte	0x91
 402 00e5 76       		.sleb128 -10
 403 00e6 09       		.uleb128 0x9
 404 00e7 08000000 		.4byte	.LVL0
 405 00eb 14020000 		.4byte	0x214
 406 00ef 09       		.uleb128 0x9
 407 00f0 1C000000 		.4byte	.LVL1
 408 00f4 1F020000 		.4byte	0x21f
 409 00f8 09       		.uleb128 0x9
 410 00f9 22000000 		.4byte	.LVL2
 411 00fd 2A020000 		.4byte	0x22a
 412 0101 09       		.uleb128 0x9
 413 0102 58000000 		.4byte	.LVL3
 414 0106 35020000 		.4byte	0x235
 415 010a 09       		.uleb128 0x9
 416 010b 68000000 		.4byte	.LVL4
 417 010f 40020000 		.4byte	0x240
 418 0113 09       		.uleb128 0x9
 419 0114 78000000 		.4byte	.LVL5
 420 0118 4B020000 		.4byte	0x24b
 421 011c 09       		.uleb128 0x9
 422 011d 88000000 		.4byte	.LVL6
 423 0121 56020000 		.4byte	0x256
 424 0125 0A       		.uleb128 0xa
 425 0126 9A000000 		.4byte	.LVL7
 426 012a 61020000 		.4byte	0x261
 427 012e 38010000 		.4byte	0x138
 428 0132 0B       		.uleb128 0xb
 429 0133 01       		.uleb128 0x1
 430 0134 50       		.byte	0x50
 431 0135 01       		.uleb128 0x1
 432 0136 30       		.byte	0x30
 433 0137 00       		.byte	0
 434 0138 0A       		.uleb128 0xa
 435 0139 AC000000 		.4byte	.LVL8
 436 013d 6C020000 		.4byte	0x26c
 437 0141 4B010000 		.4byte	0x14b
 438 0145 0B       		.uleb128 0xb
 439 0146 01       		.uleb128 0x1
 440 0147 50       		.byte	0x50
 441 0148 01       		.uleb128 0x1
 442 0149 30       		.byte	0x30
 443 014a 00       		.byte	0
 444 014b 0A       		.uleb128 0xa
 445 014c BE000000 		.4byte	.LVL9
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 14


 446 0150 61020000 		.4byte	0x261
 447 0154 5E010000 		.4byte	0x15e
 448 0158 0B       		.uleb128 0xb
 449 0159 01       		.uleb128 0x1
 450 015a 50       		.byte	0x50
 451 015b 01       		.uleb128 0x1
 452 015c 31       		.byte	0x31
 453 015d 00       		.byte	0
 454 015e 0A       		.uleb128 0xa
 455 015f D0000000 		.4byte	.LVL10
 456 0163 6C020000 		.4byte	0x26c
 457 0167 71010000 		.4byte	0x171
 458 016b 0B       		.uleb128 0xb
 459 016c 01       		.uleb128 0x1
 460 016d 50       		.byte	0x50
 461 016e 01       		.uleb128 0x1
 462 016f 31       		.byte	0x31
 463 0170 00       		.byte	0
 464 0171 0A       		.uleb128 0xa
 465 0172 E2000000 		.4byte	.LVL11
 466 0176 61020000 		.4byte	0x261
 467 017a 84010000 		.4byte	0x184
 468 017e 0B       		.uleb128 0xb
 469 017f 01       		.uleb128 0x1
 470 0180 50       		.byte	0x50
 471 0181 01       		.uleb128 0x1
 472 0182 32       		.byte	0x32
 473 0183 00       		.byte	0
 474 0184 0A       		.uleb128 0xa
 475 0185 F4000000 		.4byte	.LVL12
 476 0189 6C020000 		.4byte	0x26c
 477 018d 97010000 		.4byte	0x197
 478 0191 0B       		.uleb128 0xb
 479 0192 01       		.uleb128 0x1
 480 0193 50       		.byte	0x50
 481 0194 01       		.uleb128 0x1
 482 0195 32       		.byte	0x32
 483 0196 00       		.byte	0
 484 0197 0A       		.uleb128 0xa
 485 0198 06010000 		.4byte	.LVL13
 486 019c 61020000 		.4byte	0x261
 487 01a0 AA010000 		.4byte	0x1aa
 488 01a4 0B       		.uleb128 0xb
 489 01a5 01       		.uleb128 0x1
 490 01a6 50       		.byte	0x50
 491 01a7 01       		.uleb128 0x1
 492 01a8 33       		.byte	0x33
 493 01a9 00       		.byte	0
 494 01aa 0C       		.uleb128 0xc
 495 01ab 18010000 		.4byte	.LVL14
 496 01af 6C020000 		.4byte	0x26c
 497 01b3 0B       		.uleb128 0xb
 498 01b4 01       		.uleb128 0x1
 499 01b5 50       		.byte	0x50
 500 01b6 01       		.uleb128 0x1
 501 01b7 33       		.byte	0x33
 502 01b8 00       		.byte	0
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 15


 503 01b9 00       		.byte	0
 504 01ba 0D       		.uleb128 0xd
 505 01bb 16020000 		.4byte	.LASF20
 506 01bf 01       		.byte	0x1
 507 01c0 2001     		.2byte	0x120
 508 01c2 00000000 		.4byte	.LFB64
 509 01c6 12000000 		.4byte	.LFE64-.LFB64
 510 01ca 01       		.uleb128 0x1
 511 01cb 9C       		.byte	0x9c
 512 01cc E3010000 		.4byte	0x1e3
 513 01d0 09       		.uleb128 0x9
 514 01d1 06000000 		.4byte	.LVL15
 515 01d5 77020000 		.4byte	0x277
 516 01d9 09       		.uleb128 0x9
 517 01da 10000000 		.4byte	.LVL16
 518 01de 82020000 		.4byte	0x282
 519 01e2 00       		.byte	0
 520 01e3 0D       		.uleb128 0xd
 521 01e4 09020000 		.4byte	.LASF21
 522 01e8 01       		.byte	0x1
 523 01e9 2501     		.2byte	0x125
 524 01eb 00000000 		.4byte	.LFB65
 525 01ef 0E000000 		.4byte	.LFE65-.LFB65
 526 01f3 01       		.uleb128 0x1
 527 01f4 9C       		.byte	0x9c
 528 01f5 03020000 		.4byte	0x203
 529 01f9 09       		.uleb128 0x9
 530 01fa 06000000 		.4byte	.LVL17
 531 01fe 14020000 		.4byte	0x214
 532 0202 00       		.byte	0
 533 0203 0E       		.uleb128 0xe
 534 0204 73010000 		.4byte	.LASF36
 535 0208 0A       		.byte	0xa
 536 0209 1207     		.2byte	0x712
 537 020b 0F020000 		.4byte	0x20f
 538 020f 06       		.uleb128 0x6
 539 0210 76000000 		.4byte	0x76
 540 0214 0F       		.uleb128 0xf
 541 0215 02010000 		.4byte	.LASF22
 542 0219 02010000 		.4byte	.LASF22
 543 021d 05       		.byte	0x5
 544 021e 30       		.byte	0x30
 545 021f 0F       		.uleb128 0xf
 546 0220 80010000 		.4byte	.LASF23
 547 0224 80010000 		.4byte	.LASF23
 548 0228 06       		.byte	0x6
 549 0229 16       		.byte	0x16
 550 022a 0F       		.uleb128 0xf
 551 022b 65010000 		.4byte	.LASF24
 552 022f 65010000 		.4byte	.LASF24
 553 0233 07       		.byte	0x7
 554 0234 30       		.byte	0x30
 555 0235 0F       		.uleb128 0xf
 556 0236 13000000 		.4byte	.LASF25
 557 023a 13000000 		.4byte	.LASF25
 558 023e 06       		.byte	0x6
 559 023f 10       		.byte	0x10
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 16


 560 0240 0F       		.uleb128 0xf
 561 0241 51000000 		.4byte	.LASF26
 562 0245 51000000 		.4byte	.LASF26
 563 0249 06       		.byte	0x6
 564 024a 11       		.byte	0x11
 565 024b 0F       		.uleb128 0xf
 566 024c 55010000 		.4byte	.LASF27
 567 0250 55010000 		.4byte	.LASF27
 568 0254 06       		.byte	0x6
 569 0255 12       		.byte	0x12
 570 0256 0F       		.uleb128 0xf
 571 0257 B4010000 		.4byte	.LASF28
 572 025b B4010000 		.4byte	.LASF28
 573 025f 06       		.byte	0x6
 574 0260 13       		.byte	0x13
 575 0261 0F       		.uleb128 0xf
 576 0262 32000000 		.4byte	.LASF29
 577 0266 32000000 		.4byte	.LASF29
 578 026a 08       		.byte	0x8
 579 026b 3F       		.byte	0x3f
 580 026c 0F       		.uleb128 0xf
 581 026d 00000000 		.4byte	.LASF30
 582 0271 00000000 		.4byte	.LASF30
 583 0275 08       		.byte	0x8
 584 0276 40       		.byte	0x40
 585 0277 0F       		.uleb128 0xf
 586 0278 32010000 		.4byte	.LASF31
 587 027c 32010000 		.4byte	.LASF31
 588 0280 09       		.byte	0x9
 589 0281 30       		.byte	0x30
 590 0282 0F       		.uleb128 0xf
 591 0283 E7010000 		.4byte	.LASF32
 592 0287 E7010000 		.4byte	.LASF32
 593 028b 09       		.byte	0x9
 594 028c 2F       		.byte	0x2f
 595 028d 00       		.byte	0
 596              		.section	.debug_abbrev,"",%progbits
 597              	.Ldebug_abbrev0:
 598 0000 01       		.uleb128 0x1
 599 0001 11       		.uleb128 0x11
 600 0002 01       		.byte	0x1
 601 0003 25       		.uleb128 0x25
 602 0004 0E       		.uleb128 0xe
 603 0005 13       		.uleb128 0x13
 604 0006 0B       		.uleb128 0xb
 605 0007 03       		.uleb128 0x3
 606 0008 0E       		.uleb128 0xe
 607 0009 1B       		.uleb128 0x1b
 608 000a 0E       		.uleb128 0xe
 609 000b 55       		.uleb128 0x55
 610 000c 17       		.uleb128 0x17
 611 000d 11       		.uleb128 0x11
 612 000e 01       		.uleb128 0x1
 613 000f 10       		.uleb128 0x10
 614 0010 17       		.uleb128 0x17
 615 0011 00       		.byte	0
 616 0012 00       		.byte	0
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 17


 617 0013 02       		.uleb128 0x2
 618 0014 24       		.uleb128 0x24
 619 0015 00       		.byte	0
 620 0016 0B       		.uleb128 0xb
 621 0017 0B       		.uleb128 0xb
 622 0018 3E       		.uleb128 0x3e
 623 0019 0B       		.uleb128 0xb
 624 001a 03       		.uleb128 0x3
 625 001b 0E       		.uleb128 0xe
 626 001c 00       		.byte	0
 627 001d 00       		.byte	0
 628 001e 03       		.uleb128 0x3
 629 001f 16       		.uleb128 0x16
 630 0020 00       		.byte	0
 631 0021 03       		.uleb128 0x3
 632 0022 0E       		.uleb128 0xe
 633 0023 3A       		.uleb128 0x3a
 634 0024 0B       		.uleb128 0xb
 635 0025 3B       		.uleb128 0x3b
 636 0026 0B       		.uleb128 0xb
 637 0027 49       		.uleb128 0x49
 638 0028 13       		.uleb128 0x13
 639 0029 00       		.byte	0
 640 002a 00       		.byte	0
 641 002b 04       		.uleb128 0x4
 642 002c 24       		.uleb128 0x24
 643 002d 00       		.byte	0
 644 002e 0B       		.uleb128 0xb
 645 002f 0B       		.uleb128 0xb
 646 0030 3E       		.uleb128 0x3e
 647 0031 0B       		.uleb128 0xb
 648 0032 03       		.uleb128 0x3
 649 0033 08       		.uleb128 0x8
 650 0034 00       		.byte	0
 651 0035 00       		.byte	0
 652 0036 05       		.uleb128 0x5
 653 0037 16       		.uleb128 0x16
 654 0038 00       		.byte	0
 655 0039 03       		.uleb128 0x3
 656 003a 0E       		.uleb128 0xe
 657 003b 3A       		.uleb128 0x3a
 658 003c 0B       		.uleb128 0xb
 659 003d 3B       		.uleb128 0x3b
 660 003e 05       		.uleb128 0x5
 661 003f 49       		.uleb128 0x49
 662 0040 13       		.uleb128 0x13
 663 0041 00       		.byte	0
 664 0042 00       		.byte	0
 665 0043 06       		.uleb128 0x6
 666 0044 35       		.uleb128 0x35
 667 0045 00       		.byte	0
 668 0046 49       		.uleb128 0x49
 669 0047 13       		.uleb128 0x13
 670 0048 00       		.byte	0
 671 0049 00       		.byte	0
 672 004a 07       		.uleb128 0x7
 673 004b 2E       		.uleb128 0x2e
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 18


 674 004c 01       		.byte	0x1
 675 004d 3F       		.uleb128 0x3f
 676 004e 19       		.uleb128 0x19
 677 004f 03       		.uleb128 0x3
 678 0050 0E       		.uleb128 0xe
 679 0051 3A       		.uleb128 0x3a
 680 0052 0B       		.uleb128 0xb
 681 0053 3B       		.uleb128 0x3b
 682 0054 0B       		.uleb128 0xb
 683 0055 27       		.uleb128 0x27
 684 0056 19       		.uleb128 0x19
 685 0057 11       		.uleb128 0x11
 686 0058 01       		.uleb128 0x1
 687 0059 12       		.uleb128 0x12
 688 005a 06       		.uleb128 0x6
 689 005b 40       		.uleb128 0x40
 690 005c 18       		.uleb128 0x18
 691 005d 9742     		.uleb128 0x2117
 692 005f 19       		.uleb128 0x19
 693 0060 01       		.uleb128 0x1
 694 0061 13       		.uleb128 0x13
 695 0062 00       		.byte	0
 696 0063 00       		.byte	0
 697 0064 08       		.uleb128 0x8
 698 0065 34       		.uleb128 0x34
 699 0066 00       		.byte	0
 700 0067 03       		.uleb128 0x3
 701 0068 0E       		.uleb128 0xe
 702 0069 3A       		.uleb128 0x3a
 703 006a 0B       		.uleb128 0xb
 704 006b 3B       		.uleb128 0x3b
 705 006c 0B       		.uleb128 0xb
 706 006d 49       		.uleb128 0x49
 707 006e 13       		.uleb128 0x13
 708 006f 02       		.uleb128 0x2
 709 0070 18       		.uleb128 0x18
 710 0071 00       		.byte	0
 711 0072 00       		.byte	0
 712 0073 09       		.uleb128 0x9
 713 0074 898201   		.uleb128 0x4109
 714 0077 00       		.byte	0
 715 0078 11       		.uleb128 0x11
 716 0079 01       		.uleb128 0x1
 717 007a 31       		.uleb128 0x31
 718 007b 13       		.uleb128 0x13
 719 007c 00       		.byte	0
 720 007d 00       		.byte	0
 721 007e 0A       		.uleb128 0xa
 722 007f 898201   		.uleb128 0x4109
 723 0082 01       		.byte	0x1
 724 0083 11       		.uleb128 0x11
 725 0084 01       		.uleb128 0x1
 726 0085 31       		.uleb128 0x31
 727 0086 13       		.uleb128 0x13
 728 0087 01       		.uleb128 0x1
 729 0088 13       		.uleb128 0x13
 730 0089 00       		.byte	0
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 19


 731 008a 00       		.byte	0
 732 008b 0B       		.uleb128 0xb
 733 008c 8A8201   		.uleb128 0x410a
 734 008f 00       		.byte	0
 735 0090 02       		.uleb128 0x2
 736 0091 18       		.uleb128 0x18
 737 0092 9142     		.uleb128 0x2111
 738 0094 18       		.uleb128 0x18
 739 0095 00       		.byte	0
 740 0096 00       		.byte	0
 741 0097 0C       		.uleb128 0xc
 742 0098 898201   		.uleb128 0x4109
 743 009b 01       		.byte	0x1
 744 009c 11       		.uleb128 0x11
 745 009d 01       		.uleb128 0x1
 746 009e 31       		.uleb128 0x31
 747 009f 13       		.uleb128 0x13
 748 00a0 00       		.byte	0
 749 00a1 00       		.byte	0
 750 00a2 0D       		.uleb128 0xd
 751 00a3 2E       		.uleb128 0x2e
 752 00a4 01       		.byte	0x1
 753 00a5 3F       		.uleb128 0x3f
 754 00a6 19       		.uleb128 0x19
 755 00a7 03       		.uleb128 0x3
 756 00a8 0E       		.uleb128 0xe
 757 00a9 3A       		.uleb128 0x3a
 758 00aa 0B       		.uleb128 0xb
 759 00ab 3B       		.uleb128 0x3b
 760 00ac 05       		.uleb128 0x5
 761 00ad 27       		.uleb128 0x27
 762 00ae 19       		.uleb128 0x19
 763 00af 11       		.uleb128 0x11
 764 00b0 01       		.uleb128 0x1
 765 00b1 12       		.uleb128 0x12
 766 00b2 06       		.uleb128 0x6
 767 00b3 40       		.uleb128 0x40
 768 00b4 18       		.uleb128 0x18
 769 00b5 9742     		.uleb128 0x2117
 770 00b7 19       		.uleb128 0x19
 771 00b8 01       		.uleb128 0x1
 772 00b9 13       		.uleb128 0x13
 773 00ba 00       		.byte	0
 774 00bb 00       		.byte	0
 775 00bc 0E       		.uleb128 0xe
 776 00bd 34       		.uleb128 0x34
 777 00be 00       		.byte	0
 778 00bf 03       		.uleb128 0x3
 779 00c0 0E       		.uleb128 0xe
 780 00c1 3A       		.uleb128 0x3a
 781 00c2 0B       		.uleb128 0xb
 782 00c3 3B       		.uleb128 0x3b
 783 00c4 05       		.uleb128 0x5
 784 00c5 49       		.uleb128 0x49
 785 00c6 13       		.uleb128 0x13
 786 00c7 3F       		.uleb128 0x3f
 787 00c8 19       		.uleb128 0x19
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 20


 788 00c9 3C       		.uleb128 0x3c
 789 00ca 19       		.uleb128 0x19
 790 00cb 00       		.byte	0
 791 00cc 00       		.byte	0
 792 00cd 0F       		.uleb128 0xf
 793 00ce 2E       		.uleb128 0x2e
 794 00cf 00       		.byte	0
 795 00d0 3F       		.uleb128 0x3f
 796 00d1 19       		.uleb128 0x19
 797 00d2 3C       		.uleb128 0x3c
 798 00d3 19       		.uleb128 0x19
 799 00d4 6E       		.uleb128 0x6e
 800 00d5 0E       		.uleb128 0xe
 801 00d6 03       		.uleb128 0x3
 802 00d7 0E       		.uleb128 0xe
 803 00d8 3A       		.uleb128 0x3a
 804 00d9 0B       		.uleb128 0xb
 805 00da 3B       		.uleb128 0x3b
 806 00db 0B       		.uleb128 0xb
 807 00dc 00       		.byte	0
 808 00dd 00       		.byte	0
 809 00de 00       		.byte	0
 810              		.section	.debug_aranges,"",%progbits
 811 0000 2C000000 		.4byte	0x2c
 812 0004 0200     		.2byte	0x2
 813 0006 00000000 		.4byte	.Ldebug_info0
 814 000a 04       		.byte	0x4
 815 000b 00       		.byte	0
 816 000c 0000     		.2byte	0
 817 000e 0000     		.2byte	0
 818 0010 00000000 		.4byte	.LFB63
 819 0014 1E010000 		.4byte	.LFE63-.LFB63
 820 0018 00000000 		.4byte	.LFB64
 821 001c 12000000 		.4byte	.LFE64-.LFB64
 822 0020 00000000 		.4byte	.LFB65
 823 0024 0E000000 		.4byte	.LFE65-.LFB65
 824 0028 00000000 		.4byte	0
 825 002c 00000000 		.4byte	0
 826              		.section	.debug_ranges,"",%progbits
 827              	.Ldebug_ranges0:
 828 0000 00000000 		.4byte	.LFB63
 829 0004 1E010000 		.4byte	.LFE63
 830 0008 00000000 		.4byte	.LFB64
 831 000c 12000000 		.4byte	.LFE64
 832 0010 00000000 		.4byte	.LFB65
 833 0014 0E000000 		.4byte	.LFE65
 834 0018 00000000 		.4byte	0
 835 001c 00000000 		.4byte	0
 836              		.section	.debug_line,"",%progbits
 837              	.Ldebug_line0:
 838 0000 16020000 		.section	.debug_str,"MS",%progbits,1
 838      0200A801 
 838      00000201 
 838      FB0E0D00 
 838      01010101 
 839              	.LASF30:
 840 0000 46726F6E 		.ascii	"FrontPanelZ80Write\000"
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 21


 840      7450616E 
 840      656C5A38 
 840      30577269 
 840      746500
 841              	.LASF25:
 842 0013 4D363835 		.ascii	"M6850ReadData\000"
 842      30526561 
 842      64446174 
 842      6100
 843              	.LASF9:
 844 0021 5F5F696E 		.ascii	"__int32_t\000"
 844      7433325F 
 844      7400
 845              	.LASF13:
 846 002b 646F7562 		.ascii	"double\000"
 846      6C6500
 847              	.LASF29:
 848 0032 46726F6E 		.ascii	"FrontPanelZ80Read\000"
 848      7450616E 
 848      656C5A38 
 848      30526561 
 848      6400
 849              	.LASF17:
 850 0044 696F4372 		.ascii	"ioCrtlRegVal\000"
 850      746C5265 
 850      6756616C 
 850      00
 851              	.LASF26:
 852 0051 4D363835 		.ascii	"M6850WriteData\000"
 852      30577269 
 852      74654461 
 852      746100
 853              	.LASF12:
 854 0060 666C6F61 		.ascii	"float\000"
 854      7400
 855              	.LASF1:
 856 0066 756E7369 		.ascii	"unsigned char\000"
 856      676E6564 
 856      20636861 
 856      7200
 857              	.LASF33:
 858 0074 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 858      43313120 
 858      352E342E 
 858      31203230 
 858      31363036 
 859 00a7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 859      20726576 
 859      6973696F 
 859      6E203233 
 859      37373135 
 860 00da 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 860      66756E63 
 860      74696F6E 
 860      2D736563 
 860      74696F6E 
 861              	.LASF22:
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 22


 862 0102 494F5F53 		.ascii	"IO_Stat_Reg_Read\000"
 862      7461745F 
 862      5265675F 
 862      52656164 
 862      00
 863              	.LASF3:
 864 0113 73686F72 		.ascii	"short unsigned int\000"
 864      7420756E 
 864      7369676E 
 864      65642069 
 864      6E7400
 865              	.LASF19:
 866 0126 48616E64 		.ascii	"HandleZ80IO\000"
 866      6C655A38 
 866      30494F00 
 867              	.LASF31:
 868 0132 494F5F43 		.ascii	"IO_Ctrl_Reg_Read\000"
 868      74726C5F 
 868      5265675F 
 868      52656164 
 868      00
 869              	.LASF5:
 870 0143 6C6F6E67 		.ascii	"long unsigned int\000"
 870      20756E73 
 870      69676E65 
 870      6420696E 
 870      7400
 871              	.LASF27:
 872 0155 4D363835 		.ascii	"M6850ReadStatus\000"
 872      30526561 
 872      64537461 
 872      74757300 
 873              	.LASF24:
 874 0165 4164724C 		.ascii	"AdrLowIn_Read\000"
 874      6F77496E 
 874      5F526561 
 874      6400
 875              	.LASF36:
 876 0173 49544D5F 		.ascii	"ITM_RxBuffer\000"
 876      52784275 
 876      66666572 
 876      00
 877              	.LASF23:
 878 0180 4D363835 		.ascii	"M6850ReadIntReg\000"
 878      30526561 
 878      64496E74 
 878      52656700 
 879              	.LASF8:
 880 0190 756E7369 		.ascii	"unsigned int\000"
 880      676E6564 
 880      20696E74 
 880      00
 881              	.LASF7:
 882 019d 6C6F6E67 		.ascii	"long long unsigned int\000"
 882      206C6F6E 
 882      6720756E 
 882      7369676E 
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 23


 882      65642069 
 883              	.LASF28:
 884 01b4 4D363835 		.ascii	"M6850WriteCtrl\000"
 884      30577269 
 884      74654374 
 884      726C00
 885              	.LASF10:
 886 01c3 696E7433 		.ascii	"int32_t\000"
 886      325F7400 
 887              	.LASF16:
 888 01cb 73697A65 		.ascii	"sizetype\000"
 888      74797065 
 888      00
 889              	.LASF6:
 890 01d4 6C6F6E67 		.ascii	"long long int\000"
 890      206C6F6E 
 890      6720696E 
 890      7400
 891              	.LASF14:
 892 01e2 63686172 		.ascii	"char\000"
 892      00
 893              	.LASF32:
 894 01e7 494F5F43 		.ascii	"IO_Ctrl_Reg_Write\000"
 894      74726C5F 
 894      5265675F 
 894      57726974 
 894      6500
 895              	.LASF34:
 896 01f9 5A38305F 		.ascii	"Z80_IO_Handle.c\000"
 896      494F5F48 
 896      616E646C 
 896      652E6300 
 897              	.LASF21:
 898 0209 77616974 		.ascii	"waitNextIORq\000"
 898      4E657874 
 898      494F5271 
 898      00
 899              	.LASF20:
 900 0216 61636B49 		.ascii	"ackIO\000"
 900      4F00
 901              	.LASF2:
 902 021c 73686F72 		.ascii	"short int\000"
 902      7420696E 
 902      7400
 903              	.LASF35:
 904 0226 433A5C55 		.ascii	"C:\\Users\\HPz420\\Documents\\GitHub\\Doug Gillilan"
 904      73657273 
 904      5C48507A 
 904      3432305C 
 904      446F6375 
 905 0254 645C5265 		.ascii	"d\\Retro-Computers\\Z80\\PSOC\\PSOC_Design_Files\\Z"
 905      74726F2D 
 905      436F6D70 
 905      75746572 
 905      735C5A38 
 906 0282 38302D50 		.ascii	"80-PSoC-3-Chips_002\\Z80_3Pin.cydsn\000"
 906      536F432D 
ARM GAS  C:\Users\HPz420\AppData\Local\Temp\cc47ma5h.s 			page 24


 906      332D4368 
 906      6970735F 
 906      3030325C 
 907              	.LASF11:
 908 02a5 75696E74 		.ascii	"uint8\000"
 908      3800
 909              	.LASF4:
 910 02ab 6C6F6E67 		.ascii	"long int\000"
 910      20696E74 
 910      00
 911              	.LASF15:
 912 02b4 6C6F6E67 		.ascii	"long double\000"
 912      20646F75 
 912      626C6500 
 913              	.LASF0:
 914 02c0 7369676E 		.ascii	"signed char\000"
 914      65642063 
 914      68617200 
 915              	.LASF18:
 916 02cc 696F5A38 		.ascii	"ioZ80Addr\000"
 916      30416464 
 916      7200
 917              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
