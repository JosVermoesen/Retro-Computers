0001   0000             ; StringTest.asm
0002   0000             ; Send out a string
0003   0000             
0004   0000             CR          .EQU     0DH
0005   0000             LF          .EQU     0AH
0006   0000             
0007   0000             ; Define the ACIA control and data register addresses
0008   0000             ACIA_CTRL   .EQU 80H  ; Control register address
0009   0000             ACIA_DATA   .EQU 81H  ; Data register address
0010   0000             
0011   0000             ; Define the initialization values
0012   0000             ACIA_RESET  .EQU 03H	; Master reset
0013   0000             ACIA_INIT   .EQU 15H	; Disable receive interrupt
0014   0000             						; Set RTS low and transmit interrupt disabled
0015   0000             						; 8 data bits
0016   0000             						; No parity
0017   0000             						; 1 stop bit;
0018   0000             						; /1 clock (115200 baud with 1.8432 MHz clock)
0019   0000             
0020   0000             ; Define the reset vector address
0021   0000             RESET_VECTOR .EQU 0000H
0022   0000             
0023   0000             ; Start of the program
0024   0000             	.ORG RESET_VECTOR
0025   0000 C3 03 00    	JP START          ; Jump to the start of the program
0026   0003             
0027   0003             START:
0028   0003 F3          	DI                	; Disable interrupts
0029   0004             	
0030   0004 3E 03       	LD A, ACIA_RESET	; Reset ACIA command
0031   0006 D3 80       	OUT (ACIA_CTRL), A	; Write to the control register
0032   0008             
0033   0008 3E 15       	LD A, ACIA_INIT		; Load the initialization value into register A
0034   000A D3 80       	OUT (ACIA_CTRL), A	; Write to the control register
0035   000C             	
0036   000C 21 38 00    	LD HL, MESSAGE		; Load the address of the message into HL
0037   000F CD 1A 00    	CALL PRINT			; Call the print subroutine
0038   0012             
0039   0012             ; Loop forever to read and write characters
0040   0012             MAIN_LOOP:
0041   0012 CD 2F 00    	CALL READ_CHAR		; Read a character
0042   0015 CD 24 00    	CALL WRITE_CHAR		; Write the character that was read
0043   0018 18 F8       	JR MAIN_LOOP		; Repeat the loop
0044   001A             
0045   001A             ; Subroutine to print a string
0046   001A             PRINT:
0047   001A 7E          	LD A, (HL)			; Load the character pointed to by HL into A
0048   001B FE 00       	CP 0          		; Compare A with 0 (end of string)
0049   001D C8          	RET Z         		; Return if zero (end of string)
0050   001E CD 24 00    	CALL WRITE_CHAR		; Write out the character
0051   0021 23          	INC HL				; Increment HL to point to the next character
0052   0022 18 F6       	JR PRINT			; Repeat
0053   0024             
0054   0024             ; Routine to write a character to the ACIA
0055   0024             WRITE_CHAR:
0056   0024 F5          	PUSH AF				; Preserve the A register
0057   0025             WAIT_TX_READY:
0058   0025 DB 80       	IN A, (ACIA_CTRL)	; Read the status register
0059   0027 CB 4F       	BIT 1, A			; Check if the transmitter is ready
0060   0029 28 FA       	JR Z, WAIT_TX_READY	; Wait until the transmitter is ready
0061   002B F1          	POP AF				; Restore the A register
0062   002C D3 81       	OUT (ACIA_DATA), A	; Write the character in register A to the data register
0063   002E C9          	RET
0064   002F             
0065   002F             ; Routine to read a character from the ACIA
0066   002F             READ_CHAR:
0067   002F DB 80       	IN A, (ACIA_CTRL) 	; Read the status register
0068   0031 CB 47       	BIT 0, A			; Check if data is available
0069   0033 28 FA       	JR Z, READ_CHAR		; Wait until data is available
0070   0035 DB 81       	IN A, (ACIA_DATA)	; Read the character from the data register
0071   0037 C9          	RET
0072   0038             
0073   0038             ; Data section
0074   0038             MESSAGE:
0075   0038 4C 42 2D 5A     .BYTE	"LB-Z80-01",CR,LF,0
0075   003C 38 30 2D 30 
0075   0040 31 0D 0A 00 
0076   0044             
0077   0044             ; End of the program
0078   0044                         .END START
tasm: Number of errors = 0
