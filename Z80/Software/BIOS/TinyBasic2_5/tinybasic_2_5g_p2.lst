0001   0000             ;*************************************************************
0002   0000             ;
0003   0000             ;                 TINY BASIC FOR ZILOG Z80
0004   0000             ;                       VERSION 2.5g
0005   0000             ;
0006   0000             ;		       ORIGINAL v2.0
0007   0000             ;                     BY LI-CHEN WANG
0008   0000             ;
0009   0000             ;                  MODIFIED AND TRANSLATED
0010   0000             ;                    TO INTEL MNEMONICS
0011   0000             ;                     BY ROGER RAUSKOLB
0012   0000             ;                      10 OCTOBER,1976
0013   0000             ;
0014   0000             ;                  MODIFIED AND TRANSLATED
0015   0000             ;                    TO ZILOG MNEMONICS
0016   0000             ;                      BY DOUG GABBARD
0017   0000             ;		     www.retrodepot.net
0018   0000             ;
0019   0000             ;		    RELEASED TO THE PUBLIC
0020   0000             ;                      10 OCTOBER,2017
0021   0000             ;                  YEAH, 41 YEARS LATER....
0022   0000             ;
0023   0000             ;		       UPDATED TO V2.5g
0024   0000             ;		       9 DECEMBER, 2017
0025   0000             ;		       BY DOUG GABBARD
0026   0000             ;		      www.retrodepot.net
0027   0000             ;
0028   0000             ;                         @COPYLEFT
0029   0000             ;                   ALL WRONGS RESERVED
0030   0000             ;
0031   0000             ;*************************************************************
0032   0000             ; This code is derived from the original 8080 Tiny Basic.
0033   0000             ; It was first compiled in 8080 Mnemonics, then disassembled
0034   0000             ; into Zilog Mnemonics.  And then checked against the original
0035   0000             ; to ensure accuracy.  It was then partially enhanced with z80
0036   0000             ; specific code. And once done, it was then modified to work
0037   0000             ; with the G80-S Micro Computer. However, that portion of the
0038   0000             ; code has been left out in order to make this code a little
0039   0000             ; more portable.  There are only three routines that one needs
0040   0000             ; to write, and specifing the serial port's I/O address, in
0041   0000             ; order to make this version work with your own DIY computer.
0042   0000             ; Those routines can be found at the end of the source code.
0043   0000             ;
0044   0000             ; I hope you find good use for this relic. However, I would
0045   0000             ; ask that if you do find use for it, please put a reference
0046   0000             ; to me in your work. And please, distribute freely.
0047   0000             ;*************************************************************
0048   0000             
0049   0000             
0050   0000             
0051   0000             ;*************************************************************
0052   0000             ; *** ROUTINES TO MODIFY ***
0053   0000             ;
0054   0000             ; The routines that need modified for this to work with your
0055   0000             ; particular computer are at the bottom of this file.  They
0056   0000             ; are: SERIAL_INIT, RX_RDY, and TX_RDY.  SERIAL_INIT is a
0057   0000             ; routine to intialize the Serial Port that will be used.
0058   0000             ; RX_RDY is a routine to check if the Serial Port has a
0059   0000             ; character available.  And TX_RDY checks to see if the Serial
0060   0000             ; Port is ready to send a character, and then sends it.
0061   0000             ;
0062   0000             ; You will also need to define the location of your serial
0063   0000             ; port.  It's is the next line below this block of text.
0064   0000             ;*************************************************************
0065   0000             
0066   0000             
0067   0000             
0068   0000             
0069   0000             SerialPort	EQU	00H		;This is for your I/0
tinybasic_2_5g_p2.ASM line 0069: Label not found: (SerialPort)
tinybasic_2_5g_p2.ASM line 0069: label value misalligned.           (SerialPort)
tinybasic_2_5g_p2.ASM line 0069: unrecognized instruction.          (SerialPort)
0070   0000             
0071   0000             
0072   0000             SPACE           EQU     020H            ; Space
tinybasic_2_5g_p2.ASM line 0072: Label not found: (SPACE)
tinybasic_2_5g_p2.ASM line 0072: label value misalligned.           (SPACE)
tinybasic_2_5g_p2.ASM line 0072: unrecognized instruction.          (SPACE)
0073   0000             TAB             EQU     09H             ; HORIZONTAL TAB
tinybasic_2_5g_p2.ASM line 0073: Label not found: (TAB)
tinybasic_2_5g_p2.ASM line 0073: label value misalligned.           (TAB)
tinybasic_2_5g_p2.ASM line 0073: unrecognized instruction.          (TAB)
0074   0000             CTRLC           EQU     03H             ; Control "C"
tinybasic_2_5g_p2.ASM line 0074: Label not found: (CTRLC)
tinybasic_2_5g_p2.ASM line 0074: label value misalligned.           (CTRLC)
tinybasic_2_5g_p2.ASM line 0074: unrecognized instruction.          (CTRLC)
0075   0000             CTRLG           EQU     07H             ; Control "G"
tinybasic_2_5g_p2.ASM line 0075: Label not found: (CTRLG)
tinybasic_2_5g_p2.ASM line 0075: label value misalligned.           (CTRLG)
tinybasic_2_5g_p2.ASM line 0075: unrecognized instruction.          (CTRLG)
0076   0000             BKSP            EQU     08H             ; Back space
tinybasic_2_5g_p2.ASM line 0076: Label not found: (BKSP)
tinybasic_2_5g_p2.ASM line 0076: label value misalligned.           (BKSP)
tinybasic_2_5g_p2.ASM line 0076: unrecognized instruction.          (BKSP)
0077   0000             LF              EQU     0AH             ; Line feed
tinybasic_2_5g_p2.ASM line 0077: Label not found: (LF)
tinybasic_2_5g_p2.ASM line 0077: label value misalligned.           (LF)
tinybasic_2_5g_p2.ASM line 0077: unrecognized instruction.          (LF)
0078   0000             CS              EQU     0CH             ; Clear screen
tinybasic_2_5g_p2.ASM line 0078: Label not found: (CS)
tinybasic_2_5g_p2.ASM line 0078: label value misalligned.           (CS)
tinybasic_2_5g_p2.ASM line 0078: unrecognized instruction.          (CS)
0079   0000             CR              EQU     0DH             ; Carriage return
tinybasic_2_5g_p2.ASM line 0079: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 0079: label value misalligned.           (CR)
tinybasic_2_5g_p2.ASM line 0079: unrecognized instruction.          (CR)
0080   0000             CTRLO           EQU     0FH             ; Control "O"
tinybasic_2_5g_p2.ASM line 0080: Label not found: (CTRLO)
tinybasic_2_5g_p2.ASM line 0080: label value misalligned.           (CTRLO)
tinybasic_2_5g_p2.ASM line 0080: unrecognized instruction.          (CTRLO)
0081   0000             CTRLQ	        EQU     011H            ; Control "Q"
tinybasic_2_5g_p2.ASM line 0081: Label not found: (CTRLQ)
tinybasic_2_5g_p2.ASM line 0081: label value misalligned.           (CTRLQ)
tinybasic_2_5g_p2.ASM line 0081: unrecognized instruction.          (CTRLQ)
0082   0000             CTRLR           EQU     012H            ; Control "R"
tinybasic_2_5g_p2.ASM line 0082: Label not found: (CTRLR)
tinybasic_2_5g_p2.ASM line 0082: label value misalligned.           (CTRLR)
tinybasic_2_5g_p2.ASM line 0082: unrecognized instruction.          (CTRLR)
0083   0000             CTRLS           EQU     013H            ; Control "S"
tinybasic_2_5g_p2.ASM line 0083: Label not found: (CTRLS)
tinybasic_2_5g_p2.ASM line 0083: label value misalligned.           (CTRLS)
tinybasic_2_5g_p2.ASM line 0083: unrecognized instruction.          (CTRLS)
0084   0000             CTRLU           EQU     015H            ; Control "U"
tinybasic_2_5g_p2.ASM line 0084: Label not found: (CTRLU)
tinybasic_2_5g_p2.ASM line 0084: label value misalligned.           (CTRLU)
tinybasic_2_5g_p2.ASM line 0084: unrecognized instruction.          (CTRLU)
0085   0000             ESC             EQU     01BH            ; Escape
tinybasic_2_5g_p2.ASM line 0085: Label not found: (ESC)
tinybasic_2_5g_p2.ASM line 0085: label value misalligned.           (ESC)
tinybasic_2_5g_p2.ASM line 0085: unrecognized instruction.          (ESC)
0086   0000             DEL             EQU     07FH            ; Delete
tinybasic_2_5g_p2.ASM line 0086: Label not found: (DEL)
tinybasic_2_5g_p2.ASM line 0086: label value misalligned.           (DEL)
tinybasic_2_5g_p2.ASM line 0086: unrecognized instruction.          (DEL)
0087   0000             
0088   0000             STACK           EQU     0FFFFH          ; STACKB
tinybasic_2_5g_p2.ASM line 0088: Label not found: (STACK)
tinybasic_2_5g_p2.ASM line 0088: label value misalligned.           (STACK)
tinybasic_2_5g_p2.ASM line 0088: unrecognized instruction.          (STACK)
0089   0000             OCSW            EQU     08000H          ;SWITCH FOR OUTPUT
tinybasic_2_5g_p2.ASM line 0089: Label not found: (OCSW)
tinybasic_2_5g_p2.ASM line 0089: label value misalligned.           (OCSW)
tinybasic_2_5g_p2.ASM line 0089: unrecognized instruction.          (OCSW)
0090   0000             CURRNT          EQU     OCSW+1          ;POINTS FOR OUTPUT
tinybasic_2_5g_p2.ASM line 0090: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0090: label value misalligned.           (CURRNT)
tinybasic_2_5g_p2.ASM line 0090: unrecognized instruction.          (CURRNT)
0091   0000             STKGOS          EQU     OCSW+3          ;SAVES SP IN 'GOSUB'
tinybasic_2_5g_p2.ASM line 0091: Label not found: (STKGOS)
tinybasic_2_5g_p2.ASM line 0091: label value misalligned.           (STKGOS)
tinybasic_2_5g_p2.ASM line 0091: unrecognized instruction.          (STKGOS)
0092   0000             VARNXT          EQU     OCSW+5          ;TEMP STORAGE
tinybasic_2_5g_p2.ASM line 0092: Label not found: (VARNXT)
tinybasic_2_5g_p2.ASM line 0092: label value misalligned.           (VARNXT)
tinybasic_2_5g_p2.ASM line 0092: unrecognized instruction.          (VARNXT)
0093   0000             STKINP          EQU     OCSW+7          ;SAVES SP IN 'INPUT'
tinybasic_2_5g_p2.ASM line 0093: Label not found: (STKINP)
tinybasic_2_5g_p2.ASM line 0093: label value misalligned.           (STKINP)
tinybasic_2_5g_p2.ASM line 0093: unrecognized instruction.          (STKINP)
0094   0000             LOPVAR          EQU     OCSW+9          ;'FOR' LOOP SAVE AREA
tinybasic_2_5g_p2.ASM line 0094: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 0094: label value misalligned.           (LOPVAR)
tinybasic_2_5g_p2.ASM line 0094: unrecognized instruction.          (LOPVAR)
0095   0000             LOPINC          EQU     OCSW+11         ;INCREMENT
tinybasic_2_5g_p2.ASM line 0095: Label not found: (LOPINC)
tinybasic_2_5g_p2.ASM line 0095: label value misalligned.           (LOPINC)
tinybasic_2_5g_p2.ASM line 0095: unrecognized instruction.          (LOPINC)
0096   0000             LOPLMT          EQU     OCSW+13         ;LIMIT
tinybasic_2_5g_p2.ASM line 0096: Label not found: (LOPLMT)
tinybasic_2_5g_p2.ASM line 0096: label value misalligned.           (LOPLMT)
tinybasic_2_5g_p2.ASM line 0096: unrecognized instruction.          (LOPLMT)
0097   0000             LOPLN           EQU     OCSW+15         ;LINE NUMBER
tinybasic_2_5g_p2.ASM line 0097: Label not found: (LOPLN)
tinybasic_2_5g_p2.ASM line 0097: label value misalligned.           (LOPLN)
tinybasic_2_5g_p2.ASM line 0097: unrecognized instruction.          (LOPLN)
0098   0000             LOPPT           EQU     OCSW+17         ;TEXT POINTER
tinybasic_2_5g_p2.ASM line 0098: Label not found: (LOPPT)
tinybasic_2_5g_p2.ASM line 0098: label value misalligned.           (LOPPT)
tinybasic_2_5g_p2.ASM line 0098: unrecognized instruction.          (LOPPT)
0099   0000             RANPNT          EQU     OCSW+19         ;RANDOM NUMBER POINTER
tinybasic_2_5g_p2.ASM line 0099: Label not found: (RANPNT)
tinybasic_2_5g_p2.ASM line 0099: label value misalligned.           (RANPNT)
tinybasic_2_5g_p2.ASM line 0099: unrecognized instruction.          (RANPNT)
0100   0000             TXTUNF          EQU     OCSW+21         ;->UNFILLED TEXT AREA
tinybasic_2_5g_p2.ASM line 0100: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 0100: label value misalligned.           (TXTUNF)
tinybasic_2_5g_p2.ASM line 0100: unrecognized instruction.          (TXTUNF)
0101   0000             TXTBGN          EQU     OCSW+23         ;TEXT SAVE AREA BEGINS
tinybasic_2_5g_p2.ASM line 0101: Label not found: (TXTBGN)
tinybasic_2_5g_p2.ASM line 0101: label value misalligned.           (TXTBGN)
tinybasic_2_5g_p2.ASM line 0101: unrecognized instruction.          (TXTBGN)
0102   0000             
0103   0000             TXTEND          EQU     0FF00H          ;TEXT SAVE AREA ENDS
tinybasic_2_5g_p2.ASM line 0103: Label not found: (TXTEND)
tinybasic_2_5g_p2.ASM line 0103: label value misalligned.           (TXTEND)
tinybasic_2_5g_p2.ASM line 0103: unrecognized instruction.          (TXTEND)
0104   0000             
0105   0000             
0106   0000             ;*************************************************************
0107   0000             ; *** ZERO PAGE SUBROUTINES ***
0108   0000             ;
0109   0000             ; THE Z80 INSTRUCTION SET ALLOWS FOR 8 ROUTINES IN LOW MEMORY
0110   0000             ; THAT MAY BE CALLED BY RST 00H, 08H, 10H, 18H, 20H, 28H, 30H,
0111   0000             ; AND 38H.  THIS IS A ONE BYTE INSTRUCTION, AND IS FUNCTIONALLY
0112   0000             ; SIMILAR TO THE THREE BYTE INSTRUCTION 'CALL XXXX'. TINY BASIC
0113   0000             ; WILL USE THE RST INSTRUCTION FOR THE 7 MOST FREQUENTLY USED
0114   0000             ; SUBROUTINES. TWO OTHER SUBROUTINES (CRLF & TSTNUM) ARE ALSO
0115   0000             ; IN THIS SECTION. THEY CAN BE REACHED WITH 'CALL'.
0116   0000             ;*************************************************************
0117   0000             DWA     MACRO WHERE
tinybasic_2_5g_p2.ASM line 0117: Label not found: (DWA)
tinybasic_2_5g_p2.ASM line 0117: label value misalligned.           (DWA)
tinybasic_2_5g_p2.ASM line 0117: unrecognized instruction.          (DWA)
0118   0000                     DB   (WHERE SHR 8) + 128
tinybasic_2_5g_p2.ASM line 0118: unrecognized instruction.          (DB)
0119   0000                     DB   WHERE AND 0FFH
tinybasic_2_5g_p2.ASM line 0119: unrecognized instruction.          (DB)
0120   0000                     ENDM
tinybasic_2_5g_p2.ASM line 0120: unrecognized instruction.          (ENDM)
0121   0000             
0122   0000                     ORG  0000H
tinybasic_2_5g_p2.ASM line 0122: unrecognized instruction.          (ORG)
0123   0000             
0124   0000             START:
tinybasic_2_5g_p2.ASM line 0125: Label not found: (STACK)
tinybasic_2_5g_p2.ASM line 0125: Unused data in MS byte of argument. (2)
0125   0000 31 00 00            LD SP,STACK                      ;*** COLD START ***
0126   0003 3E FF               LD A,0FFH
0127   0005 C3 C1 05            JP INIT
0128   0008             
0129   0008 E3          RST08:  EX (SP),HL                      ;*** TSTC OR RST 08H ***
0130   0009 EF                  RST 28H                         ;IGNORE BLANKS AND
0131   000A BE                  CP (HL)                         ;TEST CHARACTER
0132   000B C3 62 00            JP TC1                          ;REST OF THIS IS AT TC1
0133   000E             
0134   000E             CRLF:
tinybasic_2_5g_p2.ASM line 0135: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 0135: Unused data in MS byte of argument. (200)
0135   000E 3E 00               LD A,CR                         ;*** CRLF ***
0136   0010             
0137   0010 F5          RST10:  PUSH AF                         ;*** OUTC OR RST 10H ***
tinybasic_2_5g_p2.ASM line 0138: Label not found: (OCSW)
tinybasic_2_5g_p2.ASM line 0138: Unused data in MS byte of argument. (2)
0138   0011 3A 00 00            LD A,(OCSW)                     ;PRINT CHARACTER ONLY
0139   0014 B7                  OR A                            ;IF OCSW SWITCH IS ON
0140   0015 C3 EE 05            JP OUTC                         ;REST OF THIS AT OUTC
0141   0018             
0142   0018 CD 2F 03    RST18:  CALL EXPR2                      ;*** EXPR OR RST 18H ***
0143   001B E5                  PUSH HL                         ;EVALUATE AN EXPRESSION
0144   001C C3 EB 02            JP EXPR1                        ;REST OF IT AT EXPR1
0145   001F                     DB 'W'
tinybasic_2_5g_p2.ASM line 0145: unrecognized instruction.          (DB)
0146   001F             
0147   001F 7C          RST20:  LD A,H                          ;*** COMP OR RST 20H ***
0148   0020 BA                  CP D                            ;COMPARE HL WITH DE
0149   0021 C0                  RET NZ                          ;RETURN CORRECT C AND
0150   0022 7D                  LD A,L                          ;Z FLAGS
0151   0023 BB                  CP E                            ;BUT OLD A IS LOST
0152   0024 C9                  RET
0153   0025                     DB 'AN'
tinybasic_2_5g_p2.ASM line 0153: unrecognized instruction.          (DB)
0154   0025             
0155   0025             SS1:
0156   0025 1A          RST28:  LD A,(DE)                       ;*** IGNBLK/RST 28H ***
0157   0026 FE 20               CP 20H                          ;IGNORE BLANKS
0158   0028 C0                  RET NZ                          ;IN TEXT (WHERE DE->)
0159   0029 13                  INC DE                          ;AND RETURN THE FIRST
0160   002A C3 25 00            JP SS1                          ;NON-BLANK CHAR. IN A
0161   002D             
0162   002D F1          RST30:  POP AF                          ;*** FINISH/RST 30H ***
0163   002E CD 55 04            CALL FIN                        ;CHECK END OF COMMAND
0164   0031 C3 64 04            JP QWHAT                        ;PRINT "WHAT?" IF WRONG
0165   0034                     DB 'G'
tinybasic_2_5g_p2.ASM line 0165: unrecognized instruction.          (DB)
0166   0034             
0167   0034 EF          RST38:  RST 28H                         ;*** TSTV OR RST 38H ***
0168   0035 D6 40               SUB 40H                         ;TEST VARIABLES
0169   0037 D8                  RET C                           ;C:NOT A VARIABLE
0170   0038 20 18               JR NZ,TV1                       ;NOT "@" ARRAY
0171   003A 13                  INC DE                          ;IT IS THE "@" ARRAY
0172   003B CD C4 03            CALL PARN                       ;@ SHOULD BE FOLLOWED
0173   003E 29                  ADD HL,HL                       ;BY (EXPR) AS ITS INDEX
0174   003F 38 56               JR C,QHOW                       ;IS INDEX TOO BIG?
0175   0041 D5                  PUSH DE                         ;WILL IT OVERWRITE
0176   0042 EB                  EX DE,HL                        ;TEXT?
0177   0043 CD FE 03            CALL SIZE                       ;FIND SIZE OF FREE
0178   0046 E7                  RST 20H                         ;AND CHECK THAT
0179   0047 DA 92 04            JP C,ASORRY                     ;IF SO, SAY "SORRY"
tinybasic_2_5g_p2.ASM line 0180: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 0180: Unused data in MS byte of argument. (2)
0180   004A 21 00 00            LD HL,VARBGN                    ;IF NOT GET ADDRESS
0181   004D CD 20 04            CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0182   0050 D1                  POP DE                          ;IN HL
0183   0051 C9                  RET                             ;C FLAG IS CLEARED
0184   0052             
0185   0052             TV1:
0186   0052 FE 1B               CP 1BH                          ;NOT @, IS IT A TO Z?
0187   0054 3F                  CCF                             ;IF NOT RETURN C FLAG
0188   0055 D8                  RET C
0189   0056 13                  INC DE                          ;IF A THROUGH Z
tinybasic_2_5g_p2.ASM line 0190: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 0190: Unused data in MS byte of argument. (2)
0190   0057 21 00 00            LD HL,VARBGN                    ;COMPUTE ADDRESS OF
0191   005A 07                  RLCA                            ;THAT VARIABLE
0192   005B 85                  ADD A,L                         ;AND RETURN IT IN HL
0193   005C 6F                  LD L,A                          ;WITH C FLAG CLEARED
0194   005D 3E 00               LD A,00H
0195   005F 8C                  ADC A,H
0196   0060 67                  LD H,A
0197   0061 C9                  RET
0198   0062             
0199   0062             TC1:
0200   0062 23                  INC HL                          ;COMPARE THE BYTE THAT
0201   0063 28 07               JR Z,TC2                        ;FOLLOWS THE RST INST.
0202   0065 C5                  PUSH BC                         ;WITH THE TEXT (DE->)
0203   0066 4E                  LD C,(HL)                       ;IF NOT =, ADD THE 2ND
0204   0067 06 00               LD B,00H                        ;BYTE THAT FOLLOWS THE
0205   0069 09                  ADD HL,BC                       ;RST TO THE OLD PC
0206   006A C1                  POP BC                          ;I.E., DO A RELATIVE
0207   006B 1B                  DEC DE                          ;JUMP IF NOT =
0208   006C             
0209   006C             TC2:
0210   006C 13                  INC DE                          ;IF =, SKIP THOSE BYTES
0211   006D 23                  INC HL                          ;AND CONTINUE
0212   006E E3                  EX (SP),HL
0213   006F C9                  RET
0214   0070             
0215   0070             TSTNUM:
0216   0070 21 00 00            LD HL,0000H                     ;*** TSTNUM ***
0217   0073 44                  LD B,H                          ;TEST IF THE TEXT IS
0218   0074 EF                  RST 28H                         ;A NUMBER
0219   0075             
0220   0075             TN1:
0221   0075 FE 30               CP 30H                          ;IF NOT, RETURN 0 IN
0222   0077 D8                  RET C                           ;B AND HL
0223   0078 FE 3A               CP 3AH                          ;IF NUMBERS, CONVERT
0224   007A D0                  RET NC                          ;TO BINARY IN HL AND
0225   007B 3E F0               LD A,0F0H                       ;SET B TO # OF DIGITS
0226   007D A4                  AND H                           ;IF H>255, THERE IS NO
0227   007E 20 17               JR NZ,QHOW                      ;ROOM FOR NEXT DIGIT
0228   0080 04                  INC B                           ;B COUNTS # OF DIGITS
0229   0081 C5                  PUSH BC
0230   0082 44                  LD B,H                          ;HL=10*HL+(NEW DIGIT)
0231   0083 4D                  LD C,L
0232   0084 29                  ADD HL,HL                       ;WHERE 10* IS DONE BY
0233   0085 29                  ADD HL,HL                       ;SHIFT AND ADD
0234   0086 09                  ADD HL,BC
0235   0087 29                  ADD HL,HL
0236   0088 1A                  LD A,(DE)                       ;AND (DIGIT) IS FROM
0237   0089 13                  INC DE                          ;STRIPPING THE ASCII
0238   008A E6 0F               AND 0FH                         ;CODE
0239   008C 85                  ADD A,L
0240   008D 6F                  LD L,A
0241   008E 3E 00               LD A,00H
0242   0090 8C                  ADC A,H
0243   0091 67                  LD H,A
0244   0092 C1                  POP BC
0245   0093 1A                  LD A,(DE)                       ;DO THIS DIGIT AFTER
0246   0094 F2 75 00            JP P,TN1                        ;DIGIT. S SAYS OVERFLOW
0247   0097             
0248   0097             QHOW:
0249   0097 D5                  PUSH DE                         ;*** ERROR "HOW?" ***
0250   0098             AHOW:
tinybasic_2_5g_p2.ASM line 0251: Label not found: (HOW)
tinybasic_2_5g_p2.ASM line 0251: Unused data in MS byte of argument. (2)
0251   0098 11 00 00            LD DE,HOW
0252   009B C3 68 04            JP ERROR_ROUTINE
0253   009E             
0254   009E             
0255   009E             HOW:    DB "HOW?",CR
tinybasic_2_5g_p2.ASM line 0255: Label not found: (HOW)
tinybasic_2_5g_p2.ASM line 0255: label value misalligned.           (HOW)
tinybasic_2_5g_p2.ASM line 0255: unrecognized instruction.          (HOW)
0256   009E             OK:     DB "OK",CR
tinybasic_2_5g_p2.ASM line 0256: Label not found: (OK)
tinybasic_2_5g_p2.ASM line 0256: label value misalligned.           (OK)
tinybasic_2_5g_p2.ASM line 0256: unrecognized instruction.          (OK)
0257   009E             WHAT:   DB "WHAT?",CR
tinybasic_2_5g_p2.ASM line 0257: Label not found: (WHAT)
tinybasic_2_5g_p2.ASM line 0257: label value misalligned.           (WHAT)
tinybasic_2_5g_p2.ASM line 0257: unrecognized instruction.          (WHAT)
0258   009E             SORRY:  DB "SORRY",CR
tinybasic_2_5g_p2.ASM line 0258: Label not found: (SORRY)
tinybasic_2_5g_p2.ASM line 0258: label value misalligned.           (SORRY)
tinybasic_2_5g_p2.ASM line 0258: unrecognized instruction.          (SORRY)
0259   009E             ;*************************************************************
0260   009E             ;
0261   009E             ; *** MAIN ***
0262   009E             ;
0263   009E             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0264   009E             ; AND STORES IT IN THE MEMORY.
0265   009E             ;
0266   009E             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0267   009E             ; STACKB AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0268   009E             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0269   009E             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0270   009E             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0271   009E             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0272   009E             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0273   009E             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0274   009E             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0275   009E             ;
0276   009E             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0277   009E             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0278   009E             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0279   009E             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0280   009E             ;
0281   009E             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0282   009E             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0283   009E             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0284   009E             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0285   009E             ;
0286   009E             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0287   009E             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0288   009E             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0289   009E             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0290   009E             ;*************************************************************
0291   009E             
0292   009E             RSTART:
tinybasic_2_5g_p2.ASM line 0293: Label not found: (STACK)
tinybasic_2_5g_p2.ASM line 0293: Unused data in MS byte of argument. (2)
0293   009E 31 00 00            LD SP,STACK
0294   00A1             
0295   00A1             ST1:
0296   00A1 CD 0E 00            CALL CRLF                       ;AND JUMP TO HERE
tinybasic_2_5g_p2.ASM line 0297: Label not found: (OK)
tinybasic_2_5g_p2.ASM line 0297: Unused data in MS byte of argument. (2)
0297   00A4 11 00 00            LD DE,OK                        ;DE->STRING
0298   00A7 97                  SUB A                           ;A=0
0299   00A8 CD F1 04            CALL PRTSTG                     ;PRINT STRING UNTIL CR
0300   00AB 21 B2 00            LD HL,ST2+1                     ;LITERAL 0
tinybasic_2_5g_p2.ASM line 0301: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0301: Unused data in MS byte of argument. (2)
0301   00AE 22 00 00            LD (CURRNT),HL                  ;CURRENT->LINE # = 0
0302   00B1             
0303   00B1             ST2:
0304   00B1 21 00 00            LD HL,0000H
tinybasic_2_5g_p2.ASM line 0305: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 0305: Unused data in MS byte of argument. (2)
0305   00B4 22 00 00            LD (LOPVAR),HL
tinybasic_2_5g_p2.ASM line 0306: Label not found: (STKGOS)
tinybasic_2_5g_p2.ASM line 0306: Unused data in MS byte of argument. (2)
0306   00B7 22 00 00            LD (STKGOS),HL
0307   00BA             
0308   00BA             ST3:
0309   00BA 3E 3E               LD A,'>'                        ;PROMPT '>' AND
0310   00BC CD 97 04            CALL GETLN                      ;READ A LINE
0311   00BF D5                  PUSH DE                         ;DE->END OF LINE
tinybasic_2_5g_p2.ASM line 0312: Label not found: (BUFFER)
tinybasic_2_5g_p2.ASM line 0312: Unused data in MS byte of argument. (2)
0312   00C0 11 00 00            LD DE,BUFFER                    ;DE->BEGINNING OF LINE
0313   00C3 CD 70 00            CALL TSTNUM                     ;TEST IF IT IS A NUMBER
0314   00C6 EF                  RST 28H
0315   00C7 7C                  LD A,H                          ;HL=VALUE OF THE # OR
0316   00C8 B5                  OR L                            ;0 IF NO # WAS FOUND
0317   00C9 C1                  POP BC                          ;BC->END OF LINE
0318   00CA CA 25 06            JP Z,DIRECT
0319   00CD 1B                  DEC DE                          ;BACKUP DE AND SAVE
0320   00CE 7C                  LD A,H                          ;VALUE OF LINE # THERE
0321   00CF 12                  LD (DE),A
0322   00D0 1B                  DEC DE
0323   00D1 7D                  LD A,L
0324   00D2 12                  LD (DE),A
0325   00D3 C5                  PUSH BC                         ;BC,DE->BEGIN, END
0326   00D4 D5                  PUSH DE
0327   00D5 79                  LD A,C
0328   00D6 93                  SUB E
0329   00D7             
0330   00D7 F5                  PUSH AF                         ;A=# OF BYTES IN LINE
0331   00D8 CD CC 04            CALL FNDLN                      ;FIND THIS LINE IN SAVE
0332   00DB D5                  PUSH DE                         ;AREA, DE->SAVE AREA
0333   00DC 20 10               JR NZ,ST4                       ;NZ:NOT FOUND, INSERT
0334   00DE D5                  PUSH DE                         ;Z:FOUND, DELETE IT
0335   00DF CD E7 04            CALL FNDNXT                     ;FIND NEXT LINE
0336   00E2                                                     ;DE->NEXT LINE
0337   00E2 C1                  POP BC                          ;BC->LINE TO BE DELETED
tinybasic_2_5g_p2.ASM line 0338: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 0338: Unused data in MS byte of argument. (2)
0338   00E3 2A 00 00            LD HL,(TXTUNF)                  ;HL->UNFILLED SAVE AREA
0339   00E6 CD 68 05            CALL MVUP                       ;MOVE UP TO DELETE
0340   00E9 60                  LD H,B                          ;TXTUNF->UNFILLED ARA
0341   00EA 69                  LD L,C
tinybasic_2_5g_p2.ASM line 0342: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 0342: Unused data in MS byte of argument. (2)
0342   00EB 22 00 00            LD (TXTUNF),HL                  ;UPDATE
0343   00EE             
0344   00EE             ST4:
0345   00EE C1                  POP BC                          ;GET READY TO INSERT
tinybasic_2_5g_p2.ASM line 0346: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 0346: Unused data in MS byte of argument. (2)
0346   00EF 2A 00 00            LD HL,(TXTUNF)                  ;BUT FIRST CHECK IF
0347   00F2 F1                  POP AF                          ;THE LENGTH OF NEW LINE
0348   00F3 E5                  PUSH HL                         ;IS 3 (LINE # AND CR)
0349   00F4 FE 03               CP 03H                          ;THEN DO NOT INSERT
0350   00F6 28 A6               JR Z,RSTART                     ;MUST CLEAR THE STACKB
0351   00F8 85                  ADD A,L                         ;COMPUTE NEW TXTUNF
0352   00F9 6F                  LD L,A
0353   00FA 3E 00               LD A,00H
0354   00FC 8C                  ADC A,H
0355   00FD 67                  LD H,A                          ;HL->NEW UNFILLED AREA
tinybasic_2_5g_p2.ASM line 0356: Label not found: (TXTEND)
tinybasic_2_5g_p2.ASM line 0356: Unused data in MS byte of argument. (2)
0356   00FE 11 00 00            LD DE,TXTEND                    ;CHECK TO SEE IF THERE
0357   0101 E7                  RST 20H                         ;IS ENOUGH SPACE
0358   0102 D2 91 04            JP NC,QSORRY                    ;SORRY, NO ROOM FOR IT
tinybasic_2_5g_p2.ASM line 0359: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 0359: Unused data in MS byte of argument. (2)
0359   0105 22 00 00            LD (TXTUNF),HL                  ;OK, UPDATE TXTUNF
0360   0108 D1                  POP DE                          ;DE->OLD UNFILLED AREA
0361   0109 CD 70 05            CALL MVDOWN
0362   010C D1                  POP DE                          ;DE->BEGIN, HL->END
0363   010D E1                  POP HL
0364   010E CD 68 05            CALL MVUP                       ;MOVE NEW LINE TO SAVE
0365   0111 18 A7               JR ST3                          ;AREA
0366   0113             
0367   0113             ;*************************************************************
0368   0113             ;
0369   0113             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0370   0113             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0371   0113             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0372   0113             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0373   0113             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0374   0113             ;
0375   0113             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
0376   0113             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0377   0113             ; GO BACK TO 'RSTART'.
0378   0113             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0379   0113             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0380   0113             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
0381   0113             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0382   0113             ;*************************************************************
0383   0113             ;
0384   0113             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0385   0113             ;
0386   0113             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0387   0113             ;
0388   0113             ; 'STOP(CR)' GOES BACK TO 'RSTART'
0389   0113             ;
0390   0113             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0391   0113             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0392   0113             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0393   0113             ;
0394   0113             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0395   0113             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0396   0113             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0397   0113             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0398   0113             ;
0399   0113             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0400   0113             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0401   0113             ;*************************************************************
0402   0113             
0403   0113             NEW:
0404   0113 CD 60 04            CALL ENDCHK                     ;*** NEW(CR) ***
tinybasic_2_5g_p2.ASM line 0405: Label not found: (TXTBGN)
tinybasic_2_5g_p2.ASM line 0405: Unused data in MS byte of argument. (2)
0405   0116 21 00 00            LD HL,TXTBGN
tinybasic_2_5g_p2.ASM line 0406: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 0406: Unused data in MS byte of argument. (2)
0406   0119 22 00 00            LD (TXTUNF),HL
0407   011C             STOP:
0408   011C CD 60 04            CALL ENDCHK                     ;*** STOP(CR) ***
0409   011F C3 9E 00            JP RSTART
0410   0122             RUN:
0411   0122 CD 60 04            CALL ENDCHK                     ;*** RUN(CR) ***
tinybasic_2_5g_p2.ASM line 0412: Label not found: (TXTBGN)
tinybasic_2_5g_p2.ASM line 0412: Unused data in MS byte of argument. (2)
0412   0125 11 00 00            LD DE,TXTBGN                    ;FIRST SAVED LINE
0413   0128             RUNNXL:
0414   0128 21 00 00            LD HL,00H                       ;*** RUNNXL ***
0415   012B CD D4 04            CALL FNDLP                      ;FIND WHATEVER LINE #
0416   012E DA 9E 00            JP C,RSTART                     ;C:PASSED TXTUNF, QUIT
0417   0131             RUNTSL:
0418   0131 EB                  EX DE,HL                        ;*** RUNTSL ***
tinybasic_2_5g_p2.ASM line 0419: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0419: Unused data in MS byte of argument. (2)
0419   0132 22 00 00            LD (CURRNT),HL                  ;SET 'CURRENT'->LINE #
0420   0135 EB                  EX DE,HL
0421   0136 13                  INC DE                          ;BUMP PASS LINE #
0422   0137 13                  INC DE
0423   0138             RUNSML:
0424   0138 CD 01 06            CALL CHKIO                      ;*** RUNSML ***
0425   013B 21 24 06            LD HL,TAB2-1                    ;FIND COMMAND IN TAB2
0426   013E C3 28 06            JP EXEC                         ;AND EXECUTE IT
0427   0141             GOTO:
0428   0141 DF                  RST 18H                         ;*** GOTO EXPR ***
0429   0142 D5                  PUSH DE                         ;SAVE FOR ERROR ROUTINE
0430   0143 CD 60 04            CALL ENDCHK                     ;MUST FIND A CR
0431   0146 CD CC 04            CALL FNDLN                      ;FIND THE TARGET LINE
0432   0149 C2 98 00            JP NZ,AHOW                      ;NO SUCH LINE #
0433   014C F1                  POP AF                          ;CLEAR THE PUSH DE
0434   014D 18 E2               JR RUNTSL                       ;GO DO IT
0435   014F             
0436   014F             ;*************************************************************
0437   014F             ;
0438   014F             ; *** LIST *** & PRINT ***
0439   014F             ;
0440   014F             ; LIST HAS TWO FORMS:
0441   014F             ; 'LIST(CR)' LISTS ALL SAVED LINES
0442   014F             ; 'LIST #(CR)' START LIST AT THIS LINE #
0443   014F             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0444   014F             ;
0445   014F             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0446   014F             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0447   014F             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0448   014F             ;
0449   014F             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0450   014F             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0451   014F             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0452   014F             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0453   014F             ; SPECIFIED, 6 POSITIONS WILL BE USED.
0454   014F             ;
0455   014F             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0456   014F             ; DOUBLE QUOTES.
0457   014F             ;
0458   014F             ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
0459   014F             ;
0460   014F             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0461   014F             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0462   014F             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0463   014F             ;*************************************************************
0464   014F             
0465   014F             LIST:
0466   014F CD 70 00            CALL TSTNUM                     ;TEST IF THERE IS A #
0467   0152 CD 60 04            CALL ENDCHK                     ;IF NO # WE GET A 0
0468   0155 CD CC 04            CALL FNDLN                      ;FIND THIS OR NEXT LINE
0469   0158             LS1:
0470   0158 DA 9E 00            JP C,RSTART                     ;C:PASSED TXTUNF
0471   015B CD 55 05            CALL PRTLN                      ;PRINT THE LINE
0472   015E CD 01 06            CALL CHKIO                      ;STOP IF HIT CONTROL-C
0473   0161 CD D4 04            CALL FNDLP                      ;FIND NEXT LINE
0474   0164 18 F2               JR LS1                          ;AND LOOP BACK
0475   0166             PRINT:
0476   0166 0E 06               LD C,06H                        ;C = # OF SPACES
0477   0168 CF                  RST 08H                         ;F NULL LIST & ";"
0478   0169                     DB 3BH
tinybasic_2_5g_p2.ASM line 0478: unrecognized instruction.          (DB)
0479   0169                     DB PR2-$-1
tinybasic_2_5g_p2.ASM line 0479: unrecognized instruction.          (DB)
0480   0169 CD 0E 00            CALL CRLF                       ;GIVE CR-LF AND
0481   016C 18 CA               JR RUNSML                       ;CONTINUE SAME LINE
0482   016E             PR2:
0483   016E CF                  RST 08H                         ;IF NULL LIST (CR)
0484   016F                     DB CR
tinybasic_2_5g_p2.ASM line 0484: unrecognized instruction.          (DB)
0485   016F                     DB PR0-$-1
tinybasic_2_5g_p2.ASM line 0485: unrecognized instruction.          (DB)
0486   016F CD 0E 00            CALL CRLF                       ;ALSO GIVE CR-LF AND
0487   0172 18 B4               JR RUNNXL                       ;GO TO NEXT LINE
0488   0174             PR0:
0489   0174 CF                  RST 08H                         ;ELSE IS IT FORMAT?
0490   0175                     DB '#'
tinybasic_2_5g_p2.ASM line 0490: unrecognized instruction.          (DB)
0491   0175                     DB PR1-$-1
tinybasic_2_5g_p2.ASM line 0491: unrecognized instruction.          (DB)
0492   0175 DF                  RST 18H                         ;YES, EVALUATE EXPR.
0493   0176 4D                  LD C,L                          ;AND SAVE IT IN C
0494   0177 18 05               JR PR3                          ;LOOK FOR MORE TO PRINT
0495   0179             PR1:
0496   0179 CD FC 04            CALL QTSTG                      ;OR IS IT A STRING?
0497   017C 18 0A               JR PR8                          ;IF NOT, MUST BE EXPR.
0498   017E             PR3:
0499   017E CF                  RST 08H                         ;IF ",", GO FIND NEXT
0500   017F                     DB ','
tinybasic_2_5g_p2.ASM line 0500: unrecognized instruction.          (DB)
0501   017F                     DB PR6-$-1
tinybasic_2_5g_p2.ASM line 0501: unrecognized instruction.          (DB)
0502   017F CD 55 04            CALL FIN                        ;IN THE LIST.
0503   0182 18 F0               JR PR0                          ;LIST CONTINUES
0504   0184             PR6:
0505   0184 CD 0E 00            CALL CRLF                       ;LIST ENDS
0506   0187 F7                  RST 30H
0507   0188             PR8:
0508   0188 DF                  RST 18H                         ;EVALUATE THE EXPR
0509   0189 C5                  PUSH BC
0510   018A CD 19 05            CALL PRTNUM                     ;PRINT THE VALUE
0511   018D C1                  POP BC
0512   018E 18 EE               JR PR3                          ;MORE TO PRINT?
0513   0190             ;
0514   0190             ;*************************************************************
0515   0190             ;
0516   0190             ; *** GOSUB *** & RETURN ***
0517   0190             ;
0518   0190             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0519   0190             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACKB POINTER
0520   0190             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0521   0190             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0522   0190             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKBED.
0523   0190             ; THE STACKB POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0524   0190             ; SAVED IN THE STACKB.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0525   0190             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0526   0190             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0527   0190             ;
0528   0190             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0529   0190             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0530   0190             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0531   0190             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0532   0190             ;*************************************************************
0533   0190             
0534   0190             GOSUB:
0535   0190 CD 99 05            CALL PUSHA                      ;SAVE THE CURRENT "FOR"
0536   0193 DF                  RST 18H                         ;PARAMETERS
0537   0194 D5                  PUSH DE                         ;AND TEXT POINTER
0538   0195 CD CC 04            CALL FNDLN                      ;FIND THE TARGET LINE
0539   0198 C2 98 00            JP NZ,AHOW                      ;NOT THERE. SAY "HOW?"
tinybasic_2_5g_p2.ASM line 0540: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0540: Unused data in MS byte of argument. (2)
0540   019B 2A 00 00            LD HL,(CURRNT)                  ;FOUND IT, SAVE OLD.
0541   019E E5                  PUSH HL                         ;'CURRNT' OLD 'STKGOS'
tinybasic_2_5g_p2.ASM line 0542: Label not found: (STKGOS)
tinybasic_2_5g_p2.ASM line 0542: Unused data in MS byte of argument. (2)
0542   019F 2A 00 00            LD HL,(STKGOS)
0543   01A2 E5                  PUSH HL
0544   01A3 21 00 00            LD HL,0000H                     ;AND LOAD NEW ONES
tinybasic_2_5g_p2.ASM line 0545: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 0545: Unused data in MS byte of argument. (2)
0545   01A6 22 00 00            LD (LOPVAR),HL
0546   01A9 39                  ADD HL,SP
tinybasic_2_5g_p2.ASM line 0547: Label not found: (STKGOS)
tinybasic_2_5g_p2.ASM line 0547: Unused data in MS byte of argument. (2)
0547   01AA 22 00 00            LD (STKGOS),HL
0548   01AD C3 31 01            JP RUNTSL                       ;THEN RUN THAT LINE
0549   01B0             RETURN:
0550   01B0 CD 60 04            CALL ENDCHK                     ;THERE MUST BE A CR
tinybasic_2_5g_p2.ASM line 0551: Label not found: (STKGOS)
tinybasic_2_5g_p2.ASM line 0551: Unused data in MS byte of argument. (2)
0551   01B3 2A 00 00            LD HL,(STKGOS)                  ;OLD STACKB POINTER
0552   01B6 7C                  LD A,H                          ;0 MEANS NOT EXIST
0553   01B7 B5                  OR L
0554   01B8 CA 64 04            JP Z,QWHAT                      ;SO, WE SAY: "WHAT?"
0555   01BB F9                  LD SP,HL                        ;ELSE, RESTORE IT
0556   01BC E1                  POP HL
tinybasic_2_5g_p2.ASM line 0557: Label not found: (STKGOS)
tinybasic_2_5g_p2.ASM line 0557: Unused data in MS byte of argument. (2)
0557   01BD 22 00 00            LD (STKGOS),HL                  ;AND THE OLD "STKGOS"
0558   01C0 E1                  POP HL
tinybasic_2_5g_p2.ASM line 0559: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0559: Unused data in MS byte of argument. (2)
0559   01C1 22 00 00            LD (CURRNT),HL                  ;AND THE OLD 'CURRNT'
0560   01C4 D1                  POP DE                          ;OLD TEXT POINTER
0561   01C5 CD 7E 05            CALL POPA                       ;OLD "FOR" PARAMETERS
0562   01C8 F7                  RST 30H                         ;AND WE ARE BACK HOME
0563   01C9             
0564   01C9             ;*************************************************************
0565   01C9             ;
0566   01C9             ; *** FOR *** & NEXT ***
0567   01C9             ;
0568   01C9             ; 'FOR' HAS TWO FORMS:
0569   01C9             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0570   01C9             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0571   01C9             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0572   01C9             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0573   01C9             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0574   01C9             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0575   01C9             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0576   01C9             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0577   01C9             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0578   01C9             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACKB
0579   01C9             ; BEFORE THE NEW ONE OVERWRITES IT.
0580   01C9             ; TBI WILL THEN DIG IN THE STACKB AND FIND OUT IF THIS SAME
0581   01C9             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0582   01C9             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0583   01C9             ; (PURGED FROM THE STACKB..)
0584   01C9             ;
0585   01C9             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0586   01C9             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0587   01C9             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0588   01C9             ; THE STACKB TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0589   01C9             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0590   01C9             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0591   01C9             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0592   01C9             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0593   01C9             ; IS PURGED AND EXECUTION CONTINUES.
0594   01C9             ;*************************************************************
0595   01C9             
0596   01C9             FOR:
0597   01C9 CD 99 05            CALL PUSHA                      ;SAVE THE OLD SAVE AREA
0598   01CC CD 44 04            CALL SETVAL                     ;SET THE CONTROL VAR.
0599   01CF 2B                  DEC HL                          ;HL IS ITS ADDRESS
tinybasic_2_5g_p2.ASM line 0600: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 0600: Unused data in MS byte of argument. (2)
0600   01D0 22 00 00            LD (LOPVAR),HL                  ;SAVE THAT
0601   01D3 21 24 06            LD HL,TAB5-1                    ;USE 'EXEC' TO LOOK
0602   01D6 C3 28 06            JP EXEC                         ;FOR THE WORK 'TO'
0603   01D9             FR1:
0604   01D9 DF                  RST 18H                         ;EVALUATE THE LIMITE
tinybasic_2_5g_p2.ASM line 0605: Label not found: (LOPLMT)
tinybasic_2_5g_p2.ASM line 0605: Unused data in MS byte of argument. (2)
0605   01DA 22 00 00            LD (LOPLMT),HL                  ;SAVE THAT
0606   01DD 21 24 06            LD HL,TAB6-1                    ;USE 'EXEC' TO LOOK
0607   01E0 C3 28 06            JP EXEC                         ;FOR THE WORD 'STEP'
0608   01E3             FR2:
0609   01E3 DF                  RST 18H                         ;FOUND IT, GET STEP
0610   01E4 18 03               JR FR4
0611   01E6             FR3:
0612   01E6 21 01 00            LD HL,0001H                     ;NOT FOUND, SET TO 1
0613   01E9             FR4:
tinybasic_2_5g_p2.ASM line 0614: Label not found: (LOPINC)
tinybasic_2_5g_p2.ASM line 0614: Unused data in MS byte of argument. (2)
0614   01E9 22 00 00            LD (LOPINC),HL                  ;SAVE THAT TOO
0615   01EC             FR5:
tinybasic_2_5g_p2.ASM line 0616: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0616: Unused data in MS byte of argument. (2)
0616   01EC 2A 00 00            LD HL,(CURRNT)                  ;SAVE CURRENT LINE #
tinybasic_2_5g_p2.ASM line 0617: Label not found: (LOPLN)
tinybasic_2_5g_p2.ASM line 0617: Unused data in MS byte of argument. (2)
0617   01EF 22 00 00            LD (LOPLN),HL
0618   01F2 EB                  EX DE,HL                        ;AND TEXT POINTER
tinybasic_2_5g_p2.ASM line 0619: Label not found: (LOPPT)
tinybasic_2_5g_p2.ASM line 0619: Unused data in MS byte of argument. (2)
0619   01F3 22 00 00            LD (LOPPT),HL
0620   01F6 01 0A 00            LD BC,0AH                       ;DIG INTO STACKB TO
tinybasic_2_5g_p2.ASM line 0621: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 0621: Unused data in MS byte of argument. (2)
0621   01F9 2A 00 00            LD HL,(LOPVAR)                  ;FIND 'LOPVAR'
0622   01FC EB                  EX DE,HL
0623   01FD 60                  LD H,B
0624   01FE 68                  LD L,B                          ;HL=0 NOW
0625   01FF 39                  ADD HL,SP                       ;HERE IS THE STACKB
0626   0200                     DB 3EH                          ;DISASSEMBLY SAID "ld a,09h"
tinybasic_2_5g_p2.ASM line 0626: unrecognized instruction.          (DB)
0627   0200             FR7:
0628   0200 09                  ADD HL,BC                       ;EACH LEVEL IS 10 DEEP - DIS = 09
0629   0201 7E                  LD A,(HL)                       ;GET THAT OLD 'LOPVAR'
0630   0202 23                  INC HL
0631   0203 B6                  OR (HL)
0632   0204 28 18               JR Z,FR8                        ;0 SAYS NO MORE IN IT
0633   0206 7E                  LD A,(HL)
0634   0207 2B                  DEC HL
0635   0208 BA                  CP D                            ;SAME AS THIS ONE?
0636   0209 20 F5               JR NZ,FR7
0637   020B 7E                  LD A,(HL)                       ;THE OTHER HALF?
0638   020C BB                  CP E
0639   020D 20 F1               JR NZ,FR7
0640   020F EB                  EX DE,HL                        ;YES, FOUND ONE
0641   0210 21 00 00            LD HL,0000H
0642   0213 39                  ADD HL,SP                       ;TRY TO MOVE SP
0643   0214 44                  LD B,H
0644   0215 4D                  LD C,L
0645   0216 21 0A 00            LD HL,000AH
0646   0219 19                  ADD HL,DE
0647   021A CD 70 05            CALL MVDOWN                     ;AND PURGE 10 WORDS
0648   021D F9                  LD SP,HL                        ;IN THE STACKB
0649   021E             FR8:
tinybasic_2_5g_p2.ASM line 0650: Label not found: (LOPPT)
tinybasic_2_5g_p2.ASM line 0650: Unused data in MS byte of argument. (2)
0650   021E 2A 00 00            LD HL,(LOPPT)                   ;JOB DONE, RESTORE DE
0651   0221 EB                  EX DE,HL
0652   0222 F7                  RST 30H                         ;AND CONTINUE
0653   0223             ;
0654   0223             NEXT:
0655   0223 FF                  RST 38H                         ;GET ADDRESS OF VAR.
0656   0224 DA 64 04            JP C,QWHAT                      ;NO VARIABLE, "WHAT?"
tinybasic_2_5g_p2.ASM line 0657: Label not found: (VARNXT)
tinybasic_2_5g_p2.ASM line 0657: Unused data in MS byte of argument. (2)
0657   0227 22 00 00            LD (VARNXT),HL                  ;YES, SAVE IT
0658   022A             NX0:
0659   022A D5                  PUSH DE                         ;SAVE TEXT POINTER
0660   022B EB                  EX DE,HL
tinybasic_2_5g_p2.ASM line 0661: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 0661: Unused data in MS byte of argument. (2)
0661   022C 2A 00 00            LD HL,(LOPVAR)                  ;GET VAR. IN 'FOR'
0662   022F 7C                  LD A,H
0663   0230 B5                  OR L                            ;0 SAYS NEVER HAD ONE
0664   0231 CA 65 04            JP Z,AWHAT                      ;SO WE ASK: "WHAT?"
0665   0234 E7                  RST 20H                         ;ELSE WE CHECK THEM
0666   0235 28 09               JR Z,NX3                        ;OK, THEY AGREE
0667   0237 D1                  POP DE                          ;NO, LET'S SEE
0668   0238 CD 7E 05            CALL POPA                       ;PURGE CURRENT LOOP
tinybasic_2_5g_p2.ASM line 0669: Label not found: (VARNXT)
tinybasic_2_5g_p2.ASM line 0669: Unused data in MS byte of argument. (2)
0669   023B 2A 00 00            LD HL,(VARNXT)                  ;AND POP ONE LEVEL
0670   023E 18 EA               JR NX0                          ;GO CHECK AGAIN
0671   0240             NX3:
0672   0240 5E                  LD E,(HL)                       ;COME HERE WHEN AGREED
0673   0241 23                  INC HL
0674   0242 56                  LD D,(HL)                       ;DE=VALUE OF VAR.
tinybasic_2_5g_p2.ASM line 0675: Label not found: (LOPINC)
tinybasic_2_5g_p2.ASM line 0675: Unused data in MS byte of argument. (2)
0675   0243 2A 00 00            LD HL,(LOPINC)
0676   0246 E5                  PUSH HL
0677   0247 7C                  LD A,H
0678   0248 AA                  XOR D
0679   0249 7A                  LD A,D
0680   024A 19                  ADD HL,DE                       ;ADD ONE STEP
0681   024B FA 52 02            JP M,NX4
0682   024E AC                  XOR H
0683   024F FA 73 02            JP M,NX5
0684   0252             NX4:
0685   0252 EB                  EX DE,HL
tinybasic_2_5g_p2.ASM line 0686: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 0686: Unused data in MS byte of argument. (2)
0686   0253 2A 00 00            LD HL,(LOPVAR)                  ;PUT IT BACK
0687   0256 73                  LD (HL),E
0688   0257 23                  INC HL
0689   0258 72                  LD (HL),D
tinybasic_2_5g_p2.ASM line 0690: Label not found: (LOPLMT)
tinybasic_2_5g_p2.ASM line 0690: Unused data in MS byte of argument. (2)
0690   0259 2A 00 00            LD HL,(LOPLMT)                  ;HL->LIMIT
0691   025C F1                  POP AF                          ;OLD HL
0692   025D B7                  OR A
0693   025E F2 62 02            JP P,NX1                        ;STEP > 0
0694   0261 EB                  EX DE,HL                        ;STEP < 0
0695   0262             NX1:
0696   0262 CD 3C 04            CALL CKHLDE                     ;COMPARE WITH LIMIT
0697   0265 D1                  POP DE                          ;RESTORE TEXT POINTER
0698   0266 38 0D               JR C,NX2                        ;OUTSIDE LIMIT
tinybasic_2_5g_p2.ASM line 0699: Label not found: (LOPLN)
tinybasic_2_5g_p2.ASM line 0699: Unused data in MS byte of argument. (2)
0699   0268 2A 00 00            LD HL,(LOPLN)                   ;WITHIN LIMIT, GO
tinybasic_2_5g_p2.ASM line 0700: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0700: Unused data in MS byte of argument. (2)
0700   026B 22 00 00            LD (CURRNT),HL                  ;BACK TO THE SAVED
tinybasic_2_5g_p2.ASM line 0701: Label not found: (LOPPT)
tinybasic_2_5g_p2.ASM line 0701: Unused data in MS byte of argument. (2)
0701   026E 2A 00 00            LD HL,(LOPPT)                   ;'CURRNT' AND TEXT
0702   0271 EB                  EX DE,HL                        ;POINTER
0703   0272 F7                  RST 30H
0704   0273             NX5:
0705   0273 E1                  POP HL
0706   0274 D1                  POP DE
0707   0275             NX2:
0708   0275 CD 7E 05            CALL POPA                       ;PURGE THIS LOOP
0709   0278 F7                  RST 30H
0710   0279             ;
0711   0279             ;*************************************************************
0712   0279             ;
0713   0279             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0714   0279             ;
0715   0279             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0716   0279             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0717   0279             ;
0718   0279             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0719   0279             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0720   0279             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0721   0279             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0722   0279             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0723   0279             ; EXECUTION CONTINUES AT THE NEXT LINE.
0724   0279             ;
0725   0279             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0726   0279             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0727   0279             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0728   0279             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0729   0279             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0730   0279             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0731   0279             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0732   0279             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0733   0279             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0734   0279             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0735   0279             ;
0736   0279             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0737   0279             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0738   0279             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0739   0279             ; THIS IS HANDLED IN 'INPERR'.
0740   0279             ;
0741   0279             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0742   0279             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0743   0279             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0744   0279             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0745   0279             ; THIS IS DONE BY 'DEFLT'.
0746   0279             ;*************************************************************
0747   0279             
0748   0279             REM:
0749   0279 21 00 00            LD HL,0000H                     ;*** REM ***
0750   027C                     DB 3EH                          ;THIS IS LIKE 'IF 0'
tinybasic_2_5g_p2.ASM line 0750: unrecognized instruction.          (DB)
0751   027C             IFF:
0752   027C DF                  RST 18H                         ;*** IF ***
0753   027D 7C                  LD A,H                          ;IS THE EXPR.=0?
0754   027E B5                  OR L
0755   027F C2 38 01            JP NZ,RUNSML                    ;NO, CONTINUE
0756   0282 CD E9 04            CALL FNDSKP                     ;YES, SKIP REST OF LINE
0757   0285 D2 31 01            JP NC,RUNTSL                    ;AND RUN THE NEXT LINE
0758   0288 C3 9E 00            JP RSTART                       ;IF NO NEXT, RE-START
0759   028B             INPERR:
tinybasic_2_5g_p2.ASM line 0760: Label not found: (STKINP)
tinybasic_2_5g_p2.ASM line 0760: Unused data in MS byte of argument. (2)
0760   028B 2A 00 00            LD HL,(STKINP)                  ;*** INPERR ***
0761   028E F9                  LD SP,HL                        ;RESTORE OLD SP
0762   028F E1                  POP HL                          ;AND OLD 'CURRNT'
tinybasic_2_5g_p2.ASM line 0763: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0763: Unused data in MS byte of argument. (2)
0763   0290 22 00 00            LD (CURRNT),HL
0764   0293 D1                  POP DE                          ;AND OLD TEXT POINTER
0765   0294 D1                  POP DE                          ;REDO INPUT
0766   0295             INPUT:                                  ;*** INPUT ***
0767   0295             IP1:
0768   0295 D5                  PUSH DE                         ;SAVE IN CASE OF ERROR
0769   0296 CD FC 04            CALL QTSTG                      ;IS NEXT ITEM A STRING?
0770   0299 18 05               JR IP2                          ;NO
0771   029B FF                  RST 38H                         ;YES, BUT FOLLOWED BY A
0772   029C 38 3C               JR C,IP4                        ;VARIABLE? NO.
0773   029E 18 10               JR IP3                          ;YES. INPUT VARIABLE
0774   02A0             IP2:
0775   02A0 D5                  PUSH DE                         ;SAVE FOR 'PRTSTG'
0776   02A1 FF                  RST 38H                         ;MUST BE VARIABLE NOW
0777   02A2 DA 64 04            JP C,QWHAT                      ;"WHAT?" IT IS NOT?
0778   02A5 1A                  LD A,(DE)                       ;GET READY FOR 'PRTSTR'
0779   02A6 4F                  LD C,A
0780   02A7 97                  SUB A
0781   02A8 12                  LD (DE),A
0782   02A9 D1                  POP DE
0783   02AA CD F1 04            CALL PRTSTG                     ;PRINT STRING AS PROMPT
0784   02AD 79                  LD A,C                          ;RESTORE TEXT
0785   02AE 1B                  DEC DE
0786   02AF 12                  LD (DE),A
0787   02B0             IP3:
0788   02B0 D5                  PUSH DE                         ;SAVE TEXT POINTER
0789   02B1 EB                  EX DE,HL
tinybasic_2_5g_p2.ASM line 0790: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0790: Unused data in MS byte of argument. (2)
0790   02B2 2A 00 00            LD HL,(CURRNT)                  ;ALSO SAVE 'CURRNT'
0791   02B5 E5                  PUSH HL
0792   02B6 21 95 02            LD HL,IP1                       ;A NEGATIVE NUMBER
tinybasic_2_5g_p2.ASM line 0793: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0793: Unused data in MS byte of argument. (2)
0793   02B9 22 00 00            LD (CURRNT),HL                  ;AS A FLAG
0794   02BC 21 00 00            LD HL,0000H                     ;SAVE SP TOO
0795   02BF 39                  ADD HL,SP
tinybasic_2_5g_p2.ASM line 0796: Label not found: (STKINP)
tinybasic_2_5g_p2.ASM line 0796: Unused data in MS byte of argument. (2)
0796   02C0 22 00 00            LD (STKINP),HL
0797   02C3 D5                  PUSH DE                         ;OLD HL
0798   02C4 3E 3A               LD A,3AH                        ;PRINT THIS TOO
0799   02C6 CD 97 04            CALL GETLN                      ;AND GET A LINE
tinybasic_2_5g_p2.ASM line 0800: Label not found: (BUFFER)
tinybasic_2_5g_p2.ASM line 0800: Unused data in MS byte of argument. (2)
0800   02C9 11 00 00            LD DE,BUFFER                    ;POINTS TO BUFFER
0801   02CC DF                  RST 18H                         ;EVALUATE INPUT
0802   02CD 00                  NOP                             ;CAN BE 'CALL ENDCHK'
0803   02CE 00                  NOP
0804   02CF 00                  NOP
0805   02D0 D1                  POP DE                          ;OK,GET OLD HL
0806   02D1 EB                  EX DE,HL
0807   02D2 73                  LD (HL),E                       ;SAVE VALUE IN VAR.
0808   02D3 23                  INC HL
0809   02D4 72                  LD (HL),D
0810   02D5 E1                  POP HL                          ;GET OLD 'CURRNT'
tinybasic_2_5g_p2.ASM line 0811: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 0811: Unused data in MS byte of argument. (2)
0811   02D6 22 00 00            LD (CURRNT),HL
0812   02D9 D1                  POP DE                          ;AND OLD TEXT POINTER
0813   02DA             IP4:
0814   02DA F1                  POP AF                          ;PURGE JUNK IN STACKB
0815   02DB CF                  RST 08H                         ;IS NEXT CH. ','?
0816   02DC                     DB ','
tinybasic_2_5g_p2.ASM line 0816: unrecognized instruction.          (DB)
0817   02DC                     DB IP5-$-1
tinybasic_2_5g_p2.ASM line 0817: unrecognized instruction.          (DB)
0818   02DC 18 B7               JR IP1                          ;YES, MORE ITEMS.
0819   02DE             IP5:
0820   02DE F7                  RST 30H
0821   02DF             DEFLT:
0822   02DF 1A                  LD A,(DE)                       ;***  DEFLT ***
tinybasic_2_5g_p2.ASM line 0823: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 0823: Unused data in MS byte of argument. (200)
0823   02E0 FE 00               CP CR                           ;EMPTY LINE IS OK
0824   02E2 28 06               JR Z,LT1                        ;ELSE IT IS 'LET'
0825   02E4             LET:
0826   02E4 CD 44 04            CALL SETVAL                     ;*** LET ***
0827   02E7 CF                  RST 08H                         ;SET VALUE TO VAR
0828   02E8                     DB ','                          ;---DISASSEMBLE = INC L
tinybasic_2_5g_p2.ASM line 0828: unrecognized instruction.          (DB)
0829   02E8                     DB LT1-$-1                      ;---DISASSEMBLE = INC BC
tinybasic_2_5g_p2.ASM line 0829: unrecognized instruction.          (DB)
0830   02E8 18 FA               JR LET                          ;ITEM BY ITEM
0831   02EA             LT1:
0832   02EA F7                  RST 30H                         ;UNTIL FINISH
0833   02EB             ;*************************************************************
0834   02EB             ;
0835   02EB             ; *** EXPR ***
0836   02EB             ;
0837   02EB             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0838   02EB             ; <EXPR>::<EXPR2>
0839   02EB             ;         <EXPR2><REL.OP.><EXPR2>
0840   02EB             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0841   02EB             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0842   02EB             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0843   02EB             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0844   02EB             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0845   02EB             ; <EXPR4>::=<VARIABLE>
0846   02EB             ;           <FUNCTION>
0847   02EB             ;           (<EXPR>)
0848   02EB             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0849   02EB             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0850   02EB             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0851   02EB             ;*************************************************************
0852   02EB             
0853   02EB             EXPR1:
0854   02EB 21 24 06            LD HL,TAB8-1                    ;LOOKUP REL.OP.
0855   02EE C3 28 06            JP EXEC                         ;GO DO IT
0856   02F1             XP11:
0857   02F1 CD 1A 03            CALL XP18                       ;REL.OP.">="
0858   02F4 D8                  RET C                           ;NO, RETURN HL=0
0859   02F5 6F                  LD L,A                          ;YES, RETURN HL=1
0860   02F6 C9                  RET
0861   02F7             XP12:
0862   02F7 CD 1A 03            CALL XP18                       ;REL.OP."#"
0863   02FA C8                  RET Z                           ;FALSE, RETURN HL=0
0864   02FB 6F                  LD L,A                          ;TRUE, RETURN HL=1
0865   02FC C9                  RET
0866   02FD             XP13:
0867   02FD CD 1A 03            CALL XP18                       ;REL.OP.">"
0868   0300 C8                  RET Z                           ;FALSE
0869   0301 D8                  RET C                           ;ALSO FALSE, HL=0
0870   0302 6F                  LD L,A                          ;TRUE, HL=1
0871   0303 C9                  RET
0872   0304             XP14:
0873   0304 CD 1A 03            CALL XP18                       ;REL.OP."<="
0874   0307 6F                  LD L,A                          ;SET HL=1
0875   0308 C8                  RET Z                           ;REL. TRUE, RETURN
0876   0309 D8                  RET C
0877   030A 6C                  LD L,H                          ;ELSE SET HL=0
0878   030B C9                  RET
0879   030C             XP15:
0880   030C CD 1A 03            CALL XP18                       ;REL.OP."="
0881   030F C0                  RET NZ                          ;FALSE, RETURN HL=0
0882   0310 6F                  LD L,A                          ;ELSE SET HL=1
0883   0311 C9                  RET
0884   0312             XP16:
0885   0312 CD 1A 03            CALL XP18                       ;REL.OP."<"
0886   0315 D0                  RET NC                          ;FALSE, RETURN HL=0
0887   0316 6F                  LD L,A                          ;ELSE SET HL=1
0888   0317 C9                  RET
0889   0318             XP17:
0890   0318 E1                  POP HL                          ;NOT .REL.OP
0891   0319 C9                  RET                             ;RETURN HL=<EXPR2>
0892   031A             XP18:
0893   031A 79                  LD A,C                          ;SUBROUTINE FOR ALL
0894   031B E1                  POP HL                          ;REL.OP.'S
0895   031C C1                  POP BC
0896   031D E5                  PUSH HL                         ;REVERSE TOP OF STACKB
0897   031E C5                  PUSH BC
0898   031F 4F                  LD C,A
0899   0320 CD 2F 03            CALL EXPR2                      ;GET 2ND <EXPR2>
0900   0323 EB                  EX DE,HL                        ;VALUE IN DE NOW
0901   0324 E3                  EX (SP),HL                      ;1ST <EXPR2> IN HL
0902   0325 CD 3C 04            CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
0903   0328 D1                  POP DE                          ;RESTORE TEXT POINTER
0904   0329 21 00 00            LD HL,0000H                     ;SET HL=0, A=1
0905   032C 3E 01               LD A,01H
0906   032E C9                  RET
0907   032F             EXPR2:
0908   032F CF                  RST 08H                         ;NEGATIVE SIGN?
0909   0330                     DB '-'
tinybasic_2_5g_p2.ASM line 0909: unrecognized instruction.          (DB)
0910   0330                     DB XP21-$-1
tinybasic_2_5g_p2.ASM line 0910: unrecognized instruction.          (DB)
0911   0330 21 00 00            LD HL,0000H                     ;YES, FAKE '0-'
0912   0333 18 1B               JR XP26                         ;TREAT LIKE SUBTRACT
0913   0335             XP21:
0914   0335 CF                  RST 08H                         ;POSITIVE SIGN? IGNORE
0915   0336                     DB '+'
tinybasic_2_5g_p2.ASM line 0915: unrecognized instruction.          (DB)
0916   0336                     DB XP22-$-1
tinybasic_2_5g_p2.ASM line 0916: unrecognized instruction.          (DB)
0917   0336             XP22:
0918   0336 CD 59 03            CALL EXPR3                      ;1ST <EXPR3>
0919   0339             XP23:
0920   0339 CF                  RST 08H                         ;ADD?
0921   033A                     DB  '+'
tinybasic_2_5g_p2.ASM line 0921: unrecognized instruction.          (DB)
0922   033A                     DB XP25-$-1
tinybasic_2_5g_p2.ASM line 0922: unrecognized instruction.          (DB)
0923   033A E5                  PUSH HL                         ;YES, SAVE VALUE
0924   033B CD 59 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0925   033E             XP24:
0926   033E EB                  EX DE,HL                        ;2ND IN DE
0927   033F E3                  EX (SP),HL                      ;1ST IN HL
0928   0340 7C                  LD A,H                          ;COMPARE SIGN
0929   0341 AA                  XOR D
0930   0342 7A                  LD A,D
0931   0343 19                  ADD HL,DE
0932   0344 D1                  POP DE                          ;RESTORE TEXT POINTER
0933   0345 FA 39 03            JP M,XP23                       ;1ST AND 2ND SIGN DIFFER
0934   0348 AC                  XOR H                           ;1ST AND 2ND SIGN EQUAL
0935   0349 F2 39 03            JP P,XP23                       ;SO IS RESULT
0936   034C C3 97 00            JP QHOW                         ;ELSE WE HAVE OVERFLOW
0937   034F             XP25:
0938   034F CF                  RST 08H                         ;SUBTRACT?
0939   0350                     DB '-'
tinybasic_2_5g_p2.ASM line 0939: unrecognized instruction.          (DB)
0940   0350                     DB XP42-$-1
tinybasic_2_5g_p2.ASM line 0940: unrecognized instruction.          (DB)
0941   0350             XP26:
0942   0350 E5                  PUSH HL                         ;YES, SAVE 1ST <EXPR3>
0943   0351 CD 59 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0944   0354 CD 2A 04            CALL CHGSGN                     ;NEGATE
0945   0357 18 E5               JR XP24                         ;AND ADD THEM
0946   0359             ;
0947   0359             EXPR3:
0948   0359 CD B0 03            CALL EXPR4                      ;GET 1ST <EXPR4>
0949   035C             XP31:
0950   035C CF                  RST 08H                         ;MULTIPLY?
0951   035D                     DB '*'
tinybasic_2_5g_p2.ASM line 0951: unrecognized instruction.          (DB)
0952   035D                     DB XP34-$-1
tinybasic_2_5g_p2.ASM line 0952: unrecognized instruction.          (DB)
0953   035D E5                  PUSH HL                         ;YES, SAVE 1ST
0954   035E CD B0 03            CALL EXPR4                      ;AND GET 2ND <EXPR4>
0955   0361 06 00               LD B,00H                        ;CLEAR B FOR SIGN
0956   0363 CD 27 04            CALL CHKSGN                     ;CHECK SIGN
0957   0366 E3                  EX (SP),HL                      ;1ST IN HL
0958   0367 CD 27 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0959   036A EB                  EX DE,HL
0960   036B E3                  EX (SP),HL
0961   036C 7C                  LD A,H                          ;IS HL > 255 ?
0962   036D B7                  OR A
0963   036E 28 06               JR Z,XP32                       ;NO
0964   0370 7A                  LD A,D                          ;YES, HOW ABOUT DE
0965   0371 B2                  OR D
0966   0372 EB                  EX DE,HL                        ;PUT SMALLER IN HL
0967   0373 C2 98 00            JP NZ,AHOW                      ;ALSO >, WILL OVERFLOW
0968   0376             XP32:
0969   0376 7D                  LD A,L                          ;THIS IS DUMB
0970   0377 21 00 00            LD HL,0000H                     ;CLEAR RESULT
0971   037A B7                  OR A                            ;ADD AND COUNT
0972   037B 28 26               JR Z,XP35
0973   037D             XP33:
0974   037D 19                  ADD HL,DE
0975   037E DA 98 00            JP C,AHOW                       ;OVERFLOW
0976   0381 3D                  DEC A
0977   0382 20 F9               JR NZ,XP33
0978   0384 18 1D               JR XP35                         ;FINISHED
0979   0386             XP34:
0980   0386 CF                  RST 08H                         ;DIVIDE?
0981   0387                     DB '/'
tinybasic_2_5g_p2.ASM line 0981: unrecognized instruction.          (DB)
0982   0387                     DB XP42-$-1
tinybasic_2_5g_p2.ASM line 0982: unrecognized instruction.          (DB)
0983   0387 E5                  PUSH HL                         ;YES, SAVE 1ST <EXPR4>
0984   0388 CD B0 03            CALL EXPR4                      ;AND GET THE SECOND ONE
0985   038B 06 00               LD B,00H                        ;CLEAR B FOR SIGN
0986   038D CD 27 04            CALL CHKSGN                     ;CHECK SIGN OF 2ND
0987   0390 E3                  EX (SP),HL                      ;GET 1ST IN HL
0988   0391 CD 27 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0989   0394 EB                  EX DE,HL
0990   0395 E3                  EX (SP),HL
0991   0396 EB                  EX DE,HL
0992   0397 7A                  LD A,D                          ;DIVIDE BY 0?
0993   0398 B3                  OR E
0994   0399 CA 98 00            JP Z,AHOW                       ;SAY "HOW?"
0995   039C C5                  PUSH BC                         ;ELSE SAVE SIGN
0996   039D CD 0B 04            CALL DIVIDE                     ;USE SUBROUTINE
0997   03A0 60                  LD H,B                          ;RESULT IN HL NOW
0998   03A1 69                  LD L,C
0999   03A2 C1                  POP BC                          ;GET SIGN BACK
1000   03A3             XP35:
1001   03A3 D1                  POP DE                          ;AND TEXT POINTER
1002   03A4 7C                  LD A,H                          ;HL MUST BE +
1003   03A5 B7                  OR A
1004   03A6 FA 97 00            JP M,QHOW                       ;ELSE IT IS OVERFLOW
1005   03A9 78                  LD A,B
1006   03AA B7                  OR A
1007   03AB FC 2A 04            CALL M,CHGSGN                   ;CHANGE SIGN IF NEEDED
1008   03AE 18 AC               JR XP31                         ;LOOK FOR MORE TERMS
1009   03B0             EXPR4:
1010   03B0 21 24 06            LD HL,TAB4-1                    ;FIND FUNCTION IN TAB4
1011   03B3 C3 28 06            JP EXEC                         ;AND GO DO IT
1012   03B6             XP40:
1013   03B6 FF                  RST 38H                         ;NO, NOT A FUNCTION
1014   03B7 38 05               JR C,XP41                       ;NOR A VARIABLE
1015   03B9 7E                  LD A,(HL)                       ;VARIABLE
1016   03BA 23                  INC HL
1017   03BB 66                  LD H,(HL)                       ;VALUE IN HL
1018   03BC 6F                  LD L,A
1019   03BD C9                  RET
1020   03BE             XP41:
1021   03BE CD 70 00            CALL TSTNUM                     ;OR IS IT A NUMBER
1022   03C1 78                  LD A,B                          ;# OF DIGIT
1023   03C2 B7                  OR A
1024   03C3 C0                  RET NZ                          ;OK
1025   03C4             PARN:
1026   03C4 CF                  RST 08H
1027   03C5                     DB '('
tinybasic_2_5g_p2.ASM line 1027: unrecognized instruction.          (DB)
1028   03C5                     DB XP43-$-1
tinybasic_2_5g_p2.ASM line 1028: unrecognized instruction.          (DB)
1029   03C5 DF                  RST 18H                         ;"(EXPR)"
1030   03C6 CF                  RST 08H
1031   03C7                     DB ')'
tinybasic_2_5g_p2.ASM line 1031: unrecognized instruction.          (DB)
1032   03C7                     DB XP43-$-1
tinybasic_2_5g_p2.ASM line 1032: unrecognized instruction.          (DB)
1033   03C7             XP42:
1034   03C7 C9                  RET
1035   03C8             XP43:
1036   03C8 C3 64 04            JP QWHAT                        ;ELSE SAY: "WHAT?"
1037   03CB             RND:
1038   03CB CD C4 03            CALL PARN                       ;*** RND(EXPR) ***
1039   03CE 7C                  LD A,H                          ;EXPR MUST BE +
1040   03CF B7                  OR A
1041   03D0 FA 97 00            JP M,QHOW
1042   03D3 B5                  OR L                            ;AND NON-ZERO
1043   03D4 CA 97 00            JP Z,QHOW
1044   03D7 D5                  PUSH DE                         ;SAVE BOTH
1045   03D8 E5                  PUSH HL
tinybasic_2_5g_p2.ASM line 1046: Label not found: (RANPNT)
tinybasic_2_5g_p2.ASM line 1046: Unused data in MS byte of argument. (2)
1046   03D9 2A 00 00            LD HL,(RANPNT)                  ;GET MEMORY AS RANDOM
1047   03DC 11 14 08            LD DE,LSTROM                    ;NUMBER
1048   03DF E7                  RST 20H
1049   03E0 38 03               JR C,RA1                        ;WRAP AROUND IF LAST
1050   03E2 21 00 00            LD HL,START
1051   03E5             RA1:
1052   03E5 5E                  LD E,(HL)
1053   03E6 23                  INC HL
1054   03E7 56                  LD D,(HL)
tinybasic_2_5g_p2.ASM line 1055: Label not found: (RANPNT)
tinybasic_2_5g_p2.ASM line 1055: Unused data in MS byte of argument. (2)
1055   03E8 22 00 00            LD (RANPNT),HL
1056   03EB E1                  POP HL
1057   03EC EB                  EX DE,HL
1058   03ED C5                  PUSH BC
1059   03EE CD 0B 04            CALL DIVIDE                     ;RND (N)=MOD(M,N)+1
1060   03F1 C1                  POP BC
1061   03F2 D1                  POP DE
1062   03F3 23                  INC HL
1063   03F4 C9                  RET
1064   03F5             ABS:
1065   03F5 CD C4 03            CALL PARN                       ;*** ABS (EXPR) ***
1066   03F8 1B                  DEC DE
1067   03F9 CD 27 04            CALL CHKSGN                     ;CHECK SIGN
1068   03FC 13                  INC DE
1069   03FD C9                  RET
1070   03FE             SIZE:
tinybasic_2_5g_p2.ASM line 1071: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 1071: Unused data in MS byte of argument. (2)
1071   03FE 2A 00 00            LD HL,(TXTUNF)                  ;*** SIZE ***
1072   0401 D5                  PUSH DE                         ;GET THE NUMBER OF FREE
1073   0402 EB                  EX DE,HL                        ;BYTES BETWEEN 'TXTUNF'
tinybasic_2_5g_p2.ASM line 1074: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 1074: Unused data in MS byte of argument. (2)
1074   0403 21 00 00            LD HL,VARBGN                    ;AND 'VARBGN'
1075   0406 CD 20 04            CALL SUBDE
1076   0409 D1                  POP DE
1077   040A C9                  RET
1078   040B             ;*************************************************************
1079   040B             ;
1080   040B             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1081   040B             ;
1082   040B             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1083   040B             ;
1084   040B             ; 'SUBDE' SUBSTRACTS DE FROM HL
1085   040B             ;
1086   040B             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1087   040B             ; SIGN AND FLIP SIGN OF B.
1088   040B             ;
1089   040B             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1090   040B             ;
1091   040B             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1092   040B             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1093   040B             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1094   040B             ;*************************************************************
1095   040B             
1096   040B             DIVIDE:
1097   040B E5                  PUSH HL                         ;*** DIVIDE ***
1098   040C 6C                  LD L,H                          ;DIVIDE H BY DE
1099   040D 26 00               LD H,00H
1100   040F CD 16 04            CALL DV1
1101   0412 41                  LD B,C                          ;SAVE RESULT IN B
1102   0413 7D                  LD A,L                          ;(REMAINDER+L)/DE
1103   0414 E1                  POP HL
1104   0415 67                  LD H,A
1105   0416             DV1:
1106   0416 0E FF               LD C,0FFH                       ;RESULT IN C
1107   0418             DV2:
1108   0418 0C                  INC C                           ;DUMB ROUTINE
1109   0419 CD 20 04            CALL SUBDE                      ;DIVIDE BY SUBTRACT
1110   041C 30 FA               JR NC,DV2                       ;AND COUNT
1111   041E 19                  ADD HL,DE
1112   041F C9                  RET
1113   0420             SUBDE:
1114   0420 7D                  LD A,L                          ;*** SUBDE ***
1115   0421 93                  SUB E                           ;SUBSTRACT DE FROM
1116   0422 6F                  LD L,A                          ;HL
1117   0423 7C                  LD A,H
1118   0424 9A                  SBC A,D
1119   0425 67                  LD H,A
1120   0426 C9                  RET
1121   0427             CHKSGN:
1122   0427 7C                  LD A,H                          ;*** CHKSGN ***
1123   0428 B7                  OR A                            ;CHECK SIGN OF HL
1124   0429 F0                  RET P
1125   042A             CHGSGN:
1126   042A 7C                  LD A,H                          ;*** CHGSGN ***
1127   042B F5                  PUSH AF
1128   042C 2F                  CPL                             ;CHANGE SIGN OF HL
1129   042D 67                  LD H,A
1130   042E 7D                  LD A,L
1131   042F 2F                  CPL
1132   0430 6F                  LD L,A
1133   0431 23                  INC HL
1134   0432 F1                  POP AF
1135   0433 AC                  XOR H
1136   0434 F2 97 00            JP P,QHOW
1137   0437 78                  LD A,B                          ;AND ALSO FLIP B
1138   0438 EE 80               XOR 80H
1139   043A 47                  LD B,A
1140   043B C9                  RET
1141   043C             CKHLDE:
1142   043C 7C                  LD A,H                          ;SAME SIGN?
1143   043D AA                  XOR D                           ;YES, COMPARE
1144   043E F2 42 04            JP P,CK1                        ;NO, XCHANGE AND COMP
1145   0441 EB                  EX DE,HL
1146   0442             CK1:
1147   0442 E7                  RST 20H
1148   0443 C9                  RET
1149   0444             ;*************************************************************
1150   0444             ;
1151   0444             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1152   0444             ;
1153   0444             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1154   0444             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1155   0444             ; TO THAT VALUE.
1156   0444             ;
1157   0444             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1158   0444             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1159   0444             ; NEXT LINE AND CONTINUE FROM THERE.
1160   0444             ;
1161   0444             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1162   0444             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1163   0444             ;
1164   0444             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1165   0444             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1166   0444             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1167   0444             ; OF THE STACKB) POINTS TO.  EXECUTION OF TB IS STOPPED
1168   0444             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1169   0444             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1170   0444             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1171   0444             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1172   0444             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1173   0444             ;
1174   0444             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1175   0444             ; 'QWHAT' SAVES TEXT POINTER IN STACKB AND GET MESSAGE "WHAT?"
1176   0444             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1177   0444             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1178   0444             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1179   0444             ;*************************************************************
1180   0444             
1181   0444             SETVAL:
1182   0444 FF                  RST 38H                         ;*** SETVAL ***
1183   0445 DA 64 04            JP C,QWHAT                      ;"WHAT?" NO VARIABLE
1184   0448 E5                  PUSH HL                         ;SAVE ADDRESS OF VAR.
1185   0449 CF                  RST 08H                         ;PASS "=" SIGN
1186   044A                     DB '='
tinybasic_2_5g_p2.ASM line 1186: unrecognized instruction.          (DB)
1187   044A                     DB SV1-$-1
tinybasic_2_5g_p2.ASM line 1187: unrecognized instruction.          (DB)
1188   044A DF                  RST 18H                         ;EVALUATE EXPR.
1189   044B 44                  LD B,H                          ;VALUE IS IN BC NOW
1190   044C 4D                  LD C,L
1191   044D E1                  POP HL                          ;GET ADDRESS
1192   044E 71                  LD (HL),C                       ;SAVE VALUE
1193   044F 23                  INC HL
1194   0450 70                  LD (HL),B
1195   0451 C9                  RET
1196   0452             SV1:
1197   0452 C3 64 04            JP QWHAT                        ;NO "=" SIGN
1198   0455             FIN:
1199   0455 CF                  RST 08H                         ;*** FIN ***
1200   0456                     DB 3BH
tinybasic_2_5g_p2.ASM line 1200: unrecognized instruction.          (DB)
1201   0456                     DB FI1-$-1
tinybasic_2_5g_p2.ASM line 1201: unrecognized instruction.          (DB)
1202   0456 F1                  POP AF                          ;";", PURGE RET. ADDR.
1203   0457 C3 38 01            JP RUNSML                       ;CONTINUE SAME LINE
1204   045A             FI1:
1205   045A CF                  RST 08H                         ;NOT ";", IS IT CR?
1206   045B                     DB CR
tinybasic_2_5g_p2.ASM line 1206: unrecognized instruction.          (DB)
1207   045B                     DB FI2-$-1
tinybasic_2_5g_p2.ASM line 1207: unrecognized instruction.          (DB)
1208   045B F1                  POP AF                          ;YES, PURGE RET. ADDR.
1209   045C C3 28 01            JP RUNNXL                       ;RUN NEXT LINE
1210   045F             FI2:
1211   045F C9                  RET                             ;ELSE RETURN TO CALLER
1212   0460             ENDCHK:
1213   0460 EF                  RST 28H                         ;*** ENDCHK ***
tinybasic_2_5g_p2.ASM line 1214: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 1214: Unused data in MS byte of argument. (200)
1214   0461 FE 00               CP CR                           ;END WITH CR?
1215   0463 C8                  RET Z                           ;OK, ELSE SAY: "WHAT?"
1216   0464             QWHAT:
1217   0464 D5                  PUSH DE                         ;*** QWHAT ***
1218   0465             AWHAT:
tinybasic_2_5g_p2.ASM line 1219: Label not found: (WHAT)
tinybasic_2_5g_p2.ASM line 1219: Unused data in MS byte of argument. (2)
1219   0465 11 00 00            LD DE,WHAT                      ;*** AWHAT ***
1220   0468             ERROR_ROUTINE:
1221   0468 97                  SUB A                           ;*** ERROR ***
1222   0469 CD F1 04            CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
1223   046C D1                  POP DE                          ;OR 'SORRY'
1224   046D 1A                  LD A,(DE)                       ;SAVE THE CHARACTER
1225   046E F5                  PUSH AF                         ;AT WHERE OLD DE ->
1226   046F 97                  SUB A                           ;AND PUT A 0 THERE
1227   0470 12                  LD (DE),A
tinybasic_2_5g_p2.ASM line 1228: Label not found: (CURRNT)
tinybasic_2_5g_p2.ASM line 1228: Unused data in MS byte of argument. (2)
1228   0471 2A 00 00            LD HL,(CURRNT)                  ;GET CURRENT LINE #
1229   0474 E5                  PUSH HL
1230   0475 7E                  LD A,(HL)                       ;CHECK THE VALUE
1231   0476 23                  INC HL
1232   0477 B6                  OR (HL)
1233   0478 D1                  POP DE
1234   0479 CA 9E 00            JP Z,RSTART                     ;IF ZERO, JUST RESTART
1235   047C 7E                  LD A,(HL)                       ;IF NEGATIVE,
1236   047D B7                  OR A
1237   047E FA 8B 02            JP M,INPERR                     ;REDO INPUT
1238   0481 CD 55 05            CALL PRTLN                      ;ELSE PRINT THE LINE
1239   0484 1B                  DEC DE                          ;UPTO WHERE THE 0 IS
1240   0485 F1                  POP AF                          ;RESTORE THE CHARACTER
1241   0486 12                  LD (DE),A
1242   0487 3E 3F               LD A,3FH                        ;PRINT A "?"
1243   0489 D7                  RST 10H
1244   048A 97                  SUB A                           ;AND THE REST OF THE
1245   048B CD F1 04            CALL PRTSTG                     ;LINE
1246   048E C3 9E 00            JP RSTART                       ;THEN RESTART
1247   0491             QSORRY:
1248   0491 D5                  PUSH DE                         ;*** QSORRY ***
1249   0492             ASORRY:
tinybasic_2_5g_p2.ASM line 1250: Label not found: (SORRY)
tinybasic_2_5g_p2.ASM line 1250: Unused data in MS byte of argument. (2)
1250   0492 11 00 00            LD DE,SORRY                     ;*** ASORRY ***
1251   0495 18 D1               JR ERROR_ROUTINE
1252   0497             ;*************************************************************
1253   0497             ;
1254   0497             ; *** GETLN *** FNDLN (& FRIENDS) ***
1255   0497             ;
1256   0497             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1257   0497             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1258   0497             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1259   0497             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1260   0497             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1261   0497             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1262   0497             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1263   0497             ;
1264   0497             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1265   0497             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1266   0497             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1267   0497             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1268   0497             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1269   0497             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1270   0497             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1271   0497             ; LINE, FLAGS ARE C & NZ.
1272   0497             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1273   0497             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1274   0497             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1275   0497             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1276   0497             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1277   0497             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1278   0497             ;*************************************************************
1279   0497             
1280   0497             GETLN:
1281   0497 D7                  RST 10H                         ;*** GETLN ***
tinybasic_2_5g_p2.ASM line 1282: Label not found: (BUFFER)
tinybasic_2_5g_p2.ASM line 1282: Unused data in MS byte of argument. (2)
1282   0498 11 00 00            LD DE,BUFFER                    ;PROMPT AND INIT.
1283   049B             GL1:
1284   049B CD 01 06            CALL CHKIO                      ;CHECK KEYBOARD
1285   049E 28 FB               JR Z,GL1                        ;NO INPUT, WAIT
1286   04A0 FE 7F               CP 7FH                          ;DELETE LAST CHARACTER?
1287   04A2 28 16               JR Z,GL3                        ;YES
1288   04A4 D7                  RST 10H                         ;INPUT, ECHO BACK
1289   04A5 FE 0A               CP 0AH                          ;IGNORE LF
1290   04A7 28 F2               JR Z,GL1
1291   04A9 B7                  OR A                            ;IGNORE NULL
1292   04AA 28 EF               JR Z,GL1
1293   04AC FE 7D               CP 7DH                          ;DELETE THE WHOLE LINE?
1294   04AE 28 15               JR Z,GL4                        ;YES
1295   04B0 12                  LD (DE),A                       ;ELSE SAVE INPUT
1296   04B1 13                  INC DE                          ;AND BUMP POINTER
1297   04B2 FE 0D               CP 0DH                          ;WAS IT CR
1298   04B4 C8                  RET Z                           ;YES, END OF LINE
1299   04B5 7B                  LD A,E                          ;ELSE MORE FREE ROOM?
tinybasic_2_5g_p2.ASM line 1300: Label not found: (BUFENDAND0FFH)
tinybasic_2_5g_p2.ASM line 1300: Unused data in MS byte of argument. (200)
1300   04B6 FE 00               CP BUFEND AND 0FFH
1301   04B8 20 E1               JR NZ,GL1                       ;YES, GET NEXT INPUT
1302   04BA             GL3:
1303   04BA 7B                  LD A,E                          ;DELETE LAST CHARACTER
tinybasic_2_5g_p2.ASM line 1304: Label not found: (BUFFERAND0FFH)
tinybasic_2_5g_p2.ASM line 1304: Unused data in MS byte of argument. (200)
1304   04BB FE 00               CP BUFFER AND 0FFH              ;BUT DO WE HAVE ANY?
1305   04BD 28 06               JR Z,GL4                        ;NO, REDO WHOLE LINE
1306   04BF 1B                  DEC DE                          ;YES, BACKUP POINTER
1307   04C0 3E 5C               LD A,5CH                        ;AND ECHO A BACK-SLASH
1308   04C2 D7                  RST 10H
1309   04C3 18 D6               JR GL1                          ;GO GET NEXT INPUT
1310   04C5             GL4:
1311   04C5 CD 0E 00            CALL CRLF                       ;REDO ENTIRE LINE
1312   04C8 3E 5E               LD A,05EH                       ;CR, LF AND UP-ARROW
1313   04CA 18 CB               JR GETLN
1314   04CC             FNDLN:
1315   04CC 7C                  LD A,H                          ;*** FNDLN ***
1316   04CD B7                  OR A                            ;CHECK SIGN OF HL
1317   04CE FA 97 00            JP M,QHOW                       ;IT CANNOT BE -
tinybasic_2_5g_p2.ASM line 1318: Label not found: (TXTBGN)
tinybasic_2_5g_p2.ASM line 1318: Unused data in MS byte of argument. (2)
1318   04D1 11 00 00            LD DE,TXTBGN                    ;INIT TEXT POINTER
1319   04D4             FNDLP:                                  ;*** FDLNP ***
1320   04D4             FL1:
1321   04D4 E5                  PUSH HL                         ;SAVE LINE #
tinybasic_2_5g_p2.ASM line 1322: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 1322: Unused data in MS byte of argument. (2)
1322   04D5 2A 00 00            LD HL,(TXTUNF)                  ;CHECK IF WE PASSED END
1323   04D8 2B                  DEC HL
1324   04D9 E7                  RST 20H
1325   04DA E1                  POP HL                          ;GET LINE # BACK
1326   04DB D8                  RET C                           ;C,NZ PASSED END
1327   04DC 1A                  LD A,(DE)                       ;WE DID NOT, GET BYTE 1
1328   04DD 95                  SUB L                           ;IS THIS THE LINE?
1329   04DE 47                  LD B,A                          ;COMPARE LOW ORDER
1330   04DF 13                  INC DE
1331   04E0 1A                  LD A,(DE)                       ;GET BYTE 2
1332   04E1 9C                  SBC A,H                         ;COMPARE HIGH ORDER
1333   04E2 38 04               JR C,FL2                        ;NO, NOT THERE YET
1334   04E4 1B                  DEC DE                          ;ELSE WE EITHER FOUND
1335   04E5 B0                  OR B                            ;IT, OR IT IS NOT THERE
1336   04E6 C9                  RET                             ;NC,Z;FOUND, NC,NZ:NO
1337   04E7             FNDNXT:                                 ;*** FNDNXT ***
1338   04E7 13                  INC DE                          ;FIND NEXT LINE
1339   04E8             FL2:
1340   04E8 13                  INC DE                          ;JUST PASSED BYTE 1 & 2
1341   04E9             FNDSKP:
1342   04E9 1A                  LD A,(DE)                       ;*** FNDSKP ***
tinybasic_2_5g_p2.ASM line 1343: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 1343: Unused data in MS byte of argument. (200)
1343   04EA FE 00               CP CR                           ;TRY TO FIND CR
1344   04EC 20 FA               JR NZ,FL2                       ;KEEP LOOKING
1345   04EE 13                  INC DE                          ;FOUND CR, SKIP OVER
1346   04EF 18 E3               JR FL1                          ;CHECK IF END OF TEXT
1347   04F1             ;*************************************************************
1348   04F1             ;
1349   04F1             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1350   04F1             ;
1351   04F1             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1352   04F1             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1353   04F1             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1354   04F1             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1355   04F1             ;
1356   04F1             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1357   04F1             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1358   04F1             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1359   04F1             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1360   04F1             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1361   04F1             ; OVER (USUALLY A JUMP INSTRUCTION.
1362   04F1             ;
1363   04F1             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1364   04F1             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1365   04F1             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1366   04F1             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1367   04F1             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1368   04F1             ;
1369   04F1             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1370   04F1             ;*************************************************************
1371   04F1             
1372   04F1             PRTSTG:
1373   04F1 47                  LD B,A                          ;*** PRTSTG ***
1374   04F2             PS1:
1375   04F2 1A                  LD A,(DE)                       ;GET A CHARACTER
1376   04F3 13                  INC DE                          ;BUMP POINTER
1377   04F4 B8                  CP B                            ;SAME AS OLD A?
1378   04F5 C8                  RET Z                           ;YES, RETURN
1379   04F6 D7                  RST 10H                         ;NO, NEXT
tinybasic_2_5g_p2.ASM line 1380: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 1380: Unused data in MS byte of argument. (200)
1380   04F7 FE 00               CP CR                           ;WAS IT A CR?
1381   04F9 20 F7               JR NZ,PS1                       ;NO, NEXT
1382   04FB C9                  RET                             ;YES, RETURN
1383   04FC             QTSTG:
1384   04FC CF                  RST 08H                         ;*** QTSTG ***
1385   04FD                     DB '"'
tinybasic_2_5g_p2.ASM line 1385: unrecognized instruction.          (DB)
1386   04FD                     DB QT3-$-1
tinybasic_2_5g_p2.ASM line 1386: unrecognized instruction.          (DB)
1387   04FD 3E 22               LD A,22H                        ;IT IS A "
1388   04FF             QT1:
1389   04FF CD F1 04            CALL PRTSTG                     ;PRINT UNTIL ANOTHER
tinybasic_2_5g_p2.ASM line 1390: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 1390: Unused data in MS byte of argument. (200)
1390   0502 FE 00               CP CR                           ;WAS LAST ONE A CR?
1391   0504 E1                  POP HL                          ;RETURN ADDRESS
1392   0505 CA 28 01            JP Z,RUNNXL                     ;WAS CR, RUN NEXT LINE
1393   0508             QT2:
1394   0508 23                  INC HL                          ;SKIP 3 BYTES ON RETURN
1395   0509 23                  INC HL
1396   050A                     ;INC HL                         ;skip due to relative jumps
1397   050A                                                     ;suggested by Nick Brok: Fixed
1398   050A E9                  JP (HL)                         ;RETURN
1399   050B             QT3:
1400   050B CF                  RST 08H                         ;IS IT A '?
1401   050C                     DB 27H
tinybasic_2_5g_p2.ASM line 1401: unrecognized instruction.          (DB)
1402   050C                     DB QT4-$-1
tinybasic_2_5g_p2.ASM line 1402: unrecognized instruction.          (DB)
1403   050C 3E 27               LD A,27H                        ;YES, DO THE SAME
1404   050E 18 EF               JR QT1                          ;AS IN "
1405   0510             QT4:
1406   0510 CF                  RST 08H                         ;IS IT BACK-ARROW?
1407   0511                     DB 5FH
tinybasic_2_5g_p2.ASM line 1407: unrecognized instruction.          (DB)
1408   0511                     DB QT5-$-1
tinybasic_2_5g_p2.ASM line 1408: unrecognized instruction.          (DB)
1409   0511 3E 8D               LD A,8DH                        ;YES, CR WITHOUT LF
1410   0513 D7                  RST 10H                         ;DO IT TWICE TO GIVE
1411   0514 D7                  RST 10H                         ;TTY ENOUGH TIME
1412   0515 E1                  POP HL                          ;RETURN ADDRESS
1413   0516 18 F0               JR QT2
1414   0518             QT5:
1415   0518 C9                  RET                             ;NONE OF ABOVE
1416   0519             ;
1417   0519             PRTNUM:
1418   0519 06 00               LD B,00H                        ;*** PRTNUM ***
1419   051B CD 27 04            CALL CHKSGN                     ;CHECK SIGN
1420   051E F2 24 05            JP P,PN1                        ;NO SIGN
1421   0521 06 2D               LD B,'-'                        ;B=SIGN
1422   0523 0D                  DEC C                           ;'-' TAKES SPACE
1423   0524             PN1:
1424   0524 D5                  PUSH DE                         ;SAVE
1425   0525 11 0A 00            LD DE,000AH                     ;DECIMAL
1426   0528 D5                  PUSH DE                         ;SAVE AS FLAG
1427   0529 0D                  DEC C                           ;C=SPACES
1428   052A C5                  PUSH BC                         ;SAVE SIGN & SPACE
1429   052B             PN2:
1430   052B CD 0B 04            CALL DIVIDE                     ;DIVIDE HL BY 10
1431   052E 78                  LD A,B                          ;RESULT 0?
1432   052F B1                  OR C
1433   0530 28 07               JR Z,PN3                        ;YES, WE GOT ALL
1434   0532 E3                  EX (SP),HL                      ;NO, SAVE REMAINDER
1435   0533 2D                  DEC L                           ;AND COUNT SPACE
1436   0534 E5                  PUSH HL                         ;HL IS OLD BC
1437   0535 60                  LD H,B                          ;MOVE RESULT TO BC
1438   0536 69                  LD L,C
1439   0537 18 F2               JR PN2                          ;AND DIVIDE BY 10
1440   0539             PN3:
1441   0539 C1                  POP BC                          ;WE GOT ALL DIGITS IN
1442   053A             PN4:
1443   053A 0D                  DEC C                           ;THE STACKB
1444   053B 79                  LD A,C                          ;LOOK AT SPACE COUNT
1445   053C B7                  OR A
1446   053D FA 45 05            JP M,PN5                        ;NO LEADING BLANKS
1447   0540 3E 20               LD A,20H                        ;LEADING BLANKS
1448   0542 D7                  RST 10H
1449   0543 18 F5               JR PN4                          ;MORE?
1450   0545             PN5:
1451   0545 78                  LD A,B                          ;PRINT SIGN
1452   0546 B7                  OR A
1453   0547 C4 10 00            CALL NZ,0010H
1454   054A 5D                  LD E,L                          ;LAST REMAINDER IN E
1455   054B             PN6:
1456   054B 7B                  LD A,E                          ;CHECK DIGIT IN E
1457   054C FE 0A               CP 0AH                          ;10 IS FLAG FOR NO MORE
1458   054E D1                  POP DE
1459   054F C8                  RET Z                           ;IF SO, RETURN
1460   0550 C6 30               ADD A,30H                       ;ELSE, CONVERT TO ASCII
1461   0552 D7                  RST 10H                         ;PRINT THE DIGIT
1462   0553 18 F6               JR PN6                          ;GO BACK FOR MORE
1463   0555             PRTLN:
1464   0555 1A                  LD A,(DE)                       ;*** PRTLN ***
1465   0556 6F                  LD L,A                          ;LOW ORDER LINE #
1466   0557 13                  INC DE
1467   0558 1A                  LD A,(DE)                       ;HIGH ORDER
1468   0559 67                  LD H,A
1469   055A 13                  INC DE
1470   055B 0E 04               LD C,04H                        ;PRINT 4 DIGIT LINE #
1471   055D CD 19 05            CALL PRTNUM
1472   0560 3E 20               LD A,20H                        ;FOLLOWED BY A BLANK
1473   0562 D7                  RST 10H
1474   0563 97                  SUB A                           ;AND THEN THE NEXT
1475   0564 CD F1 04            CALL PRTSTG
1476   0567 C9                  RET
1477   0568             ;*************************************************************
1478   0568             ;
1479   0568             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1480   0568             ;
1481   0568             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1482   0568             ; DE = HL
1483   0568             ;
1484   0568             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1485   0568             ; UNTIL DE = BC
1486   0568             ;
1487   0568             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1488   0568             ; STACKB
1489   0568             ;
1490   0568             ; 'PUSHA' STACKBS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1491   0568             ; STACKB
1492   0568             ;*************************************************************
1493   0568             
1494   0568             MVUP:
1495   0568 E7                  RST 20H                         ;*** MVUP ***
1496   0569 C8                  RET Z                           ;DE = HL, RETURN
1497   056A 1A                  LD A,(DE)                       ;GET ONE BYTE
1498   056B 02                  LD (BC),A                       ;MOVE IT
1499   056C 13                  INC DE                          ;INCREASE BOTH POINTERS
1500   056D 03                  INC BC
1501   056E 18 F8               JR MVUP                         ;UNTIL DONE
1502   0570             MVDOWN:
1503   0570 78                  LD A,B                          ;*** MVDOWN ***
1504   0571 92                  SUB D                           ;TEST IF DE = BC
1505   0572 C2 78 05            JP NZ,MD1                       ;NO, GO MOVE
1506   0575 79                  LD A,C                          ;MAYBE, OTHER BYTE?
1507   0576 93                  SUB E
1508   0577 C8                  RET Z                           ;YES, RETURN
1509   0578             MD1:
1510   0578 1B                  DEC DE                          ;ELSE MOVE A BYTE
1511   0579 2B                  DEC HL                          ;BUT FIRST DECREASE
1512   057A 1A                  LD A,(DE)                       ;BOTH POINTERS AND
1513   057B 77                  LD (HL),A                       ;THEN DO IT
1514   057C 18 F2               JR MVDOWN                       ;LOOP BACK
1515   057E             POPA:
1516   057E C1                  POP BC                          ;BC = RETURN ADDR.
1517   057F E1                  POP HL                          ;RESTORE LOPVAR, BUT
tinybasic_2_5g_p2.ASM line 1518: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 1518: Unused data in MS byte of argument. (2)
1518   0580 22 00 00            LD (LOPVAR),HL                  ;=0 MEANS NO MORE
1519   0583 7C                  LD A,H
1520   0584 B5                  OR L
1521   0585 28 10               JR Z,PP1                        ;YEP, GO RETURN
1522   0587 E1                  POP HL                          ;NOP, RESTORE OTHERS
tinybasic_2_5g_p2.ASM line 1523: Label not found: (LOPINC)
tinybasic_2_5g_p2.ASM line 1523: Unused data in MS byte of argument. (2)
1523   0588 22 00 00            LD (LOPINC),HL
1524   058B E1                  POP HL
tinybasic_2_5g_p2.ASM line 1525: Label not found: (LOPLMT)
tinybasic_2_5g_p2.ASM line 1525: Unused data in MS byte of argument. (2)
1525   058C 22 00 00            LD (LOPLMT),HL
1526   058F E1                  POP HL
tinybasic_2_5g_p2.ASM line 1527: Label not found: (LOPLN)
tinybasic_2_5g_p2.ASM line 1527: Unused data in MS byte of argument. (2)
1527   0590 22 00 00            LD (LOPLN),HL
1528   0593 E1                  POP HL
tinybasic_2_5g_p2.ASM line 1529: Label not found: (LOPPT)
tinybasic_2_5g_p2.ASM line 1529: Unused data in MS byte of argument. (2)
1529   0594 22 00 00            LD (LOPPT),HL
1530   0597             PP1:
1531   0597 C5                  PUSH BC                         ;BC = RETURN ADDR.
1532   0598 C9                  RET
1533   0599             PUSHA:
tinybasic_2_5g_p2.ASM line 1534: Label not found: (STKLMT)
tinybasic_2_5g_p2.ASM line 1534: Unused data in MS byte of argument. (2)
1534   0599 21 00 00            LD HL,STKLMT                    ;*** PUSHA ***
1535   059C CD 2A 04            CALL CHGSGN
1536   059F C1                  POP BC                          ;BC=RETURN ADDRESS
1537   05A0 39                  ADD HL,SP                       ;IS STACKB NEAR THE TOP?
1538   05A1 D2 91 04            JP NC,QSORRY                    ;YES, SORRY FOR THAT
tinybasic_2_5g_p2.ASM line 1539: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 1539: Unused data in MS byte of argument. (2)
1539   05A4 2A 00 00            LD HL,(LOPVAR)                  ;ELSE SAVE LOOP VAR'S
1540   05A7 7C                  LD A,H                          ;BUT IF LOPVAR IS 0
1541   05A8 B5                  OR L                            ;THAT WILL BE ALL
1542   05A9 28 13               JR Z,PU1
tinybasic_2_5g_p2.ASM line 1543: Label not found: (LOPPT)
tinybasic_2_5g_p2.ASM line 1543: Unused data in MS byte of argument. (2)
1543   05AB 2A 00 00            LD HL,(LOPPT)                   ;ELSE, MORE TO SAVE
1544   05AE E5                  PUSH HL
tinybasic_2_5g_p2.ASM line 1545: Label not found: (LOPLN)
tinybasic_2_5g_p2.ASM line 1545: Unused data in MS byte of argument. (2)
1545   05AF 2A 00 00            LD HL,(LOPLN)
1546   05B2 E5                  PUSH HL
tinybasic_2_5g_p2.ASM line 1547: Label not found: (LOPLMT)
tinybasic_2_5g_p2.ASM line 1547: Unused data in MS byte of argument. (2)
1547   05B3 2A 00 00            LD HL,(LOPLMT)
1548   05B6 E5                  PUSH HL
tinybasic_2_5g_p2.ASM line 1549: Label not found: (LOPINC)
tinybasic_2_5g_p2.ASM line 1549: Unused data in MS byte of argument. (2)
1549   05B7 2A 00 00            LD HL,(LOPINC)
1550   05BA E5                  PUSH HL
tinybasic_2_5g_p2.ASM line 1551: Label not found: (LOPVAR)
tinybasic_2_5g_p2.ASM line 1551: Unused data in MS byte of argument. (2)
1551   05BB 2A 00 00            LD HL,(LOPVAR)
1552   05BE             PU1:
1553   05BE E5                  PUSH HL
1554   05BF C5                  PUSH BC                         ;BC = RETURN ADDR.
1555   05C0 C9                  RET
1556   05C1             ;*************************************************************
1557   05C1             ;
1558   05C1             ; *** OUTC *** & CHKIO ***
1559   05C1             ;
1560   05C1             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1561   05C1             ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
1562   05C1             ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
1563   05C1             ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
1564   05C1             ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
1565   05C1             ; ARE RESTORED.
1566   05C1             ;
1567   05C1             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1568   05C1             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1569   05C1             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1570   05C1             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1571   05C1             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1572   05C1             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1573   05C1             ;*************************************************************
1574   05C1             
1575   05C1             INIT:
1576   05C1 CD 11 08            CALL SERIAL_INIT		;INITIALIZE THE SERIAL PORT
1577   05C4 16 03               LD D,03H                        ;3X LINE FEEDS
1578   05C6             PATLOP:
1579   05C6 CD 0E 00            CALL CRLF
1580   05C9 15                  DEC D
1581   05CA 20 FA               JR NZ,PATLOP
1582   05CC 97                  SUB A
1583   05CD 11 25 06            LD DE,MSG1
1584   05D0 CD F1 04            CALL PRTSTG
tinybasic_2_5g_p2.ASM line 1585: Label not found: (MSG2)
tinybasic_2_5g_p2.ASM line 1585: Unused data in MS byte of argument. (2)
1585   05D3 11 00 00            LD DE,MSG2
1586   05D6 CD F1 04            CALL PRTSTG
1587   05D9 11 25 06            LD DE,MSG3
1588   05DC CD F1 04            CALL PRTSTG
1589   05DF 21 00 00            LD HL,START
tinybasic_2_5g_p2.ASM line 1590: Label not found: (RANPNT)
tinybasic_2_5g_p2.ASM line 1590: Unused data in MS byte of argument. (2)
1590   05E2 22 00 00            LD (RANPNT),HL
tinybasic_2_5g_p2.ASM line 1591: Label not found: (TXTBGN)
tinybasic_2_5g_p2.ASM line 1591: Unused data in MS byte of argument. (2)
1591   05E5 21 00 00            LD HL,TXTBGN
tinybasic_2_5g_p2.ASM line 1592: Label not found: (TXTUNF)
tinybasic_2_5g_p2.ASM line 1592: Unused data in MS byte of argument. (2)
1592   05E8 22 00 00            LD (TXTUNF),HL
1593   05EB C3 9E 00            JP RSTART
1594   05EE             OUTC:
1595   05EE 20 02               JR NZ,OUTC2                     ;IT IS ON
1596   05F0 F1                  POP AF                          ;IT IS OFF
1597   05F1 C9                  RET                             ;RESTORE AF AND RETURN
1598   05F2             OUTC2:
1599   05F2 CD 12 08            CALL TX_RDY                     ;SEE IF TRANSMIT IS AVAILABLE
1600   05F5 F1                  POP AF                          ;RESTORE THE REGISTER
tinybasic_2_5g_p2.ASM line 1601: Label not found: (SerialPort)
tinybasic_2_5g_p2.ASM line 1601: Unused data in MS byte of argument. (200)
1601   05F6 D3 00               OUT (SerialPort),A		;SEND THE BYTE
tinybasic_2_5g_p2.ASM line 1602: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 1602: Unused data in MS byte of argument. (200)
1602   05F8 FE 00               CP CR
1603   05FA C0                  RET NZ
tinybasic_2_5g_p2.ASM line 1604: Label not found: (LF)
tinybasic_2_5g_p2.ASM line 1604: Unused data in MS byte of argument. (200)
1604   05FB 3E 00               LD A,LF
1605   05FD D7                  RST 10H
tinybasic_2_5g_p2.ASM line 1606: Label not found: (CR)
tinybasic_2_5g_p2.ASM line 1606: Unused data in MS byte of argument. (200)
1606   05FE 3E 00               LD A,CR
1607   0600 C9                  RET
1608   0601             CHKIO:
1609   0601 CD 13 08            CALL RX_RDY                     ;CHECK IF CHARACTER AVAILABLE
1610   0604 C8                  RET Z                           ;RETURN IF NO CHARACTER AVAILABLE
1611   0605             
1612   0605 C5                  PUSH BC                         ;IF IT'S A LF, IGNORE AND RETURN
1613   0606 47                  LD B,A                          ; AS IF THERE WAS NO CHARACTER.
tinybasic_2_5g_p2.ASM line 1614: Label not found: (LF)
tinybasic_2_5g_p2.ASM line 1614: Unused data in MS byte of argument. (200)
1614   0607 D6 00               SUB LF
1615   0609 28 0F               JR Z,CHKIO2
1616   060B 78                  LD A,B                          ;OTHERWISE RESTORE 'A' AND 'BC'
1617   060C C1                  POP BC                          ; AND CONTINUE ON.
1618   060D             
1619   060D FE 0F               CP 0FH                          ;IS IT CONTROL-0?
1620   060F 20 0E               JR NZ,CI1                       ;NO, MORE CHECKING
tinybasic_2_5g_p2.ASM line 1621: Label not found: (OCSW)
tinybasic_2_5g_p2.ASM line 1621: Unused data in MS byte of argument. (2)
1621   0611 3A 00 00            LD A,(OCSW)                     ;CONTROL-0 FLIPS OCSW
1622   0614 2F                  CPL                             ;ON TO OFF, OFF TO ON
tinybasic_2_5g_p2.ASM line 1623: Label not found: (OCSW)
tinybasic_2_5g_p2.ASM line 1623: Unused data in MS byte of argument. (2)
1623   0615 32 00 00            LD (OCSW),A
1624   0618 18 E7               JR CHKIO                        ;GET ANOTHER INPUT
1625   061A             CHKIO2:
1626   061A 3E 00               LD A,00H                        ;CLEAR A
1627   061C B7                  OR A                            ;ZET THE Z-FLAG
1628   061D C1                  POP BC                          ;RESTORE THE 'BC' PAIR
1629   061E C9                  RET                             ;RETURN WITH 'Z' SET.
1630   061F             CI1:
1631   061F FE 03               CP 03H                          ;IS IT CONTROL-C?
1632   0621 C0                  RET NZ                          ;NO, RETURN "NZ"
1633   0622 C3 9E 00            JP RSTART                       ;YES, RESTART TBI
1634   0625             ;
1635   0625             MSG1:
1636   0625                     DB      ESC,"[2J",ESC,"[H"
tinybasic_2_5g_p2.ASM line 1636: unrecognized instruction.          (DB)
1637   0625                     DB      'Z80 TinyBASIC 2.5g Patch 2',CR
tinybasic_2_5g_p2.ASM line 1637: unrecognized instruction.          (DB)
1638   0625             MSG2:   DB      'Ported by Doug Gabbard, 2017',CR
tinybasic_2_5g_p2.ASM line 1638: Label not found: (MSG2)
tinybasic_2_5g_p2.ASM line 1638: label value misalligned.           (MSG2)
tinybasic_2_5g_p2.ASM line 1638: unrecognized instruction.          (MSG2)
1639   0625             MSG3:
1640   0625                     DB      LF,LF,'HELP - New Instructions',LF,LF,CR
tinybasic_2_5g_p2.ASM line 1640: unrecognized instruction.          (DB)
1641   0625             ;*************************************************************
1642   0625             ;
1643   0625             ; *** TABLES *** DIRECT *** & EXEC ***
1644   0625             ;
1645   0625             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1646   0625             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1647   0625             ; OF CODE ACCORDING TO THE TABLE.
1648   0625             ;
1649   0625             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1650   0625             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1651   0625             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1652   0625             ; ALL DIRECT AND STATEMENT COMMANDS.
1653   0625             ;
1654   0625             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1655   0625             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1656   0625             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1657   0625             ;
1658   0625             ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1659   0625             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1660   0625             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1661   0625             ; BYTE SET TO 1.
1662   0625             ;
1663   0625             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1664   0625             ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1665   0625             ; MATCH THIS NULL ITEM AS DEFAULT.
1666   0625             ;*************************************************************
1667   0625             
1668   0625             TAB1:                                   ;DIRECT COMMANDS
1669   0625                     DB 'HELP'                       ;ADDED HELP MENU
tinybasic_2_5g_p2.ASM line 1669: unrecognized instruction.          (DB)
1670   0625                     DWA HELP_CMDS
tinybasic_2_5g_p2.ASM line 1670: unrecognized instruction.          (DWA)
1671   0625                     DB 'LIST'
tinybasic_2_5g_p2.ASM line 1671: unrecognized instruction.          (DB)
1672   0625                     DWA LIST
tinybasic_2_5g_p2.ASM line 1672: unrecognized instruction.          (DWA)
1673   0625                     DB 'NEW'
tinybasic_2_5g_p2.ASM line 1673: unrecognized instruction.          (DB)
1674   0625                     DWA NEW
tinybasic_2_5g_p2.ASM line 1674: unrecognized instruction.          (DWA)
1675   0625                     DB 'RUN'
tinybasic_2_5g_p2.ASM line 1675: unrecognized instruction.          (DB)
1676   0625                     DWA RUN
tinybasic_2_5g_p2.ASM line 1676: unrecognized instruction.          (DWA)
1677   0625             
1678   0625             TAB2:                                   ;DIRECT/STATEMENT
1679   0625             
1680   0625                     DB 'CALL'
tinybasic_2_5g_p2.ASM line 1680: unrecognized instruction.          (DB)
1681   0625                     DWA CALL_MCODE
tinybasic_2_5g_p2.ASM line 1681: unrecognized instruction.          (DWA)
1682   0625                     DB 'CLS'                        ;ADDED CLS CMD
tinybasic_2_5g_p2.ASM line 1682: unrecognized instruction.          (DB)
1683   0625                     DWA CLSB
tinybasic_2_5g_p2.ASM line 1683: unrecognized instruction.          (DWA)
1684   0625                     DB 'DELAY'                      ;ADDED DELAY CMD
tinybasic_2_5g_p2.ASM line 1684: unrecognized instruction.          (DB)
1685   0625                     DWA DELAYB
tinybasic_2_5g_p2.ASM line 1685: unrecognized instruction.          (DWA)
1686   0625                     DB 'FOR'
tinybasic_2_5g_p2.ASM line 1686: unrecognized instruction.          (DB)
1687   0625                     DWA FOR
tinybasic_2_5g_p2.ASM line 1687: unrecognized instruction.          (DWA)
1688   0625                     DB 'GOSUB'
tinybasic_2_5g_p2.ASM line 1688: unrecognized instruction.          (DB)
1689   0625                     DWA GOSUB
tinybasic_2_5g_p2.ASM line 1689: unrecognized instruction.          (DWA)
1690   0625                     DB 'GOTO'
tinybasic_2_5g_p2.ASM line 1690: unrecognized instruction.          (DB)
1691   0625                     DWA GOTO
tinybasic_2_5g_p2.ASM line 1691: unrecognized instruction.          (DWA)
1692   0625                     DB 'IF'
tinybasic_2_5g_p2.ASM line 1692: unrecognized instruction.          (DB)
1693   0625                     DWA IFF
tinybasic_2_5g_p2.ASM line 1693: unrecognized instruction.          (DWA)
1694   0625                     DB 'INPUT'
tinybasic_2_5g_p2.ASM line 1694: unrecognized instruction.          (DB)
1695   0625                     DWA INPUT
tinybasic_2_5g_p2.ASM line 1695: unrecognized instruction.          (DWA)
1696   0625                     DB 'IN'                         ;ADDED IN CMD
tinybasic_2_5g_p2.ASM line 1696: unrecognized instruction.          (DB)
1697   0625                     DWA INB
tinybasic_2_5g_p2.ASM line 1697: unrecognized instruction.          (DWA)
1698   0625                     DB 'LET'
tinybasic_2_5g_p2.ASM line 1698: unrecognized instruction.          (DB)
1699   0625                     DWA LET
tinybasic_2_5g_p2.ASM line 1699: unrecognized instruction.          (DWA)
1700   0625                     DB 'NEXT'
tinybasic_2_5g_p2.ASM line 1700: unrecognized instruction.          (DB)
1701   0625                     DWA NEXT
tinybasic_2_5g_p2.ASM line 1701: unrecognized instruction.          (DWA)
1702   0625                     DB 'OUT'                        ;ADDED OUT CMD
tinybasic_2_5g_p2.ASM line 1702: unrecognized instruction.          (DB)
1703   0625                     DWA OUTB
tinybasic_2_5g_p2.ASM line 1703: unrecognized instruction.          (DWA)
1704   0625                     DB 'PEEK'                       ;ADDED PEEK
tinybasic_2_5g_p2.ASM line 1704: unrecognized instruction.          (DB)
1705   0625                     DWA PEEK
tinybasic_2_5g_p2.ASM line 1705: unrecognized instruction.          (DWA)
1706   0625                     DB 'POKE'                       ;ADDED POKE
tinybasic_2_5g_p2.ASM line 1706: unrecognized instruction.          (DB)
1707   0625                     DWA POKE
tinybasic_2_5g_p2.ASM line 1707: unrecognized instruction.          (DWA)
1708   0625                     DB 'PRINT'
tinybasic_2_5g_p2.ASM line 1708: unrecognized instruction.          (DB)
1709   0625                     DWA PRINT
tinybasic_2_5g_p2.ASM line 1709: unrecognized instruction.          (DWA)
1710   0625                     DB 'REM'
tinybasic_2_5g_p2.ASM line 1710: unrecognized instruction.          (DB)
1711   0625                     DWA REM
tinybasic_2_5g_p2.ASM line 1711: unrecognized instruction.          (DWA)
1712   0625                     DB 'RETURN'
tinybasic_2_5g_p2.ASM line 1712: unrecognized instruction.          (DB)
1713   0625                     DWA RETURN
tinybasic_2_5g_p2.ASM line 1713: unrecognized instruction.          (DWA)
1714   0625                     DB 'STOP'
tinybasic_2_5g_p2.ASM line 1714: unrecognized instruction.          (DB)
1715   0625                     DWA STOP
tinybasic_2_5g_p2.ASM line 1715: unrecognized instruction.          (DWA)
1716   0625                     DWA DEFLT
tinybasic_2_5g_p2.ASM line 1716: unrecognized instruction.          (DWA)
1717   0625             
1718   0625             TAB4:                                   ;FUNCTIONS
1719   0625                     DB 'ABS'
tinybasic_2_5g_p2.ASM line 1719: unrecognized instruction.          (DB)
1720   0625                     DWA ABS
tinybasic_2_5g_p2.ASM line 1720: unrecognized instruction.          (DWA)
1721   0625                     DB 'RND'
tinybasic_2_5g_p2.ASM line 1721: unrecognized instruction.          (DB)
1722   0625                     DWA RND
tinybasic_2_5g_p2.ASM line 1722: unrecognized instruction.          (DWA)
1723   0625                     DB 'SIZE'
tinybasic_2_5g_p2.ASM line 1723: unrecognized instruction.          (DB)
1724   0625                     DWA SIZE
tinybasic_2_5g_p2.ASM line 1724: unrecognized instruction.          (DWA)
1725   0625                     DWA XP40
tinybasic_2_5g_p2.ASM line 1725: unrecognized instruction.          (DWA)
1726   0625             TAB5:                                   ;"TO" IN "FOR"
1727   0625                     DB 'TO'
tinybasic_2_5g_p2.ASM line 1727: unrecognized instruction.          (DB)
1728   0625                     DWA FR1
tinybasic_2_5g_p2.ASM line 1728: unrecognized instruction.          (DWA)
1729   0625                     DWA QWHAT
tinybasic_2_5g_p2.ASM line 1729: unrecognized instruction.          (DWA)
1730   0625             TAB6:                                   ;"STEP" IN "FOR"
1731   0625                     DB 'STEP'
tinybasic_2_5g_p2.ASM line 1731: unrecognized instruction.          (DB)
1732   0625                     DWA FR2
tinybasic_2_5g_p2.ASM line 1732: unrecognized instruction.          (DWA)
1733   0625                     DWA FR3
tinybasic_2_5g_p2.ASM line 1733: unrecognized instruction.          (DWA)
1734   0625             TAB8:                                   ;RELATION OPERATORS
1735   0625                     DB '>='
tinybasic_2_5g_p2.ASM line 1735: unrecognized instruction.          (DB)
1736   0625                     DWA XP11
tinybasic_2_5g_p2.ASM line 1736: unrecognized instruction.          (DWA)
1737   0625                     DB '#'
tinybasic_2_5g_p2.ASM line 1737: unrecognized instruction.          (DB)
1738   0625                     DWA XP12
tinybasic_2_5g_p2.ASM line 1738: unrecognized instruction.          (DWA)
1739   0625                     DB '>'
tinybasic_2_5g_p2.ASM line 1739: unrecognized instruction.          (DB)
1740   0625                     DWA XP13
tinybasic_2_5g_p2.ASM line 1740: unrecognized instruction.          (DWA)
1741   0625                     DB '='
tinybasic_2_5g_p2.ASM line 1741: unrecognized instruction.          (DB)
1742   0625                     DWA XP15
tinybasic_2_5g_p2.ASM line 1742: unrecognized instruction.          (DWA)
1743   0625                     DB '<='
tinybasic_2_5g_p2.ASM line 1743: unrecognized instruction.          (DB)
1744   0625                     DWA XP14
tinybasic_2_5g_p2.ASM line 1744: unrecognized instruction.          (DWA)
1745   0625                     DB '<'
tinybasic_2_5g_p2.ASM line 1745: unrecognized instruction.          (DB)
1746   0625                     DWA XP16
tinybasic_2_5g_p2.ASM line 1746: unrecognized instruction.          (DWA)
1747   0625                     DWA XP17
tinybasic_2_5g_p2.ASM line 1747: unrecognized instruction.          (DWA)
1748   0625 21 24 06    DIRECT: LD HL,TAB1-1                   ;*** DIRECT ***
1749   0628             EXEC:                                   ;*** EXEC ***
1750   0628 EF          EX0:    RST 28H                         ;IGNORE LEADING BLANKS
1751   0629 D5                  PUSH DE                         ;SAVE POINTER
1752   062A             EX1:
1753   062A 1A                  LD A,(DE)                       ;IF FOUND '.' IN STRING
1754   062B 13                  INC DE                          ;BEFORE ANY MISMATCH
1755   062C FE 23               CP 23H                          ;WE DECLARE A MATCH
1756   062E 28 12               JR Z,EX3
1757   0630 23                  INC HL                          ;HL->TABLE
1758   0631 BE                  CP (HL)                         ;IF MATCH, TEST NEXT
1759   0632 28 F6               JR Z,EX1
1760   0634 3E 7F               LD A,7FH                        ;ELSE SEE IF BIT 7
1761   0636 1B                  DEC DE                          ;OF TABLE IS SET, WHICH
1762   0637 BE                  CP (HL)                         ;IS THE JUMP ADDR. (HI)
1763   0638 38 0E               JR C,EX5                        ;C:YES, MATCHED
1764   063A             EX2:
1765   063A 23                  INC HL                          ;NC:NO, FIND JUMP ADDR.
1766   063B BE                  CP (HL)
1767   063C 30 FC               JR NC,EX2
1768   063E 23                  INC HL                          ;BUMP TO NEXT TAB. ITEM
1769   063F D1                  POP DE                          ;RESTORE STRING POINTER
1770   0640 18 E6               JR EX0                          ;TEST AGAINST NEXT ITEM
1771   0642             EX3:
1772   0642 3E 7F               LD A,7FH                        ;PARTIAL MATCH, FIND
1773   0644             EX4:
1774   0644 23                  INC HL                          ;JUMP ADDR., WHICH IS
1775   0645 BE                  CP (HL)                         ;FLAGGED BY BIT 7
1776   0646 30 FC               JR NC,EX4
1777   0648             EX5:
1778   0648 7E                  LD A,(HL)                       ;LOAD HL WITH THE JUMP
1779   0649 23                  INC HL                          ;ADDRESS FROM THE TABLE
1780   064A 6E                  LD L,(HL)
1781   064B E6 7F               AND 7FH                         ;MASK OFF BIT 7
1782   064D 67                  LD H,A
1783   064E F1                  POP AF                          ;CLEAN UP THE GABAGE
1784   064F E9                  JP (HL)                         ;AND WE GO DO IT
1785   0650             
1786   0650             
1787   0650             ;*************************************************************
1788   0650             ;  *** TinyBASIC Expansion ***
1789   0650             ;
1790   0650             ;   *** QUIT *** INB *** OUTB *** CLSB ***
1791   0650             ;   *** DELAYB *** PEEK *** POKE ***
1792   0650             ;
1793   0650             ;  INB IS THE ROUTINE FOR READING THE VALUE OF A PORT AND
1794   0650             ;   ASSIGNING IT TO A VARIABLE.
1795   0650             ;
1796   0650             ;  OUTB IS THE ROUTINE FOR READIGN THE VALUE OF A VARIABLE AND
1797   0650             ;   WRITING IT TO A HARDWARE PORT.
1798   0650             ;
1799   0650             ;  CLSB IS A ROUTINE TO CLEAR THE SCREEN.
1800   0650             ;
1801   0650             ;  DELAYB IS A ROUTINE DESIGNED TO GIVE APPROXIMATELY 2ms DELAY
1802   0650             ;   AT 6MHZ.
1803   0650             ;
1804   0650             ;  PEEK IS A ROUTINE TO READ THE VALUE OF A MEMORY LOCATION
1805   0650             ;   AND STORE THAT VALUE IN A VARIABLE.
1806   0650             ;
1807   0650             ;  POKE IS A ROUTINE USED TO READ A VARIABLE, AND WRITE THE
1808   0650             ;   INFORMATION INTO A MEMORY LOCATION.
1809   0650             ;
1810   0650             ;  CALL_MCODE IS A ROUTINE TO EXECUTE MACHINE CODE, AND CAN
1811   0650             ;    RETURN A TWO BYTE VARIABLE BACK TO 'HL'.
1812   0650             ;*************************************************************
1813   0650             
1814   0650             INB:                                    ;'IN' ROUTINE
1815   0650 F5                  PUSH AF                         ;SAVE THE REGISTERS
1816   0651 C5                  PUSH BC
1817   0652             INB2:
1818   0652 13                  INC DE
1819   0653 1A                  LD A,(DE)
tinybasic_2_5g_p2.ASM line 1820: Label not found: (SPACE)
tinybasic_2_5g_p2.ASM line 1820: Unused data in MS byte of argument. (200)
1820   0654 06 00               LD B,SPACE
1821   0656 B8                  CP B
1822   0657 28 F9               JR Z,INB2                      ;IF IT'S NOT A SPACE GET THE LOCATION
1823   0659             INB3:
1824   0659 CD 8F 07            CALL GET_HEX
1825   065C 4F                  LD C,A                          ;PORT IS NOW IN 'C'.
1826   065D             INB4:
1827   065D 13                  INC DE
1828   065E 1A                  LD A,(DE)
1829   065F 06 2C               LD B,','                        ; COMPARE COMA
1830   0661 B8                  CP B
1831   0662 28 F9               JR Z,INB4
1832   0664 06 20               LD B,' '                        ; COMPARE SPACE
1833   0666 B8                  CP B
1834   0667 28 F4               JR Z,INB4
1835   0669 06 3D               LD B,'='
1836   066B B8                  CP B
1837   066C 28 EF               JR Z,INB4
1838   066E             
1839   066E 06 40               LD B,40H                        ;IF NOT IT IS VARIABLE
1840   0670 90                  SUB B                           ;ADJUST FOR MEMORY LOCATION
1841   0671             
tinybasic_2_5g_p2.ASM line 1842: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 1842: Unused data in MS byte of argument. (2)
1842   0671 21 00 00            LD HL,VARBGN                    ;COMPUTE ADDRESS OF
1843   0674 07                  RLCA                            ;THAT VARIABLE
1844   0675 85                  ADD A,L                         ;AND RETURN IT IN HL
1845   0676 6F                  LD L,A                          ;WITH C FLAG CLEARED
1846   0677 3E 00               LD A,00H
1847   0679 8C                  ADC A,H
1848   067A 67                  LD H,A
1849   067B             
1850   067B ED 78               IN A,(C)                        ;GET BYTE
1851   067D 77                  LD (HL),A                       ;STORE IT IN THE VARIALBLE LOCATION
1852   067E 23                  INC HL                          ;PAD THE EXTRA MEMORY LOCATION
1853   067F 36 00               LD (HL),00H
1854   0681             
1855   0681 13                  INC DE
1856   0682 C1                  POP BC                          ;RESTORE THE REGISTERS
1857   0683 F1                  POP AF
1858   0684 C3 38 01            JP RUNSML                       ;NEXT LINE
1859   0687             ;-------------------------------------------------------------------------------
1860   0687             OUTB:                                   ;'OUT' ROUTINE
1861   0687 F5                  PUSH AF
1862   0688 C5                  PUSH BC
1863   0689             OUTB2:
1864   0689 13                  INC DE
1865   068A 1A                  LD A,(DE)
tinybasic_2_5g_p2.ASM line 1866: Label not found: (SPACE)
tinybasic_2_5g_p2.ASM line 1866: Unused data in MS byte of argument. (200)
1866   068B 06 00               LD B,SPACE
1867   068D B8                  CP B
1868   068E 28 F9               JR Z,OUTB2
1869   0690             OUTB3:
1870   0690 CD 8F 07            CALL GET_HEX
1871   0693 F5                  PUSH AF                         ;PORT IS IN THE STACK
1872   0694             OUTB4:
1873   0694 13                  INC DE
1874   0695 1A                  LD A,(DE)
1875   0696 06 2C               LD B,','                        ; COMPARE COMA
1876   0698 B8                  CP B
1877   0699 28 F9               JR Z,OUTB4
1878   069B 06 20               LD B,' '                        ; COMPARE SPACE
1879   069D B8                  CP B
1880   069E 28 F4               JR Z,OUTB4
1881   06A0 06 3D               LD B,'='
1882   06A2 B8                  CP B
1883   06A3 28 EF               JR Z,OUTB4
1884   06A5             
1885   06A5 06 40               LD B,40H                        ;IF NOT IT IS VARIABLE
1886   06A7 90                  SUB B                           ;ADJUST FOR MEMORY LOCATION
1887   06A8             
tinybasic_2_5g_p2.ASM line 1888: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 1888: Unused data in MS byte of argument. (2)
1888   06A8 21 00 00            LD HL,VARBGN                    ;COMPUTE ADDRESS OF
1889   06AB 07                  RLCA                            ;THAT VARIABLE
1890   06AC 85                  ADD A,L                         ;AND RETURN IT IN HL
1891   06AD 6F                  LD L,A                          ;WITH C FLAG CLEARED
1892   06AE 3E 00               LD A,00H
1893   06B0 8C                  ADC A,H
1894   06B1 67                  LD H,A                          ;VARIABLE LOCATION IN HL
1895   06B2             
1896   06B2 F1                  POP AF                          ;PORT BACK IN 'A'
1897   06B3 4F                  LD C,A                          ;PORT IS NOW IN C
1898   06B4 7E                  LD A,(HL)                       ;Load the value from memory into 'A'
1899   06B5             
1900   06B5 ED 79               OUT (C),A                       ;WRITE THE BYTE TO THE PORT
1901   06B7             
1902   06B7 C1                  POP BC                          ;RESTORE REGISTERS
1903   06B8 F1                  POP AF
1904   06B9             
1905   06B9 13                  INC DE
1906   06BA C3 38 01            JP RUNSML
1907   06BD             ;-------------------------------------------------------------------------------
1908   06BD             
1909   06BD             CLSB:                                   ;CLS ROUTINE FOR BASIC
1910   06BD F5                  PUSH AF
1911   06BE C5                  PUSH BC
1912   06BF D5                  PUSH DE
1913   06C0 11 CD 06            LD DE,CLSB_MSG
1914   06C3 CD F1 04            CALL PRTSTG
1915   06C6 D1                  POP DE
1916   06C7 C1                  POP BC
1917   06C8 F1                  POP AF
1918   06C9 13                  INC DE
1919   06CA C3 28 01            JP RUNNXL
1920   06CD             CLSB_MSG:
1921   06CD                     DB      ESC,"[2J",ESC,"[H",CR
tinybasic_2_5g_p2.ASM line 1921: unrecognized instruction.          (DB)
1922   06CD             ;-------------------------------------------------------------------------------
1923   06CD             
1924   06CD             DELAYB:
1925   06CD F5                  PUSH AF
1926   06CE C5                  PUSH BC
1927   06CF D5                  PUSH DE
1928   06D0 E5                  PUSH HL
1929   06D1             
1930   06D1 CD CA 07            CALL MILLI_DLY
1931   06D4 E1                  POP HL
1932   06D5 D1                  POP DE
1933   06D6 C1                  POP BC
1934   06D7 F1                  POP AF
1935   06D8 13                  INC DE
1936   06D9 C3 28 01            JP RUNNXL
1937   06DC             ;-------------------------------------------------------------------------------
1938   06DC             PEEK:
1939   06DC F5                  PUSH AF                         ;SAVE THE REGISTERS
1940   06DD C5                  PUSH BC
1941   06DE             PEEK2:
1942   06DE 13                  INC DE
1943   06DF 1A                  LD A,(DE)
tinybasic_2_5g_p2.ASM line 1944: Label not found: (SPACE)
tinybasic_2_5g_p2.ASM line 1944: Unused data in MS byte of argument. (200)
1944   06E0 06 00               LD B,SPACE
1945   06E2 B8                  CP B
1946   06E3 28 F9               JR Z,PEEK2                      ;IF IT'S NOT A SPACE GET THE LOCATION
1947   06E5             PEEK3:
1948   06E5 CD 8F 07            CALL GET_HEX
1949   06E8 67                  LD H,A
1950   06E9 13                  INC DE
1951   06EA CD 8F 07            CALL GET_HEX
1952   06ED 6F                  LD L,A                          ;MEMORY LOCATION IN 'HL' NOW.
1953   06EE 7E                  LD A,(HL)                       ;GET THE BYTE FROM MEMORY.
1954   06EF F5                  PUSH AF                         ;NOW STORE THE BYTE ON THE STACK.
1955   06F0             PEEK4:
1956   06F0 13                  INC DE
1957   06F1 1A                  LD A,(DE)
1958   06F2 06 2C               LD B,','                        ; COMPARE COMA
1959   06F4 B8                  CP B
1960   06F5 28 F9               JR Z,PEEK4
1961   06F7 06 20               LD B,' '                        ; COMPARE SPACE
1962   06F9 B8                  CP B
1963   06FA 28 F4               JR Z,PEEK4
1964   06FC 06 3D               LD B,'='
1965   06FE B8                  CP B
1966   06FF 28 EF               JR Z,PEEK4
1967   0701             
1968   0701 06 40               LD B,40H                        ;IF NOT IT IS VARIABLE
1969   0703 90                  SUB B                           ;ADJUST FOR MEMORY LOCATION
1970   0704             
tinybasic_2_5g_p2.ASM line 1971: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 1971: Unused data in MS byte of argument. (2)
1971   0704 21 00 00            LD HL,VARBGN                    ;COMPUTE ADDRESS OF
1972   0707 07                  RLCA                            ;THAT VARIABLE
1973   0708 85                  ADD A,L                         ;AND RETURN IT IN HL
1974   0709 6F                  LD L,A                          ;WITH C FLAG CLEARED
1975   070A 3E 00               LD A,00H
1976   070C 8C                  ADC A,H
1977   070D 67                  LD H,A
1978   070E             
1979   070E F1                  POP AF                          ;RESTORE THE BYTE FROM THE STACK
1980   070F 77                  LD (HL),A                       ;STORE IT IN THE VARIALBLE LOCATION
1981   0710 23                  INC HL                          ;PAD THE EXTRA MEMORY LOCATION
1982   0711 36 00               LD (HL),00H
1983   0713             
1984   0713 13                  INC DE
1985   0714 C1                  POP BC                          ;RESTORE THE REGISTERS
1986   0715 F1                  POP AF
1987   0716 C3 38 01            JP RUNSML                       ;NEXT LINE
1988   0719             ;-------------------------------------------------------------------------------
1989   0719             
1990   0719             POKE:                                   ;POKE ROUTINE
1991   0719 F5                  PUSH AF
1992   071A C5                  PUSH BC
1993   071B             POKE2:
1994   071B 13                  INC DE
1995   071C 1A                  LD A,(DE)
tinybasic_2_5g_p2.ASM line 1996: Label not found: (SPACE)
tinybasic_2_5g_p2.ASM line 1996: Unused data in MS byte of argument. (200)
1996   071D 06 00               LD B,SPACE
1997   071F B8                  CP B
1998   0720 28 F9               JR Z,POKE2
1999   0722             POKE3:
2000   0722 CD 8F 07            CALL GET_HEX
2001   0725 67                  LD H,A
2002   0726 13                  INC DE
2003   0727 CD 8F 07            CALL GET_HEX
2004   072A 6F                  LD L,A                          ;LOCATION NOW 'HL'
2005   072B E5                  PUSH HL                         ;STORE LOCATION IN STACK.
2006   072C             
2007   072C             POKE4:
2008   072C 13                  INC DE
2009   072D 1A                  LD A,(DE)
2010   072E 06 2C               LD B,','                        ; COMPARE COMA
2011   0730 B8                  CP B
2012   0731 28 F9               JR Z,POKE4
2013   0733 06 20               LD B,' '                        ; COMPARE SPACE
2014   0735 B8                  CP B
2015   0736 28 F4               JR Z,POKE4
2016   0738 06 3D               LD B,'='
2017   073A B8                  CP B
2018   073B 28 EF               JR Z,POKE4
2019   073D 06 28               LD B,'('                        ;IS IT HEX?
2020   073F B8                  CP B
2021   0740 28 16               JR Z,POKE5
2022   0742             
2023   0742 06 40               LD B,40H                        ;IF NOT IT IS VARIABLE
2024   0744 90                  SUB B                           ;ADJUST FOR MEMORY LOCATION
2025   0745             
tinybasic_2_5g_p2.ASM line 2026: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 2026: Unused data in MS byte of argument. (2)
2026   0745 21 00 00            LD HL,VARBGN                    ;COMPUTE ADDRESS OF
2027   0748 07                  RLCA                            ;THAT VARIABLE
2028   0749 85                  ADD A,L                         ;AND RETURN IT IN HL
2029   074A 6F                  LD L,A                          ;WITH C FLAG CLEARED
2030   074B 3E 00               LD A,00H
2031   074D 8C                  ADC A,H
2032   074E 67                  LD H,A                          ;VARIABLE LOCATION IN HL
2033   074F             
2034   074F                     ;POP AF                          ;PORT BACK IN 'A'
2035   074F                     ;LD C,A                          ;PORT IS NOW IN C
2036   074F 7E                  LD A,(HL)                       ;Load the value from memory into 'A'
2037   0750             
2038   0750 E1                  POP HL                          ;GET THE MEMORY LOCATION BACK
2039   0751 77                  LD (HL),A
2040   0752                     ;OUT (C),A                       ;WRITE THE BYTE TO THE PORT
2041   0752             
2042   0752 C1                  POP BC                          ;RESTORE REGISTERS
2043   0753 F1                  POP AF
2044   0754             
2045   0754 13                  INC DE
2046   0755 C3 38 01            JP RUNSML
2047   0758             POKE5:
2048   0758 13                  INC DE                          ;NEXT CHARACTER
2049   0759 1A                  LD A,(DE)
2050   075A 06 29               LD B,')'                        ;IS IT THE END OF HEX?
2051   075C B8                  CP B
2052   075D 28 09               JR Z,POKE6                      ;IF SO, GO TO END
2053   075F CD 8F 07            CALL GET_HEX                    ;IF NOT, GET THE VALUE AND WRITE
2054   0762 E1                  POP HL
2055   0763 77                  LD (HL),A
2056   0764 23                  INC HL                          ;NEXT LOCATION TO WRITE
2057   0765 E5                  PUSH HL                         ;STORE THE LOCATION
2058   0766 18 F0               JR POKE5                        ;NEXT BYTE.
2059   0768             POKE6:
2060   0768 C1                  POP BC
2061   0769 F1                  POP AF
2062   076A 13                  INC DE
2063   076B C3 38 01            JP RUNSML
2064   076E             ;-------------------------------------------------------------------------------
2065   076E             
2066   076E             CALL_MCODE:
2067   076E F5                  PUSH AF
2068   076F C5                  PUSH BC
2069   0770 E5                  PUSH HL
2070   0771             CALL2:
2071   0771 13                  INC DE
2072   0772 1A                  LD A,(DE)
tinybasic_2_5g_p2.ASM line 2073: Label not found: (SPACE)
tinybasic_2_5g_p2.ASM line 2073: Unused data in MS byte of argument. (200)
2073   0773 06 00               LD B,SPACE
2074   0775 B8                  CP B
2075   0776 28 F9               JR Z,CALL2
2076   0778             CALL3:
2077   0778 21 87 07            LD HL,CALL5                     ;SET RETURN VECTOR - I THINK...
2078   077B E5                  PUSH HL                         ;PLACE IT ON THE STACK FOR RETURN...
2079   077C             
2080   077C CD 8F 07            CALL GET_HEX
2081   077F 67                  LD H,A
2082   0780 13                  INC DE
2083   0781 CD 8F 07            CALL GET_HEX
2084   0784 6F                  LD L,A                          ;LOCATION NOW 'HL'
2085   0785             CALL4:
2086   0785 D5                  PUSH DE                         ;SAVE CURRENT DE LOCATION.
2087   0786 E9                  JP (HL)
2088   0787             CALL5:
2089   0787 E1                  POP HL
2090   0788 D1                  POP DE                          ;KEEPS RETURNING 'WHAT?' ERROR....
2091   0789 C1                  POP BC
2092   078A F1                  POP AF
2093   078B 13                  INC DE
2094   078C C3 38 01            JP RUNSML
2095   078F             
2096   078F             ;-------------------------------------------------------------------------------
2097   078F             GET_HEX:
2098   078F 1A                  LD A,(DE)
2099   0790 47                  LD B,A
2100   0791 13                  INC DE
2101   0792 1A                  LD A,(DE)
2102   0793 4F                  LD C,A
2103   0794 D5                  PUSH DE                         ;SAVE DE LOCATION
2104   0795 50                  LD D,B                          ;SEND THE ASCII TO CONVERT
2105   0796 59                  LD E,C
2106   0797 CD 9C 07            CALL ASCIIHEX_TO_BYTE           ;BYTE IS RETURNED IN 'A'
2107   079A D1                  POP DE
2108   079B C9                  RET
2109   079C             
2110   079C             ASCIIHEX_TO_BYTE:
2111   079C C5                  PUSH BC                 ;SAVE REGISTERS
2112   079D 7A                  LD A,D                  ;LOAD UPPER CHARACTER
2113   079E CD AD 07            CALL CONVERT_HEX_VAL    ;CONVERT THE CHARACTER
2114   07A1 17                  RLA
2115   07A2 17                  RLA
2116   07A3 17                  RLA
2117   07A4 17                  RLA
2118   07A5 47                  LD B,A                  ;STORE THE FIRST NIBBLE
2119   07A6 7B                  LD A,E                  ;GET SECOND CHARACTER
2120   07A7 CD AD 07            CALL CONVERT_HEX_VAL    ;CONVERT THE CHARACTER
2121   07AA 80                  ADD A,B                 ;ADD THE TWO NIBBLES
2122   07AB C1                  POP BC
2123   07AC C9                  RET
2124   07AD             ; CONVERTS THE ASCII CHARACTER IN A TO IT'S HEX VALUE IN A, ERROR RETURNS 0FFH
2125   07AD             CONVERT_HEX_VAL:
2126   07AD FE 47               CP 'G'                  ;GREATER THAN "F"
2127   07AF F2 C7 07            JP P,CONVERT_HEX_ERROR    ;IF SO, ERROR.
2128   07B2 FE 30               CP '0'                  ;LESS THAN "ZERO"
2129   07B4 FA C7 07            JP M,CONVERT_HEX_ERROR    ;IF SO, ERROR.
2130   07B7 FE 3A               CP 03AH                 ;LESS THAN OR EQUAL TO "9"
2131   07B9 FA C4 07            JP M,CONVERT_MASK         ;IF SO, CONVERT AND RETURN.
2132   07BC FE 41               CP 'A'                  ;LESS THAN "A"
2133   07BE FA C7 07            JP M,CONVERT_HEX_ERROR    ;IF SO, ERROR.
2134   07C1 D6 37               SUB 037H                ;MUST BE "A" TO "F", CONVERT.
2135   07C3 C9                  RET
2136   07C4             CONVERT_MASK:
2137   07C4 E6 0F               AND 0FH
2138   07C6 C9                  RET
2139   07C7             CONVERT_HEX_ERROR:
2140   07C7 3E FF               LD A,0FFH               ;IF ERROR, RETURN 0FFH
2141   07C9 C9                  RET
2142   07CA             ;-------------------------------------------------------------------------------
2143   07CA             MILLI_DLY:                      ;DELAY 1 MILLISECOND @ 6MHZ (ESTIMATED)
2144   07CA F5                  PUSH AF                 ;       THERE IS NO WAY TO REALLY CALCULATE
2145   07CB C5                  PUSH BC                 ;       THIS, AS THE INTERPRETER TAKES TIME.
2146   07CC 01 73 00            LD  BC,0073H           ; 6006 INSTRUCTIONS
2147   07CF             MILLI_DLYL:
2148   07CF 0B          	DEC BC
2149   07D0 79          	LD  A,C
2150   07D1 B0          	OR  B
2151   07D2 20 FB       	JR  NZ,MILLI_DLYL
2152   07D4 C1                  POP BC
2153   07D5 F1                  POP AF
2154   07D6 C9          	RET
2155   07D7             ;-------------------------------------------------------------------------------
2156   07D7             HELP_CMDS:
2157   07D7 F5                  PUSH AF
2158   07D8 C5                  PUSH BC
2159   07D9 D5                  PUSH DE
2160   07DA 11 11 08            LD DE,HELP_CMD_MSG1
2161   07DD CD F1 04            CALL PRTSTG
2162   07E0 11 11 08            LD DE,HELP_CMD_MSG2
2163   07E3 CD F1 04            CALL PRTSTG
2164   07E6 11 11 08            LD DE,HELP_CMD_MSG3
2165   07E9 CD F1 04            CALL PRTSTG
2166   07EC 11 11 08            LD DE,HELP_CMD_MSG4
2167   07EF CD F1 04            CALL PRTSTG
2168   07F2 11 11 08            LD DE,HELP_CMD_MSG5
2169   07F5 CD F1 04            CALL PRTSTG
2170   07F8 11 11 08            LD DE,HELP_CMD_MSG6
2171   07FB CD F1 04            CALL PRTSTG
2172   07FE 11 11 08            LD DE,HELP_CMD_MSG7
2173   0801 CD F1 04            CALL PRTSTG
2174   0804 11 11 08            LD DE,HELP_CMD_MSG8
2175   0807 CD F1 04            CALL PRTSTG
2176   080A D1                  POP DE
2177   080B C1                  POP BC
2178   080C F1                  POP AF
2179   080D 13                  INC DE
2180   080E                     ;JP RUNSML
2181   080E C3 28 01            JP RUNNXL
2182   0811             HELP_CMD_MSG1:
2183   0811                     DB      LF,LF,TAB,'TinyBASIC 2.5g Expanded Instructions',LF,LF,CR
tinybasic_2_5g_p2.ASM line 2183: unrecognized instruction.          (DB)
2184   0811             HELP_CMD_MSG2:
2185   0811                     DB      TAB,'OUT PP,V',LF,CR
tinybasic_2_5g_p2.ASM line 2185: unrecognized instruction.          (DB)
2186   0811             HELP_CMD_MSG3:
2187   0811                     DB      TAB,'IN PP,V',LF,CR
tinybasic_2_5g_p2.ASM line 2187: unrecognized instruction.          (DB)
2188   0811             HELP_CMD_MSG4:
2189   0811                     DB      TAB,'POKE AAAA,V',LF,CR
tinybasic_2_5g_p2.ASM line 2189: unrecognized instruction.          (DB)
2190   0811             HELP_CMD_MSG5:
2191   0811                     DB      TAB,'PEEK AAAA,V',LF,CR
tinybasic_2_5g_p2.ASM line 2191: unrecognized instruction.          (DB)
2192   0811             HELP_CMD_MSG6:
2193   0811                     DB      TAB,'DELAY',LF,CR
tinybasic_2_5g_p2.ASM line 2193: unrecognized instruction.          (DB)
2194   0811             HELP_CMD_MSG7:
2195   0811                     DB      TAB,'CLS',LF,LF,LF,CR
tinybasic_2_5g_p2.ASM line 2195: unrecognized instruction.          (DB)
2196   0811             HELP_CMD_MSG8:
2197   0811                     DB      TAB,'PP=HEX PORT    AAAA=HEX ADDR    V=VARIABLE',LF,LF,CR
tinybasic_2_5g_p2.ASM line 2197: unrecognized instruction.          (DB)
2198   0811             ;-------------------------------------------------------------------------------
2199   0811             ;///////////////////////////////////////////////////////////////////////////////
2200   0811             ;-------------------------------------------------------------------------------
2201   0811             ;COMPUTER SPECIFIC ROUTINES.
2202   0811             ;-------------------------------------------------------------------------------
2203   0811             SERIAL_INIT:
2204   0811             
2205   0811             	; This routine is for initializing your serial port.
2206   0811             
2207   0811 C9                  RET
2208   0812             ;-------------------------------------------------------------------------------
2209   0812             TX_RDY:
2210   0812             
2211   0812             	; This routine is checking if the Serial Port is ready to send
2212   0812             	; a character.
2213   0812             	
2214   0812 C9          	RET
2215   0813                     
2216   0813             ;-------------------------------------------------------------------------------
2217   0813             RX_RDY:
2218   0813             
2219   0813             	; This routine is for checkif if a character is available over
2220   0813             	; serial. If a character is available, it returns to the calling
2221   0813             	; function with the character in 'A' and the Z-flag reset.
2222   0813             	; However, if a character is not available, it returns with the
2223   0813             	; Z-flag set.
2224   0813             
2225   0813 C9                  RET
2226   0814             ;-------------------------------------------------------------------------------
2227   0814             ;///////////////////////////////////////////////////////////////////////////////
2228   0814             ;-------------------------------------------------------------------------------
2229   0814             ;
2230   0814             LSTROM:                                 ;ALL ABOVE CAN BE ROM
2231   0814             ;       ORG  1000H                      ;HERE DOWN MUST BE RAM
2232   0814                     ORG  08000H
tinybasic_2_5g_p2.ASM line 2232: unrecognized instruction.          (ORG)
2233   0814                     ORG  0FF00H
tinybasic_2_5g_p2.ASM line 2233: unrecognized instruction.          (ORG)
2234   0814             VARBGN: DS   55                         ;VARIABLE @(0)
tinybasic_2_5g_p2.ASM line 2234: Label not found: (VARBGN)
tinybasic_2_5g_p2.ASM line 2234: label value misalligned.           (VARBGN)
tinybasic_2_5g_p2.ASM line 2234: unrecognized instruction.          (VARBGN)
2235   0814             BUFFER: DS   64                         ;INPUT BUFFER
tinybasic_2_5g_p2.ASM line 2235: Label not found: (BUFFER)
tinybasic_2_5g_p2.ASM line 2235: label value misalligned.           (BUFFER)
tinybasic_2_5g_p2.ASM line 2235: unrecognized instruction.          (BUFFER)
2236   0814             BUFEND: DS   1                          ;BUFFER ENDS
tinybasic_2_5g_p2.ASM line 2236: Label not found: (BUFEND)
tinybasic_2_5g_p2.ASM line 2236: label value misalligned.           (BUFEND)
tinybasic_2_5g_p2.ASM line 2236: unrecognized instruction.          (BUFEND)
2237   0814             STKLMT: DS   1                          ;TOP LIMIT FOR STACKB
tinybasic_2_5g_p2.ASM line 2237: Label not found: (STKLMT)
tinybasic_2_5g_p2.ASM line 2237: label value misalligned.           (STKLMT)
tinybasic_2_5g_p2.ASM line 2237: unrecognized instruction.          (STKLMT)
2238   0814             
2239   0814                             ORG 02000H
tinybasic_2_5g_p2.ASM line 2239: unrecognized instruction.          (ORG)
2240   0814             
 line 2240: No END directive before EOF.       
tasm: Number of errors = 461
