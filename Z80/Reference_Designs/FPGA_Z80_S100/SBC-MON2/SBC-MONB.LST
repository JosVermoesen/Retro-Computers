Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
SBC-MONBZ80

    1                   ;	SBC-MON2.Z80  This is a stripped down version of the main MASTER-Z80 (and SBC-MON.Z80 monitor) programs 
    2                   ;	for use with the S100 bus Z80-FPGA SBC. It will not work with other Z80 CPU Boards without modifications.
    3                   ; 
    4                   ;	Assemble and SLR's Z80ASM Assembler (Can also use the Cromemco Assembler)
    5                   ;	Use:- Z80ASM SBC-MON FH
    6                   ;
    7                   ;	NOTE. This board utilizes an 8K 28C64 EEPROM (or 27C64 UV-ROM). 
    8                   ;
    9                   ;	To assemble under windows...
   10                   ;	Load Altair.EXE in Windows CMD box
   11                   ;	do cpm3
   12                   ;	I:
   13                   ;	I:>Submit SBC-MON
   14                   ;
   15                   ;	SBC-MON2.HEX  is written back to the same windows folder that the PC file "altair.exe" is in.
   16                   
   17                   ;	Programming an EEPROM for the SBC-Z80 Board with a PROM burner is fairly straightfoward. 
   18                   ;	Using a 28C64 EEPROM and a Wellon VP-280 or VP290 Programmer
   19                   ;	For a monitor at E000H-FFFFH:-
   20                   
   21                   ;	Make sure the ORG is F000H (BASE_ROM).
   22                   ;	Load the SBC-MON2.HEX file
   23                   ;	Clear Buffer Options:- 00
   24                   ;	Load Buffer Address : 0000
   25                   ;	From File address use:- E000H
   26                   ;	File Size use:- 2000H
   27                   ;
   28                   ;	Recent History...
   29                   ;
   30                   ;	V1.0	4/30/2019	Started with the modified MASTER.Z80 V5.1 Monitor. Removed the page switching menu option.
   31                   ;	V1.01	7/20/2019	Added printer output
   32                   ;
   33                   ;
   34         0000      FALSE		EQU	0
   35         FFFF      TRUE		EQU	NOT FALSE
   36                   ;
   37                   ;--------------------------------------------------------
   38                   ;        IDE Routines           E000-EFFFH
   39                   ;        MONITOR Routines       F000-FFFFH
   40                   ;        Start Monitor by jumping to F000H (not E000H)
   41                   ;--------------------------------------------------------
   42                   ;
   43                   ;
   44         F000      MONITOR_BASE	EQU	0F000H		;Start of monitor after a reset								
   45         C000      RAM_BASE	EQU	0C000H		;Default location of RAM buffer area for IDE/CF card diagnostic routines
   46                   					;Can be changed with "D" IDE menu command
   47                   					
   48         0001      SCROLL		EQU	01H		;Set scroll direction UP.
   49         0007      BELL		EQU	07H
   50         0020      SPACE		EQU	20H
   51         0009      TAB		EQU	09H		;TAB ACROSS (8 SPACES FOR SD-BOARD)
   52         000D      CR		EQU	0DH
   53         000A      LF		EQU	0AH
   54         000C      FF		EQU	0CH
   55         0011      QUIT		EQU	11H		;Turns off any screen enhancements (flashing, underline etc).
   56         0017      NO_ENH		EQU 	17H		;Turns off whatever is on
   57         0010      FAST		EQU	10H		;High speed scroll
   58         001B      ESC		EQU	1BH
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
SBC-MONBZ80

   59         007F      DELETE		EQU	7FH
   60         0008      BACKS		EQU	08H
   61         001A      CLEAR		EQU	1AH		;TO CLEAR SCREEN
   62         0038      RST7		EQU	38H		;RST 7 (LOCATION FOR TRAP)
   63         0000      NN		EQU	0H		;[I] INITIAL VALUE
   64         0001      SOH		EQU	1		;For XModem etc.
   65         0004      EOT		EQU	4
   66         0006      ACK		EQU	6
   67         0015      NAK		EQU	15H
   68                   ;
   69                   
   70                   ; BIT MAP OF IOBYTE BASE_PORT + 6H:- X X X X  X X X X  (if xxxxx111= 111 = CONSOLE IN/OUT DATA for all Console IO board
   71                   ;			             | | | |  | | | |..............  110 = will use onboard USB chip for ALL Console I/O
   72                   ;			             | | | |  | | |................  x0x = will force/override onboard FPGA code to PS2 keyboard input 
   73                   ;			             | | | |  | |..................  0xx = will force/override VGA for Console output
   74                   ;			             | | | |  |....................  Unused
   75                   ;			             | | | |.......................  Unused			
   76                   ;			             | | |.........................  Unused						
   77                   ;			             | |...........................  Unused
   78                   ;			     	     |.............................  Unused
   79                   ;
   80                   ;
   81                   
   82         0030      BASE_PORT	EQU	30H		;Note by using 30H we can use software already on CF-CARDS that
   83         0034      USB_STATUS_PORT	EQU	BASE_PORT+4H	;Status port for USB console input port
   84         0035      USB_DATA_PORT	EQU	BASE_PORT+5H	;Status port for USB console data port
   85         0036      IOBYTE		EQU	BASE_PORT+6H	;See above
   86                   
   87         0002      PS2_STATUS_PORT	EQU	02H		;PS2 Keyboard input port
   88         0003      PS2_DATA_PORT	EQU	03H
   89                   
   90         0006      DIAG_LEDS	EQU	06H		;LED BAR of FPGA Board (and LED Bar on V3 SMB if present)
   91         00EE      SW_TMAX		EQU	0EEH		;OUTPUT BIT 0 HIGH FROM THIS PORT LOWERS DMA0* on V3 SMB (if present)
   92                   					;OUTPUT BIT 1 HIGH FROM THIS PORT LOWERS DMA1* on V3 SMB (if present)
   93                   					;OUTPUT BIT 2 HIGH FROM THIS PORT LOWERS DMA2* on V3 SMB (if present)
   94                   					;OUTPUT BIT 3 HIGH FROM THIS PORT LOWERS DMA3* on V3 SMB (if present) 
   95         00ED      SW_TMA0	EQU	0EDH			;INPUT FROM THIS PORT LOWERS DMA0* (SWITCHES IN THE 8088,8086,80286 or 80386 boards)
   96                   
   97                   
   98                   					;Note these DMA lines are only used in master/slave changes. Not normally used here.
   99                   
  100         0036      RAM_BANK	EQU	36H		;Port to switch Low/High 32K RAM Page
  101         0007      ROM_PAGE	EQU	07H		;Inactivete part or all of onboard ROM
  102                   
  103         0004      PRINTER_STROBE	EQU	4		;PORT OUT
  104         0005      PRINTER_STATUS	EQU	5		;PORT IN, IMSAI PIO Board PARRELL PORT
  105         0005      PRINTER_OUT	EQU	5		;PORT OUT
  106                   
  107         00C0      VGA_CURSOR_X	EQU	0C0H		;Port to set VGA video cursor
  108         00C1      VGA_CURSOR_Y	EQU	0C1H
  109         00C2      VGA_COLOR	EQU	0C2H		;Port to set text color
  110                   
  111                   					;FOR S100 BUS 8259A (If Present)
  112         0020      MASTER_PIC_PORT	EQU	20h		;Hardware port the 8259A (two ports 20H & 21H)
  113         0017      MasterICW1	equ	00010111B	;EDGE triggered, 4 bytes, single Master,ICW4 needed
  114         0008      MasterICW2	equ	8H		;Base address for 8259A Int Table (IBM-PC uses 8X4 = 20H)
  115         0000      MasterICW3	equ	0H		;No slave
  116         0003      MasterICW4	equ	00000011B	;No special mode, non buffer, Auto EOI, 8086.  ;<<<<,
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
SBC-MONBZ80

  117                   
  118         0004      MODEM_SEND_MASK	EQU	4
  119         0004      SEND_READY	EQU	4		;VALUE WHEN READY
  120         0001      MODEM_RECV_MASK	EQU	1
  121         0001      RECV_READY	EQU	1		;BIT ON WHEN READY
  122         0008      MODEM_ERR_LIMIT	EQU	8		;Max number of Modem serial port re-reads aborting
  123         0001      MODEM_RTS_DELAY	EQU	1		;Time to check Modem RTS line (See XMODEM_LOAD & P_XMODEM_LOAD). Not critical.
  124                   
  125         0000      RECVD_SECT_NO	EQU	0H		;IX Offset for XModem Recieved Sector Number
  126         0001      SECTNO		EQU	1H		;IX Offset for XModem CURRENT SECTOR NUMBER 
  127         0002      ERRCT		EQU	2H		;IX Offset for XModem ERROR COUNT
  128                   					
  129                   ;****************************************************************************************************************
  130                   ;
  131                   ;		 EQUATES FOR OTHER POSSIBLE BOARDS IN THE S100 BUS SYSTEM
  132                   ;               (Note. If the board is not present the code will ignore the hardware)
  133                   ;
  134                   ;****************************************************************************************************************
  135                   
  136                   
  137                   ;-------------- S100Computers PROPELLER CONSOLE_IO (OR SD SYSTEMS VIDIO BOARD) FOR CONSOLE INPUT & OUTPUT
  138                   
  139         0000      S100_CONSOL_STATUS	EQU	0H	;Note will utilize this board if IOBYTE bits 0 & 1 are ZERO (or bit 5 is 1).	
  140         0001      S100_CONSOL_IN		EQU	1H
  141         0001      S100_CONSOL_OUT		EQU	1H
  142                   
  143                   ;-------------- S100Computers IDE HARD DISK CONTROLLER COMMANDS ETC. (for Z80_MONB.Z80) -------------------------------------
  144                   
  145         0030      IDEPORTA	EQU	030H		;Lower 8 bits of IDE interface (8255)
  146         0031      IDEPORTB	EQU	031H		;Upper 8 bits of IDE interface
  147         0032      IDEPORTC	EQU	032H		;Control lines for IDE interface
  148         0033      IDEPORTCTRL	EQU	033H		;8255 configuration port
  149                   
  150         0092      READCFG8255	EQU	10010010b	;Set 8255 IDEportC to output, IDEportA/B input
  151         0080      WRITECFG8255	EQU	10000000b	;Set all three 8255 ports to output mode
  152                   
  153                   ;IDE control lines for use with IDEportC.  
  154                   
  155         0001      IDEA0LINE	EQU	01H		;direct from 8255 to IDE interface
  156         0002      IDEA1LINE	EQU	02H		;direct from 8255 to IDE interface
  157         0004      IDEA2LINE	EQU	04H		;direct from 8255 to IDE interface
  158         0008      IDECS0LINE	EQU	08H		;inverter between 8255 and IDE interface
  159         0010      IDECS1LINE	EQU	10H		;inverter between 8255 and IDE interface
  160         0020      IDEWRLINE	EQU	20H		;inverter between 8255 and IDE interface
  161         0040      IDERDLINE	EQU	40H		;inverter between 8255 and IDE interface
  162         0080      IDERSTLINE	EQU	80H		;inverter between 8255 and IDE interface
  163                   
  164                   ;Symbolic constants for the IDE Drive registers, which makes the
  165                   ;code more readable than always specifying the address bits
  166                   
  167         0008      REGDATA	EQU	IDEcs0line
  168         0009      REGERR	EQU	IDEcs0line + IDEa0line
  169         000A      REGSECCNT	EQU	IDEcs0line + IDEa1line
  170         000B      REGSECTOR	EQU	IDEcs0line + IDEa1line + IDEa0line
  171         000C      REGCYLINDERLSB	EQU	IDEcs0line + IDEa2line
  172         000D      REGCYLINDERMSB	EQU	IDEcs0line + IDEa2line + IDEa0line
  173         000E      REGSHD	EQU	IDEcs0line + IDEa2line + IDEa1line			;(0EH)
  174         000F      REGCOMMAND	EQU	IDEcs0line + IDEa2line + IDEa1line + IDEa0line	;(0FH)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
SBC-MONBZ80

  175         000F      REGSTATUS	EQU	IDEcs0line + IDEa2line + IDEa1line + IDEa0line
  176         0016      REGCONTROL	EQU	IDEcs1line + IDEa2line + IDEa1line
  177         0017      REGASTATUS	EQU	IDEcs1line + IDEa2line + IDEa1line + IDEa0line
  178                   
  179                   ;IDE Command Constants.  These should never change.
  180                   
  181         0010      COMMANDrecal	EQU	10H
  182         0020      COMMANDread	EQU	20H
  183         0030      COMMANDwrite	EQU	30H
  184         0091      COMMANDinit	EQU	91H
  185         00EC      COMMANDid	EQU	0ECH
  186         00E0      COMMANDspindown	EQU	0E0H
  187         00E1      COMMANDspinup	EQU	0E1H
  188                   
  189                   
  190                   ; IDE Status Register:
  191                   ;  bit 7: Busy	1=busy, 0=not busy
  192                   ;  bit 6: Ready 1=ready for command, 0=not ready yet
  193                   ;  bit 5: DF	1=fault occured insIDE drive
  194                   ;  bit 4: DSC	1=seek complete
  195                   ;  bit 3: DRQ	1=data request ready, 0=not ready to xfer yet
  196                   ;  bit 2: CORR	1=correctable error occured
  197                   ;  bit 1: IDX	vendor specific
  198                   ;  bit 0: ERR	1=error occured
  199                   
  200         0200      SEC$SIZE	EQU	512		;Assume sector size as 512. (Not tested for other sizes)
  201         003D      MAXSEC		EQU	3DH		;Sectors per track for CF my Memory drive, Kingston CF 8G. (For CPM format, 0-3CH)
  202                   					;This translates to LBA format of 1 to 3D sectors, for a total of 61 sectors/track.
  203                   					;This CF card actully has 3F sectors/track. Will use 3D for my CPM3 system because
  204                   					;my Seagate drive has 3D sectors/track. Don't want different CPM3.SYS files around
  205                   					;so this program as is will also work with a Seagate 6531 IDE drive
  206                   
  207         00FF      MAXTRK		EQU	0FFH		;CPM3 allows up to 8MG so 0-256 "tracks"
  208         3000      BUFFER$ORG	EQU	3000H		;<----- Will place all sector data here
  209                   
  210         000C      CPM$BOOT$COUNT	EQU	12		;Allow up to 12 CPM sectors for CPMLDR
  211         0100      CPMLDR$ADDRESS	EQU	100H		;Load the CPMLDR at 100H in RAM 
  212                   
  213         0000      DEBUG EQU FALSE				;For a display of error codes returned from CF-Card drive
  214                   
  215                   
  216                   
  217                   ;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  218                   ;-------------------------------- START OF ACTUAL MONITOR @ FOOOH  --------------------------------------------------
  219                   ;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  220                   
  221                   
  222         F000      ORG		MONITOR_BASE		;<--------<<<<<< LOCATION OF START OF MONITOR, F000H >>>>>>>>>>>>>>>>>>>>>>
  223                   
  224 F000  C3 F045     	JP	IDE_LOOP
  225                   
  226                   ;----------------->>> THIS CODE MUST BE AT THE SAME LOCATION AS FOR THE LOW PAGE ROM CODE <<<---------
  227                   ;
  228 F003              ACTIVATE_1_HIGH_PAGE:			; SWITCH TO HIGH PAGE of ROM 
  229 F003  00          	NOP
  230 F004  00          	NOP
  231 F005  00          	NOP
  232 F006  00          	NOP
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
SBC-MONBZ80

  233 F007  C3 F016     	JP	HIGH_MENU_1_OPTION
  234                   
  235 F00A              ACTIVATE_2_HIGH_PAGE:			; SWITCH TO HIGH PAGE #2 of ROM
  236 F00A  00          	NOP
  237 F00B  00          	NOP
  238 F00C  00          	NOP
  239 F00D  00          	NOP
  240 F00E  C3 F024     	JP	INVALID_MENU_ERROR	
  241                   	
  242 F011              ACTIVATE_LOW_PAGE:			; RETURN BACK TO LOW PAGE (00) OF ROM
  243 F011  3E 00       	LD	A,00H			
  244 F013  D3 07       	OUT	(ROM_PAGE),A	
  245 F015  76          	HALT				; Will arrive here only IF no address line switch 
  246                   
  247                   ;----------------------->>> END OF COMMON CODE LOACTIONS <<<----------------------------------
  248                   ;
  249                   ;
  250 F016              HIGH_MENU_1_OPTION:
  251 F016  7A          	LD	A,D			; HIGH PAGE code with 1 in [D] for XMODEM
  252 F017  FE 01       	CP	A,1
  253 F019  CA F02D     	JP	Z,IDE_MENU
  254 F01C  FE 02       	CP	A,2
  255 F01E  CA F139     	JP	Z,CPM_BOOT
  256 F021  C3 F024     	JP	INVALID_MENU_ERROR	; The only menu options so far
  257                   	
  258 F024              INVALID_MENU_ERROR:
  259 F024  11 FD72     	LD      DE,MSGERR		; Point Error Message
  260 F027  CD F3F8     	CALL	PSTRING			; Print string
  261 F02A  C3 F011     	JP	ACTIVATE_LOW_PAGE
  262                   
  263 F02D              IDE_MENU:
  264 F02D  C3 F045     	JP	IDE_LOOP
  265                   	
  266 F030  CD F537     	call	IDEinit			;initialize the board and drive. If there is no drive abort
  267 F033  CA F045     	jp	z,IDE_LOOP		;Setup for main menu commands
  268 F036  11 F907     	ld	de,INIT$ERROR
  269 F039  CD F3F8     	call	PSTRING
  270 F03C  CD F40E     	call	SHOWerrors
  271 F03F  C3 F042     	jp	ABORT
  272                   
  273 F042  C3 F011     ABORT: 	jp	ACTIVATE_LOW_PAGE	;Else jump to start of monitor
  274                   
  275                   
  276 F045              IDE_LOOP:				;A 1 line prompt
  277 F045  11 F80A     	ld	de,SD_CARD_MENU_MSG		;List command options
  278 F048  CD F3F8     	call	PSTRING
  279                   
  280 F04B  CD F620     	call	wrlba			;Update LBA on drive
  281 F04E  CD F311     	call	DISPLAYposition		;Display current Track,sector,head#
  282                   
  283 F051  11 F9A2     	ld	de,Prompt		;'Please enter a command >'
  284 F054  CD F3F8     	call	PSTRING
  285                   
  286 F057  CD F4A1     	call	GETCMD			;Simple UC character Input (Note, no fancy checking)
  287 F05A  FE 1B       	cp	ESC			;ESC back to main menu
  288 F05C  CA F042     	jp	z,ABORT
  289 F05F  CD F4B3     	call	upper
  290 F062  CD F770     	call	CRLF
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
SBC-MONBZ80

  291                   	
  292 F065  FE 44       	cp	a,'D'
  293 F067  CA F698     	jp	z,SET_DMA		; "D"  SET BUFFER ADDRESS
  294 F06A  FE 4C       	cp	a,'L'
  295 F06C  CA F0F2     	jp	z,SET$LBA		; "L"  Set LBA value (Set Track,sector) 
  296 F06F  FE 4D       	cp	a,'M'
  297 F071  CA F125     	jp	z,PREV$SEC		; "M"  Previous sector
  298 F074  FE 4E       	cp	a,'N'
  299 F076  CA F107     	jp	z,NEXT$SECT		; "N"  Next Sector
  300 F079  FE 50       	cp	a,'P'
  301 F07B  CA F139     	JP	Z,CPM_BOOT		; "P"  Boot CPM
  302 F07E  FE 52       	cp	a,'R'
  303 F080  CA F09F     	jp	z,READ$SEC		; "R"  Read sector to data buffer
  304 F083  FE 53       	cp	a,'S'
  305 F085  CA F2AE     	jp	z,SEQ$RD		; "S"  Sequental sec read and display contents
  306 F088  FE 56       	cp	a,'V'
  307 F08A  CA F1B7     	jp	z,N$RD$SEC		; "V"  Read N sectors
  308 F08D  FE 57       	cp	a,'W'
  309 F08F  CA F0BD     	jp	z,WRITE$SEC		; "W"  Write data buffer to current sector
  310 F092  FE 58       	cp	a,'X'
  311 F094  CA F215     	jp	z,N$WR$SEC		; "X"  Write N sectors
  312 F097  FE 59       	cp	a,'Y'
  313 F099  CA F366     	JP	Z,SHOW$ID		; "y" Show CF Card Paramaters
  314 F09C  C3 F28B     	JP	IDE_ERROR
  315                   	
  316                   
  317 F09F              READ$SEC:				;Read Sector @ LBA to the RAM buffer
  318 F09F  2A DF00     	ld	hl,(@DMA)		;Point to buffer
  319 F0A2  CD F59E     	call	READSECTOR
  320 F0A5  CA F0AE     	jp	z,main1b		;Z means the sector read was OK
  321 F0A8  CD F770     	call	CRLF
  322 F0AB  C3 F045     	jp	IDE_LOOP
  323 F0AE  11 F9FB     main1b:	ld	de, msgrd		;Sector read OK
  324 F0B1  CD F3F8     	call	PSTRING
  325                   
  326 F0B4  2A DF00     	ld	HL,(@DMA)		;Point to buffer.
  327 F0B7  CD F4C4     	call	HEXDUMP			;Show sector data
  328 F0BA  C3 F045     	jp	IDE_LOOP
  329                   
  330 F0BD              WRITE$SEC:				;Write data in RAM buffer to sector @ LBA
  331 F0BD  11 F9B5     	ld	de,msgsure		;Are you sure?
  332 F0C0  CD F3F8     	call	PSTRING
  333 F0C3  CD F743     	call	ZCI
  334 F0C6  CD F4B3     	call	upper
  335 F0C9  4F          	LD	C,A			;Print response
  336 F0CA  CD F6D6     	CALL	ZCO
  337 F0CD  FE 59       	CP	'Y'
  338 F0CF  F5          	PUSH	AF
  339 F0D0  CD F770     	CALL	CRLF
  340 F0D3  F1          	POP	AF
  341 F0D4  C2 F045     	jp	nz,IDE_LOOP
  342 F0D7  CD F770     	CALL	CRLF
  343                   
  344 F0DA  2A DF00     	ld	HL,(@DMA)
  345                   
  346 F0DD  CD F5DB     	call	WRITESECTOR
  347                   
  348 F0E0  CA F045     	jp	z,IDE_LOOP		;Z means the sector write was OK
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
SBC-MONBZ80

  349 F0E3  CD F770     	call	CRLF
  350 F0E6  C3 F045     	jp	IDE_LOOP
  351 F0E9  11 FA0C     main2b:	ld	de, msgwr		;Sector written OK
  352 F0EC  CD F3F8     	call	PSTRING
  353 F0EF  C3 F045     	jp	IDE_LOOP
  354                   
  355                   
  356 F0F2              SET$LBA:				;Set the logical block address
  357 F0F2  11 FA1E     	ld	de,GET$LBA
  358 F0F5  CD F3F8     	call	PSTRING
  359 F0F8  CD F43A     	call	ghex32lba		;Get new CPM style Track & Sector number and put them in RAM at @SEC & @TRK
  360 F0FB  DA F101     	jp	c,main3b		;Ret C set if abort/error
  361 F0FE  CD F620     	call	wrlba			;Update LBA on drive
  362 F101  CD F770     main3b:	call	CRLF
  363 F104  C3 F045     	jp	IDE_LOOP
  364                   
  365 F107              NEXT$SECT:
  366 F107  3A DF06     	ld	a,(@SEC)
  367 F10A  3C          	inc	A
  368 F10B  FE 3C       	cp	MAXSEC-1
  369 F10D  D2 F11C     	jp	nc,RANGE$ERROR
  370 F110  32 DF06     	ld	(@SEC),a
  371 F113  CD F620     	call	wrlba			;Update LBA on drive
  372 F116  CD F770     	call	CRLF
  373 F119  C3 F045     	jp	IDE_LOOP
  374 F11C              RANGE$ERROR:
  375 F11C  11 FDA9     	ld	de,RANGE$MSG
  376 F11F  CD F3F8     	call	PSTRING
  377 F122  C3 F045     	jp	IDE_LOOP
  378                   
  379 F125              PREV$SEC:
  380 F125  3A DF06     	ld	a,(@SEC)
  381 F128  B7          	or	A
  382 F129  CA F11C     	jp	z,RANGE$ERROR
  383 F12C  3D          	dec	A
  384 F12D  32 DF06     	ld	(@SEC),a
  385 F130  CD F620     	call	wrlba			;Update LBA on drive
  386 F133  CD F770     	call	CRLF
  387 F136  C3 F045     	jp	IDE_LOOP
  388                   
  389                   
  390                   
  391 F139              CPM_BOOT:				;Boot CPM from IDE system tracks -- if present
  392 F139  DB 06       	IN	A,(DIAG_LEDS)
  393 F13B  F6 10       	OR	A,00010000B		;FLAG PROGRESS (Ready to go, 4 LED's On)
  394 F13D  D3 06       	OUT	(DIAG_LEDS),A
  395                   
  396 F13F  11 FE2F     	ld	de,BOOTCPM$MSG
  397 F142  CD F3F8     	call	PSTRING
  398 F145  3E 00       	ld	a,0
  399 F147  D3 36       	out	(RAM_BANK),a		;<<<<<<<<<< make sure that RAM bank is 0 before we start loading CPM  >>>>>>>>>>>
  400 F149  CD F537     	call	IDEinit			;initialize the board and drive. If there is no drive abort
  401 F14C  3E 00       	ld	a,0			;Load from track 0,sec 1, head 0 (Always)
  402 F14E  32 DF06     	ld	(@SEC),a		;Remember sectors are numbered +1
  403 F151  AF          	xor	A
  404 F152  32 DF09     	ld	(@TRK+1),a
  405 F155  32 DF08     	ld	(@TRK),a
  406                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
SBC-MONBZ80

  407 F158  3E 0C       	ld	a,CPM$BOOT$COUNT	;Count of CPMLDR sectors  (12)
  408 F15A  32 DF16     	ld	(@SECTOR$COUNT),a
  409 F15D  21 0100     	ld	hl,CPMLDR$ADDRESS	;DMA address where the CPMLDR resides in RAM (100H)
  410 F160  22 DF00     	ld	(@DMA),hl
  411                   
  412 F163              NextRCPM:
  413 F163  CD F620     	call	wrlba			;Update LBA on drive
  414 F166  CD F311     	call	DISPLAYposition		;Display current Track,sector,head#
  415 F169  CD F770     	call	CRLF
  416                   
  417 F16C  2A DF00     	ld	hl,(@DMA)
  418 F16F  CD F59E     	call	READSECTOR		;read a sector
  419 F172  22 DF00     	ld	(@DMA),hl
  420                   
  421 F175  3A DF16     	ld	a,(@SECTOR$COUNT)
  422 F178  3D          	DEC     A
  423 F179  32 DF16     	ld	(@SECTOR$COUNT),a
  424 F17C  CA F189     	jp	z,LOAD$DONE
  425                   
  426 F17F  2A DF06     	ld	hl,(@SEC)
  427 F182  23          	inc	hl
  428 F183  22 DF06     	ld	(@SEC),hl		;Note we assume we alway will stay on tarck 0 in this special case
  429 F186  C3 F163     	jp	NextRCPM
  430                   
  431 F189              LOAD$DONE:
  432 F189  1E 0F       	ld	e,REGstatus		;Check the R/W status when done
  433 F18B  CD F6AC     	call	IDErd8D
  434 F18E  CB 42       	BIT	0,D
  435 F190  C2 F1AE     	jp	nz,CPMLoadErr		;Z if no errors
  436 F193  21 0100     	ld	hl,CPMLDR$ADDRESS
  437 F196  7E          	ld	a,(hl)
  438 F197  FE 31       	cp	31H			;EXPECT TO HAVE 31H @80H IE. LD SP,80H
  439 F199  C2 F1A5     	jp	nz,CPMLoadErr1		;Z if no errors
  440                   
  441 F19C  DB 06       	IN	A,(DIAG_LEDS)
  442 F19E  F6 08       	OR	A,00001000B		;FLAG PROGRESS (Ready to go, 5 LED's On)
  443 F1A0  D3 06       	OUT	(DIAG_LEDS),A
  444 F1A2  C3 0100     	jp	100H			;Now jump here where the code for the CPMLDR resides
  445                   
  446 F1A5              CPMLoadErr1:
  447 F1A5  11 FDDC     	ld	de,CPM$ERROR1		;Drive data error
  448 F1A8  CD F3F8     	call	PSTRING
  449 F1AB  C3 F045     	jp	IDE_LOOP
  450                   
  451 F1AE              CPMLoadErr:
  452 F1AE  11 FDC2     	ld	de,CPM$ERROR		;Drive Read Error
  453 F1B1  CD F3F8     	call	PSTRING
  454 F1B4  C3 F045     	jp	IDE_LOOP
  455                   
  456                   
  457 F1B7              N$RD$SEC:				;Read N sectors >>>> NOTE no check is made to not overwrite 
  458 F1B7  11 FCA0     	ld	de,ReadN$MSG		;CPM etc. in high RAM
  459 F1BA  CD F3F8     	call	PSTRING
  460 F1BD  CD F46D     	call	GETHEX
  461 F1C0  DA F045     	jp	c,IDE_LOOP		;Abort if ESC (C flag set)
  462 F1C3  CD F770     	CALL	CRLF
  463 F1C6  CD F770     	CALL	CRLF
  464                   	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
SBC-MONBZ80

  465 F1C9  32 DF16     	ld	(@SECTOR$COUNT),a	;store sector count
  466 F1CC  2A DF00     	ld	HL,(@DMA)		;Point to buffer
  467                   
  468 F1CF              NextRSec:	
  469 F1CF  11 FD54     	ld	de,MultiRD_MSG
  470 F1D2  CD F3F8     	call	PSTRING
  471 F1D5  CD F620     	call	wrlba			;Update LBA on drive
  472 F1D8  CD F311     	call	DISPLAYposition		;Display current Track,sector,head#
  473                   
  474 F1DB  2A DF00     	ld	hl,(@DMA)
  475 F1DE  CD F59E     	call	READSECTOR
  476 F1E1  22 DF00     	ld	(@DMA),hl
  477                   
  478 F1E4  3A DF16     	ld	a,(@SECTOR$COUNT)
  479 F1E7  3D          	DEC     A
  480 F1E8  32 DF16     	ld	(@SECTOR$COUNT),a
  481 F1EB  CA F045     	jp	z,IDE_LOOP
  482                   
  483 F1EE  2A DF06     	ld	hl,(@SEC)
  484 F1F1  23          	inc	hl
  485 F1F2  22 DF06     	ld	(@SEC),hl
  486 F1F5  7D          	ld	a,L			;0 to 62 CPM Sectors
  487 F1F6  FE 3C       	cp	MAXSEC-1
  488 F1F8  C2 F1CF     	jp	nz,NextRSec
  489                   
  490 F1FB  21 0000     	ld	hl,0			;Back to CPM sector 0
  491 F1FE  22 DF06     	ld	(@SEC),hl
  492 F201  2A DF08     	ld	hl,(@TRK)		;Bump to next track
  493 F204  23          	inc	hl
  494 F205  22 DF08     	ld	(@TRK),hl
  495 F208  7D          	ld	a,L			;0-FFH tracks (only)
  496 F209  C2 F1CF     	jp	nz,NextRSec
  497                   
  498 F20C  11 FD89     	ld	de,AtEnd		;Tell us we are at end of disk
  499 F20F  CD F3F8     	call	PSTRING
  500 F212  C3 F045     	jp	IDE_LOOP
  501                   
  502                   
  503 F215              N$WR$SEC:				;Write N sectors 
  504 F215  11 FCFB     	ld	de,WriteN$MSG		;How many sectors
  505 F218  CD F3F8     	call	PSTRING
  506 F21B  CD F46D     	call	GETHEX	
  507 F21E  DA F045     	jp	c,IDE_LOOP		;Abort if ESC (C flag set)
  508 F221  32 DF16     	ld	(@SECTOR$COUNT),a	;store sector count
  509                   	
  510 F224  11 F9B5     	ld	de,msgsure		;Are you sure?
  511 F227  CD F3F8     	call	PSTRING
  512 F22A  CD F743     	call	ZCI
  513 F22D  CD F4B3     	call	upper
  514 F230  4F          	LD	C,A			;Print response
  515 F231  CD F6D6     	CALL	ZCO
  516 F234  FE 59       	CP	'Y'
  517 F236  F5          	PUSH	AF
  518 F237  CD F770     	CALL	CRLF
  519 F23A  F1          	POP	AF
  520 F23B  C2 F045     	jp	nz,IDE_LOOP
  521 F23E  CD F770     	CALL	CRLF
  522                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
SBC-MONBZ80

  523 F241  2A DF00     	ld	HL,(@DMA)		;Point to current DMA buffer
  524                   
  525 F244              NextWSec:	
  526 F244  11 FD63     	ld	de,MultiWR_MSG
  527 F247  CD F3F8     	call	PSTRING
  528 F24A  CD F620     	call	wrlba			;Update LBA on drive
  529 F24D  CD F311     	call	DISPLAYposition		;Display current Track,sector,head#
  530                   
  531 F250  2A DF00     	ld	hl,(@DMA)
  532 F253  CD F5DB     	call	WRITESECTOR		;Actully, Sector/track values are already updated
  533 F256  22 DF00     	ld	(@DMA),hl		;above in wrlba, but WRITESECTOR is used in multiple places.
  534                   					;A repeat does no harm -- speed is not an issue here
  535 F259  3A DF16     	ld	a,(@SECTOR$COUNT)
  536 F25C  3D          	DEC     A
  537 F25D  32 DF16     	ld	(@SECTOR$COUNT),a
  538 F260  CA F045     	jp	z,IDE_LOOP
  539                   
  540 F263  2A DF06     	ld	hl,(@SEC)
  541 F266  23          	inc	hl
  542 F267  22 DF06     	ld	(@SEC),hl
  543 F26A  7D          	ld	a,L			;0 to 62 CPM Sectors
  544 F26B  FE 3C       	cp	MAXSEC-1
  545 F26D  C2 F244     	jp	nz,NextWSec
  546                   
  547 F270  21 0000     	ld	hl,0			;Back to CPM sector 0
  548 F273  22 DF06     	ld	(@SEC),hl
  549 F276  2A DF08     	ld	hl,(@TRK)		;Bump to next track
  550 F279  23          	inc	hl
  551 F27A  22 DF08     	ld	(@TRK),hl
  552 F27D  7D          	ld	a,L			;0-FFH tracks (only)
  553 F27E  B7          	or	A
  554 F27F  C2 F244     	jp	nz,NextWSec
  555                   
  556 F282  11 FD89     	ld	de,AtEnd		;Tell us we are at end of disk
  557 F285  CD F3F8     	call	PSTRING
  558 F288  C3 F045     	jp	IDE_LOOP
  559                   
  560                   
  561                   
  562                   
  563 F28B              IDE_ERROR:
  564 F28B  11 FD72     	ld	de, msgErr		;CMD error msg
  565 F28E  CD F3F8     	call	PSTRING
  566 F291  C3 F042     	jp	ABORT
  567                   
  568                   
  569                   ;---------------- Support Routines -------------------------------------------
  570                   
  571 F294              driveid:
  572 F294  CD F64C     	call	IDEwaitnotbusy		;Do the IDEntify drive command, and return with the buffer
  573                   					;filled with info about the drive
  574 F297  D8          	ret	c			;If Busy return NZ
  575 F298  16 EC       	ld	d,COMMANDid
  576 F29A  1E 0F       	ld	e,REGcommand
  577 F29C  CD F6BD     	call	IDEwr8D			;issue the command
  578                   
  579 F29F  CD F672     	call	IDEwaitdrq		;Wait for Busy=0, DRQ=1
  580 F2A2  DA F40E     	jp	c,SHOWerrors
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
SBC-MONBZ80

  581                   
  582 F2A5  06 00       	ld	b,0			;256 words
  583 F2A7  21 D000     	ld	hl,IDbuffer		;Store data here
  584 F2AA  CD F5B9     	call	MoreRD16		;Get 256 words of data from REGdata port to [HL]
  585 F2AD  C9          	ret
  586                   
  587                   
  588                   
  589                   
  590 F2AE              SEQ$RD:				
  591 F2AE  CD F64C     	call	IDEwaitnotbusy		;Sequentially read sectors one at a time from current position
  592 F2B1  DA F40E     	jp	c,SHOWerrors
  593 F2B4  CD F770     	call	CRLF
  594 F2B7              NEXTSEC:
  595 F2B7  2A DF00     	ld	HL,(@DMA)
  596                   
  597 F2BA  CD F59E     	call	READSECTOR		;If there are errors they will show up in READSECTOR
  598                   
  599 F2BD  CA F2CE     	jp	z,SEQOK
  600 F2C0  11 FC74     	ld	de,CONTINUE$MSG		;To Abort enter ESC. Any other key to continue.
  601 F2C3  CD F3F8     	call	PSTRING
  602 F2C6  CD F743     	call	ZCI
  603 F2C9  FE 1B       	cp	ESC			;Abort if ESC
  604 F2CB  CA F045     	jp	Z,IDE_LOOP
  605                   
  606 F2CE  CD F770     SEQOK:	CALL	CRLF
  607 F2D1  CD F311     	call	DISPLAYposition		;Display current Track,sector,head#
  608                   
  609 F2D4  2A DF00     	ld	HL,(@DMA)		;Point to buffer
  610                   
  611 F2D7  CD F4C4     	call	HEXDUMP			;Display sector contents
  612 F2DA  CD F770     	call	CRLF
  613 F2DD  CD F770     	call	CRLF
  614 F2E0  CD F770     	call	CRLF
  615                   
  616 F2E3  11 FC74     	ld	de,CONTINUE$MSG		;To Abort enter ESC. Any other key to continue.
  617 F2E6  CD F3F8     	call	PSTRING
  618 F2E9  CD F743     	call	ZCI
  619 F2EC  FE 1B       	cp	ESC
  620 F2EE  CA F045     	JP	Z,IDE_LOOP
  621 F2F1  CD F770     	call	CRLF
  622 F2F4              NEXTSEC1:
  623                   	
  624 F2F4  2A DF06     	ld	hl,(@SEC)
  625 F2F7  23          	inc	hl
  626 F2F8  22 DF06     	ld	(@SEC),hl
  627 F2FB  7D          	ld	a,L			;0 to 62 CPM Sectors
  628 F2FC  FE 3C       	cp	MAXSEC-1
  629 F2FE  C2 F2B7     	jp	nz,NEXTSEC
  630                   
  631 F301  21 0000     	ld	hl,0			;Back to CPM sector 0
  632 F304  22 DF06     	ld	(@SEC),hl
  633 F307  2A DF08     	ld	hl,(@TRK)		;Bump to next track
  634 F30A  23          	inc	hl
  635 F30B  22 DF08     	ld	(@TRK),hl
  636 F30E  C3 F2B7     	jp	NEXTSEC			;Note will go to last sec on disk unless stopped
  637                   
  638                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
SBC-MONBZ80

  639 F311              DISPLAYposition:			;Display current DMA, track,sector & head position
  640 F311  11 F96C     	LD	DE,msgDMA		;Show current DMA Address
  641 F314  CD F3F8     	CALL	PSTRING
  642 F317  3A DF01     	ld	a,(@DMA+1)		;High DMA byte
  643 F31A  CD F41C     	call	phex
  644 F31D  3A DF00     	ld	a,(@DMA)		;Low DMA byte
  645 F320  CD F41C     	call	phex
  646                   	
  647 F323  11 F976     	ld	de,msgCPMTRK		;Display in LBA format
  648 F326  CD F3F8     	call	PSTRING			;---- CPM FORMAT ----
  649 F329  3A DF09     	ld	a,(@TRK+1)		;High TRK byte
  650 F32C  CD F41C     	call	phex
  651 F32F  3A DF08     	ld	a,(@TRK)		;Low TRK byte
  652 F332  CD F41C     	call	phex
  653                   
  654 F335  11 F985     	ld	de,msgCPMSEC
  655 F338  CD F3F8     	call	PSTRING			;SEC = (16 bits)
  656 F33B  3A DF07     	ld	a,(@SEC+1)		;High Sec
  657 F33E  CD F41C     	call	phex
  658 F341  3A DF06     	ld	a,(@SEC)		;Low sec
  659 F344  CD F41C     	call	phex
  660                   					;---- LBA FORMAT ----
  661 F347  11 F993     	ld	de, msgLBA
  662 F34A  CD F3F8     	call	PSTRING			;(LBA = 00 (<-- Old "Heads" = 0 for these drives).
  663 F34D  3A DF05     	ld	a,(@DRIVE$TRK+1)	;High "cylinder" byte
  664 F350  CD F41C     	call	phex
  665 F353  3A DF04     	ld	a,(@DRIVE$TRK)		;Low "cylinder" byte
  666 F356  CD F41C     	call	phex
  667 F359  3A DF02     	ld	a,(@DRIVE$SEC)
  668 F35C  CD F41C     	call	phex
  669 F35F  11 F9A0     	ld	de, MSGBracket		;)$
  670 F362  CD F3F8     	call	PSTRING
  671 F365  C9          	ret
  672                   
  673                   
  674 F366              SHOW$ID:			
  675 F366  CD F294     	call	driveid			;Get the drive ID info. If there is no drive, abort
  676 F369  CA F378     	jp	z,ID$OK1
  677 F36C  11 F91C     	ld	de,ID$ERROR
  678 F36F  CD F3F8     	call	PSTRING
  679 F372  CD F40E     	call	SHOWerrors
  680 F375  C3 F042     	jp	ABORT
  681                   
  682 F378              ID$OK1:					;print the drive's model number
  683 F378  11 F932     	ld	de, msgmdl
  684 F37B  CD F3F8     	call	PSTRING
  685 F37E  21 D036     	ld	hl,IDbuffer + 54
  686 F381  06 0A       	ld	b,10			;character count in words
  687 F383  CD F3E7     	call	printname		;Print [HL], [B] X 2 characters
  688 F386  CD F770     	call	CRLF
  689                   					;print the drive's serial number
  690 F389  11 F93A     	ld	de, msgsn
  691 F38C  CD F3F8     	call	PSTRING
  692 F38F  21 D014     	ld	hl,IDbuffer + 20
  693 F392  06 05       	ld	b, 5			;Character count in words
  694 F394  CD F3E7     	call	printname
  695 F397  CD F770     	call	CRLF
  696                   					;Print the drive's firmware revision string
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
SBC-MONBZ80

  697 F39A  11 F942     	ld	de, msgrev
  698 F39D  CD F3F8     	call	PSTRING
  699 F3A0  21 D02E     	ld	hl,IDbuffer + 46
  700 F3A3  06 02       	ld	b, 2
  701 F3A5  CD F3E7     	call	printname		;Character count in words
  702 F3A8  CD F770     	call	CRLF
  703                   					;print the drive's cylinder, head, and sector specs
  704 F3AB  11 F94A     	ld	de, msgcy
  705 F3AE  CD F3F8     	call	PSTRING
  706 F3B1  21 D002     	ld	hl,IDbuffer + 2
  707 F3B4  CD F411     	call	printparm
  708 F3B7  11 F956     	ld	de,msghd
  709 F3BA  CD F3F8     	call	PSTRING
  710 F3BD  21 D006     	ld	hl,IDbuffer + 6
  711 F3C0  CD F411     	call	printparm
  712 F3C3  11 F960     	ld	de, msgsc
  713 F3C6  CD F3F8     	call	PSTRING
  714 F3C9  21 D00C     	ld	hl,IDbuffer + 12
  715 F3CC  CD F411     	call	printparm
  716 F3CF  CD F770     	call	CRLF
  717                   					;Default position will be first block 
  718 F3D2  21 0000     	ld	hl,0
  719 F3D5  22 DF06     	ld	(@SEC),hl		;Default to Track 0, Sec 0
  720 F3D8  22 DF08     	ld	(@TRK),hl
  721 F3DB  21 C000     	ld	hl,buffer		;Set DMA address to buffer
  722 F3DE  22 DF00     	ld	(@DMA),hl
  723                   
  724 F3E1  CD F537     	call	IDEinit			;For some reason this need to be here after getting the drive ID.
  725 F3E4  C3 F045     	jp	IDE_LOOP		;otherewise sector #'s are off by one!
  726                   
  727                   
  728                   
  729                   
  730 F3E7              printname:				;Send text up to [B]	
  731 F3E7  23          	inc	hl			;Text is low byte high byte format
  732 F3E8  4E          	ld	c,(hl)
  733 F3E9  CD F6D6     	call	ZCO
  734 F3EC  0B          	dec	bc
  735 F3ED  4E          	ld	c,(hl)
  736 F3EE  CD F6D6     	call	ZCO
  737 F3F1  23          	inc	hl
  738 F3F2  23          	inc	hl
  739 F3F3  05          	DEC     B
  740 F3F4  C2 F3E7     	jp	nz,printname
  741 F3F7  C9          	ret
  742                   
  743                   
  744                   ;	Print a string in [DE] up to '$'
  745                   
  746 F3F8              PSTRING:
  747 F3F8  C5          	push	bc
  748 F3F9  D5          	push	de
  749 F3FA  E5          	push	hl
  750 F3FB  EB          	ex	de,hl
  751 F3FC  7E          PSTRX:	ld	a,(hl)
  752 F3FD  FE 24       	cp	'$'
  753 F3FF  CA F40A     	jp	z,DONEP
  754 F402  4F          	ld	c,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
SBC-MONBZ80

  755 F403  CD F6D6     	call	ZCO
  756 F406  23          	inc	hl
  757 F407  C3 F3FC     	jp	PSTRX
  758 F40A  E1          DONEP:	pop	hl
  759 F40B  D1          	pop	de
  760 F40C  C1          	pop	bc
  761 F40D  C9          	ret
  762                   
  763                   
  764 F40E              SHOWerrors:
  765         FFFF         IF	NOT DEBUG
  766 F40E  B7          	or	A			;Set NZ flag
  767 F40F  37          	scf				;Set Carry Flag
  768 F410  C9          	ret
  769                      ELSE
  841                      ENDIF
  842                   
  843                   
  844                   ;------------------------------------------------------------------
  845                   ; Print a 16 bit number in RAM located @ [HL] 
  846                   ; (Note Special Low Byte First. Used only for Drive ID)
  847                   
  848 F411              printparm:
  849 F411  23          	inc	hl			;Index to high byte first
  850 F412  7E          	ld	a,(hl)
  851 F413  CD F41C     	call	PHEX
  852 F416  0B          	dec	bc			;Now low byte
  853 F417  7E          	ld	a,(hl)
  854 F418  CD F41C     	call	PHEX
  855 F41B  C9          	ret
  856                   
  857                   ; Print an 8 bit number, located in [A]
  858 F41C  F5          PHEX:	push	af
  859 F41D  C5          	push	bc
  860 F41E  F5          	push	af
  861 F41F  0F          	rrca
  862 F420  0F          	rrca
  863 F421  0F          	rrca
  864 F422  0F          	rrca
  865 F423  CD F42D     	call	ZCONV
  866 F426  F1          	pop	af
  867 F427  CD F42D     	call	ZCONV
  868 F42A  C1          	pop	bc
  869 F42B  F1          	pop	af
  870 F42C  C9          	ret
  871                   
  872 F42D  E6 0F       ZCONV:	and	0FH			;HEX to ASCII and print it
  873 F42F  C6 90       	add	a,90H
  874 F431  27          	daa
  875 F432  CE 40       	adc	a,40H
  876 F434  27          	daa
  877 F435  4F          	ld	c,A
  878 F436  CD F6D6     	call	ZCO
  879 F439  C9          	ret
  880                   
  881 F43A              ghex32lba:				;get CPM style Track# & Sector# data and convert to LBA format
  882 F43A  11 FA83     	ld	de,ENTER$SECL		;Enter sector number
  883 F43D  CD F3F8     	call	PSTRING
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
SBC-MONBZ80

  884 F440  CD F46D     	call	GETHEX			;get 2 HEX digits
  885 F443  D8          	ret	c
  886 F444  32 DF06     	ld	(@SEC),a		;Note: no check data is < MAXSEC, sectors start 0,1,2,3....
  887 F447  CD F770     	call	CRLF
  888                   
  889 F44A  11 FA9B     	ld	de,ENTER$TRKL		;Enter low byte track number
  890 F44D  CD F3F8     	call	PSTRING
  891 F450  CD F46D     	call	GETHEX			;get 2 more HEX digits
  892 F453  D8          	ret	c
  893 F454  32 DF08     	ld	(@TRK),a
  894 F457  CD F770     	call	CRLF
  895                   
  896 F45A  11 FAB6     	ld	de,ENTER$TRKH		;Enter high byte track number
  897 F45D  CD F3F8     	call	PSTRING
  898 F460  CD F46D     	call	GETHEX			;get 2 more HEX digits
  899 F463  D8          	ret	c
  900 F464  32 DF09     	ld	(@TRK+1),a
  901 F467  CD F770     	call	CRLF
  902 F46A  AF          	xor	A
  903 F46B  B7          	or	A			;To return NC
  904 F46C  C9          	ret
  905                   
  906                   
  907 F46D              GETHEX:
  908 F46D  CD F4A1     	call	GETCMD			;Get a character from keyboard & ECHO
  909 F470  FE 1B       	cp	ESC
  910 F472  CA F49F     	jp	z,HEXABORT
  911 F475  FE 2F       	cp	'/'			;check 0-9, A-F
  912 F477  DA F49F     	jp	c,HEXABORT
  913 F47A  FE 47       	cp	'F'+1
  914 F47C  D2 F49F     	jp	nc,HEXABORT
  915 F47F  CD F4BC     	call	ASBIN			;Convert to binary
  916 F482  07          	rlca				;Shift to high nibble
  917 F483  07          	rlca
  918 F484  07          	rlca
  919 F485  07          	rlca
  920 F486  47          	ld	b,A			;Store it
  921 F487  CD F4A1     	call	GETCMD			;Get 2nd character from keyboard & ECHO
  922 F48A  FE 1B       	cp	ESC
  923 F48C  CA F49F     	jp	z,HEXABORT
  924 F48F  FE 2F       	cp	'/'			;check 0-9, A-F
  925 F491  DA F49F     	jp	c,HEXABORT
  926 F494  FE 47       	cp	'F'+1
  927 F496  D2 F49F     	jp	nc,HEXABORT
  928 F499  CD F4BC     	call	ASBIN			;Convert to binary
  929 F49C  B0          	or	B			;add in the first digit
  930 F49D  B7          	or	A			;To return NC
  931 F49E  C9          	ret
  932 F49F              HEXABORT:
  933 F49F  37          	scf				;Set Carry flag
  934 F4A0  C9          	ret
  935                   
  936                   
  937 F4A1  CD F743     GETCMD:	call	ZCI			;GET A CHARACTER, convert to UC, ECHO it
  938 F4A4  CD F4B3     	call	UPPER
  939 F4A7  FE 1B       	cp	ESC
  940 F4A9  C8          	ret	z			;Don't echo an ESC
  941 F4AA  F5          	push	af			;Save it
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
SBC-MONBZ80

  942 F4AB  C5          	push	bc
  943 F4AC  4F           	ld	c,A
  944 F4AD  CD F6D6     	call	ZCO			;Echo it
  945 F4B0  C1          	pop	bc
  946 F4B1  F1          	pop	af			;get it back
  947 F4B2  C9          	ret
  948                   
  949                   					;Convert LC to UC
  950 F4B3  FE 61       UPPER:	cp	'a'			;must be >= lowercase a
  951 F4B5  D8          	ret	c			; else go back...
  952 F4B6  FE 7B       	cp	'z'+1			;must be <= lowercase z
  953 F4B8  D0          	ret	nc			; else go back...
  954 F4B9  D6 20       	sub	'a'-'A'			;subtract lowercase bias
  955 F4BB  C9          	ret
  956                   
  957                   					;ASCII TO BINARY CONVERSION ROUTINE
  958 F4BC  D6 30       ASBIN:	sub	30H
  959 F4BE  FE 0A       	cp	0AH
  960 F4C0  F8          	ret	m
  961 F4C1  D6 07       	sub	07H
  962 F4C3  C9          	ret
  963                   
  964                   
  965 F4C4              HEXDUMP:				;Print a hexdump of the data in the 512 byte buffer @[HL]
  966 F4C4  F5          	push	af			;Save everything
  967 F4C5  C5          	push	bc
  968 F4C6  D5          	push	de
  969 F4C7  E5          	push	hl
  970                   
  971 F4C8  CD F770     	call	CRLF			;CR/LF first
  972 F4CB  16 20       	ld	d,32			;Print 32 lines total
  973 F4CD  06 10       	ld	b,16			;16 characters across
  974 F4CF  22 DF10     	ld	(@StartLineHex),hl	;Save the buffer location for ASCII display below
  975 F4D2  21 0000     	ld	hl,0
  976 F4D5  22 DF14     	ld	(@BYTE$COUNT),hl
  977                   
  978 F4D8  CD F770     SF172:	call	CRLF
  979 F4DB  2A DF14     	ld	hl,(@BYTE$COUNT)
  980 F4DE  7C          	ld	a,H
  981 F4DF  CD F41C     	call	PHEX			;Print byte count in sector
  982 F4E2  7D          	ld	a,L
  983 F4E3  CD F41C     	call	PHEX
  984 F4E6  D5          	push	de
  985 F4E7  11 0010     	ld	de,16
  986 F4EA  19          	add	hl,de
  987 F4EB  D1          	pop	de
  988 F4EC  22 DF14     	ld	(@BYTE$COUNT),hl	;store for next time
  989 F4EF  CD F77F     	call	BLANK
  990 F4F2  2A DF10     	ld	hl,(@StartLineHex)
  991 F4F5  22 DF12     	ld	(@StartLineASCII),hl	;Store for ASCII display below
  992 F4F8  7E          SF175:	ld	a,(hl)
  993 F4F9  CD F789     	call	LBYTE			;Display [A] on CRT/LCD
  994 F4FC  23          	inc	hl
  995 F4FD  10 F9       	DJNZ	SF175
  996 F4FF  22 DF10     	ld	(@StartLineHex),hl	;Save for next line later
  997 F502  CD F513     	call	ShowAscii		;Now translate to ASCII and display
  998 F505  06 10       	ld	b,16			;16 characters across for next line
  999 F507  15          	dec	D
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
SBC-MONBZ80

 1000 F508  C2 F4D8     	jp	nz,SF172		;Have we done all 32 lines
 1001                   ;
 1002 F50B  CD F770     	call	CRLF
 1003 F50E  E1          	pop	hl			;Get back origional registers
 1004 F50F  D1          	pop	de
 1005 F510  C1          	pop	bc
 1006 F511  F1          	pop	af
 1007 F512  C9          	ret
 1008                   
 1009 F513              ShowAscii:				;Now show as ascii info
 1010 F513  2A DF12     	ld	hl,(@StartLineASCII)
 1011 F516  06 10       	ld	b,16			;16 ASCII characters across
 1012 F518  CD F77F     XF172:	call	BLANK			;send a space character
 1013 F51B  CD F77F     	call	BLANK
 1014 F51E  7E          XF175:	ld	a,(hl)
 1015 F51F  E6 7F       	and	7FH
 1016 F521  FE 20       	cp	' '			;FILTER OUT CONTROL CHARACTERS
 1017 F523  D2 F528     	jp	nc,XT33
 1018 F526  3E 2E       XT22:	ld	a,'.'
 1019 F528  FE 7C       XT33:	cp	07CH
 1020 F52A  D2 F526     	jp	nc,XT22
 1021 F52D  4F          	ld	c,A			;SET UP TO SEND
 1022 F52E  C5          	push	bc
 1023 F52F  CD F6D6     	call	ZCO
 1024 F532  C1          	pop	bc
 1025 F533  23          	inc	hl			;Next position in buffer
 1026 F534  10 E8       	DJNZ	XF175
 1027 F536  C9          	ret
 1028                   ;
 1029                   ;
 1030                   ;================================================================================================
 1031                   ;
 1032                   ;      IDE Drive BIOS Routines written in a format that can be used directly with CPM3 
 1033                   ;
 1034                   ;================================================================================================
 1035                   ;
 1036 F537              IDEinit:				;Initilze the 8255 and drive then do a hard reset on the drive, 
 1037 F537  3E 92       	ld	a,READcfg8255		;Config 8255 chip (10010010B), read mode on return
 1038 F539  D3 33       	out	(IDEportCtrl),a		;Config 8255 chip, READ mode
 1039                   
 1040                   					;Hard reset the disk drive 
 1041                   					;For some reason some CF cards need to the RESET line 
 1042                   					;pulsed very carefully. You may need to play around   
 1043 F53B  3E 80       	ld	a,IDErstline		;with the pulse length. Symptoms are: incorrect data comming
 1044 F53D  D3 32       	out	(IDEportC),a		;back from a sector read (often due to the wrong sector being read)
 1045                   					;I have a (negative)pulse of 2.7uSec. (10Mz Z80, two IO wait states).
 1046 F53F  06 20       	ld	b,20H			;Which seem to work for the 5 different CF cards I have.
 1047 F541              ResetDelay:
 1048 F541  05          	DEC     B
 1049 F542  C2 F541     	jp	nz,ResetDelay		;Delay (reset pulse width)
 1050                   
 1051 F545  AF          	xor	A
 1052 F546  D3 32       	out	(IDEportC),a		;No IDE control lines asserted (just bit 7 of port C)
 1053 F548  CD F58A     	call	DELAY$32
 1054                   
 1055                   	;**** A. Bingham - 7-April-2018 - from D. Fry ****
 1056 F54B  CD F64C     	CALL	IDEwaitnotbusy
 1057 F54E  DA F595     	JP	C,InitError
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
SBC-MONBZ80

 1058                   	;****
 1059                   
 1060 F551  16 E0       	ld	d,11100000b		;Data for IDE SDH reg (512bytes, LBA mode,single drive,head 0000)
 1061                   					;For Trk,Sec,head (non LBA) use 10100000
 1062                   					;Note. Cannot get LBA mode to work with an old Seagate Medalist 6531 drive.
 1063                   					;have to use teh non-LBA mode. (Common for old hard disks).
 1064                   
 1065 F553  1E 0E       	ld	e,REGshd		;00001110,(0EH) for CS0,A2,A1,
 1066 F555  CD F6BD     	call	IDEwr8D			;Write byte to select the MASTER device
 1067                   ;
 1068 F558  06 FF       	ld	b,0FFH			;<<< May need to adjust delay time for hard disks
 1069 F55A              WaitInit:	
 1070 F55A  1E 0F       	ld	e,REGstatus		;Get status after initialization
 1071 F55C  CD F6AC     	call	IDErd8D			;Check Status (info in [D])
 1072 F55F  7A          	ld	a,D
 1073 F560  E6 80       	and	80H
 1074 F562  CA F572     	jp	z,DoneInit		;Return if ready bit is zero
 1075 F565  3E 02       	ld	a,2
 1076 F567  CD F574     	call	DELAYX			;Long delay, drive has to get up to speed
 1077 F56A  05          	DEC     B
 1078 F56B  C2 F55A     	jp	nz,WaitInit
 1079 F56E  CD F40E     	call	SHOWerrors		;Ret with NZ flag set if error (probably no drive)
 1080 F571  C9          	ret
 1081 F572              DoneInit:
 1082 F572  AF          	xor	A
 1083 F573  C9          	ret
 1084                   
 1085                   
 1086 F574  32 DF18     DELAYX:	ld	(@DELAYStore),a
 1087 F577  C5          	push	bc
 1088 F578  01 FFFF     	ld	bc,0FFFFH		;<<< May need to adjust delay time to allow cold drive to
 1089 F57B  3A DF18     DELAY2:	ld	a,(@DELAYStore)		;get up to speed.
 1090 F57E  3D          DELAY1:	DEC     A
 1091 F57F  C2 F57E     	jp	nz,DELAY1
 1092 F582  0B          	dec	bc
 1093 F583  79          	ld	a,C
 1094 F584  B0          	or	B
 1095 F585  C2 F57B     	jp	nz,DELAY2
 1096 F588  C1          	pop	bc
 1097 F589  C9          	ret
 1098                   
 1099                   
 1100 F58A  3E 28       DELAY$32: ld	a,40			;DELAY ~32 MS (DOES NOT SEEM TO BE CRITICAL)
 1101 F58C  06 00       DELAY3:	ld	b,0
 1102 F58E  10 FE       M0:	DJNZ	M0
 1103 F590  3D          	DEC     A
 1104 F591  C2 F58C     	jp	nz,DELAY3
 1105 F594  C9          	ret
 1106                   
 1107 F595              InitError:
 1108 F595  11 F907     	LD DE,INIT$ERROR
 1109 F598  CD F3F8     	CALL PSTRING
 1110 F59B  C3 F042     	JP ABORT
 1111                   
 1112                   					;Read a sector, specified by the 3 bytes in LBA
 1113                   					;Z on success, NZ call error routine if problem
 1114 F59E              READSECTOR:
 1115 F59E  CD F620     	call	wrlba			;Tell which sector we want to read from.
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
SBC-MONBZ80

 1116                   					;Note: Translate first in case of an error otherwise we 
 1117                   					;will get stuck on bad sector 
 1118 F5A1  CD F64C     	call	IDEwaitnotbusy		;make sure drive is ready
 1119 F5A4  DA F40E     	jp	c,SHOWerrors		;Returned with NZ set if error
 1120                   
 1121 F5A7  16 20       	ld	d,COMMANDread
 1122 F5A9  1E 0F       	ld	e,REGcommand
 1123 F5AB  CD F6BD     	call	IDEwr8D			;Send sec read command to drive.
 1124 F5AE  CD F672     	call	IDEwaitdrq		;wait until it's got the data
 1125 F5B1  DA F40E     	jp	c,SHOWerrors
 1126                   
 1127 F5B4  2A DF00     	LD  	HL,(@DMA)		;DMA address
 1128 F5B7  06 00       	ld	b,0			;Read 512 bytes to [HL] (256X2 bytes)
 1129 F5B9              MoreRD16:
 1130 F5B9  3E 08       	ld	a,REGdata		;REG register address
 1131 F5BB  D3 32       	out	(IDEportC),a
 1132                   
 1133 F5BD  F6 40       	or	IDErdline		;08H+40H, Pulse RD line
 1134 F5BF  D3 32       	out	(IDEportC),a
 1135                   
 1136 F5C1  DB 30       	in	a,(IDEportA)		;Read the lower byte first (Note very early versions had high byte then low byte
 1137 F5C3  77          	ld	(hl),A			;this made sector data incompatible with other controllers).
 1138 F5C4  23          	inc	hl
 1139 F5C5  DB 31       	in	a,(IDEportB)		;THEN read the upper byte
 1140 F5C7  77          	ld	(hl),A
 1141 F5C8  23          	inc	hl
 1142                   
 1143 F5C9  3E 08       	ld	a,REGdata		;De-assert RD line
 1144 F5CB  D3 32       	out	(IDEportC),a
 1145 F5CD  10 EA       	DJNZ	MoreRD16
 1146                   
 1147 F5CF  1E 0F       	ld	e,REGstatus
 1148 F5D1  CD F6AC     	call	IDErd8D
 1149 F5D4  7A          	ld	a,D
 1150 F5D5  E6 01       	and	1H
 1151 F5D7  C4 F40E     	call	nz,SHOWerrors		;If error display status
 1152 F5DA  C9          	ret
 1153                   
 1154                   					;Write a sector, specified by the 3 bytes in LBA 
 1155                   					;Z on success, NZ to error routine if problem
 1156 F5DB              WRITESECTOR:
 1157 F5DB  CD F620     	call	wrlba			;Tell which sector we want to read from.
 1158                   					;Note: Translate first in case of an error otherwise we 
 1159                   					;will get stuck on bad sector 
 1160 F5DE  CD F64C     	call	IDEwaitnotbusy		;make sure drive is ready
 1161 F5E1  DA F40E     	jp	c,SHOWerrors
 1162                   
 1163 F5E4  16 30       	ld	d,COMMANDwrite
 1164 F5E6  1E 0F       	ld	e,REGcommand
 1165 F5E8  CD F6BD     	call	IDEwr8D			;tell drive to write a sector
 1166 F5EB  CD F672     	call	IDEwaitdrq		;wait unit it wants the data
 1167 F5EE  DA F40E     	jp	c,SHOWerrors
 1168                   
 1169 F5F1  2A DF00     	ld	hl,(@DMA)
 1170 F5F4  06 00       	ld	b,0			;256X2 bytes
 1171                   
 1172 F5F6  3E 80       	ld	a,WRITEcfg8255
 1173 F5F8  D3 33       	out	(IDEportCtrl),a
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
SBC-MONBZ80

 1174                   
 1175 F5FA  7E          WRSEC1:	ld	a,(hl)
 1176 F5FB  23          	inc	hl
 1177 F5FC  D3 30       	out	(IDEportA),a		;Write the lower byte first (Note early versions had high byte then low byte
 1178 F5FE  7E          	ld	a,(hl)			;this made sector data incompatible with other controllers).
 1179 F5FF  23          	inc	hl
 1180 F600  D3 31       	out	(IDEportB),a		;THEN High byte on B
 1181 F602  3E 08       	ld	a,REGdata
 1182 F604  F5          	push	af
 1183 F605  D3 32       	out	(IDEportC),a		;Send write command
 1184 F607  F6 20       	or	IDEwrline		;Send WR pulse
 1185 F609  D3 32       	out	(IDEportC),a
 1186 F60B  F1          	pop	af
 1187 F60C  D3 32       	out	(IDEportC),a
 1188 F60E  10 EA       	DJNZ	WRSEC1
 1189                   
 1190 F610  3E 92       	ld	a,READcfg8255		;Set 8255 back to read mode
 1191 F612  D3 33       	out	(IDEportCtrl),a
 1192                   
 1193 F614  1E 0F       	ld	e,REGstatus
 1194 F616  CD F6AC     	call	IDErd8D
 1195 F619  7A          	ld	a,D
 1196 F61A  E6 01       	and	1H
 1197 F61C  C4 F40E     	call	nz,SHOWerrors		;If error display status
 1198 F61F  C9          	ret
 1199                   
 1200                   
 1201 F620              wrlba:					;Write the logical block address to the drive's registers
 1202                   					;Note we do not need to set the upper nibble of the LBA
 1203                   					;It will always be 0 for these small drives
 1204 F620  3A DF06     	ld	a,(@SEC)		;LBA mode Low sectors go directly
 1205 F623  3C          	inc	A			;Sectors are numbered 1 -- MAXSEC (even in LBA mode)
 1206 F624  32 DF02     	ld	(@DRIVE$SEC),a		;For Diagnostic Display Only
 1207 F627  57          	ld	d,A
 1208 F628  1E 0B       	ld	e,REGsector		;Send info to drive
 1209 F62A  CD F6BD     	call	IDEwr8D			;Note: For drive we will have 0 - MAXSEC sectors only
 1210                   
 1211 F62D  2A DF08     	ld	hl,(@TRK)
 1212 F630  7D          	ld	a,L
 1213 F631  32 DF04     	ld	(@DRIVE$TRK),a
 1214 F634  55          	ld	d,L			;Send Low TRK#
 1215 F635  1E 0C       	ld	e,REGcylinderLSB
 1216 F637  CD F6BD     	call	IDEwr8D
 1217                   
 1218 F63A  7C          	ld	a,H
 1219 F63B  32 DF05     	ld	(@DRIVE$TRK+1),a
 1220 F63E  54          	ld	d,H			;Send High TRK#
 1221 F63F  1E 0D       	ld	e,REGcylinderMSB
 1222 F641  CD F6BD     	call	IDEwr8D
 1223                   
 1224 F644  16 01       	ld	d,1			;For now, one sector at a time
 1225 F646  1E 0A       	ld	e,REGseccnt
 1226 F648  CD F6BD     	call	IDEwr8D
 1227 F64B  C9          	ret
 1228                   
 1229 F64C              IDEwaitnotbusy:				;ie Drive READY if 01000000
 1230 F64C  06 FF       	ld	b,0FFH
 1231 F64E  3E FF       	ld	a,0FFH			;Delay, must be above 80H for 4MHz Z80. Leave longer for slower drives
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
SBC-MONBZ80

 1232 F650  32 DF18     	ld	(@DELAYStore),a
 1233                   
 1234 F653              MoreWait:
 1235 F653  1E 0F       	ld	e,REGstatus		;wait for RDY bit to be set
 1236 F655  CD F6AC     	call	IDErd8D	
 1237 F658  7A          	ld	a,D
 1238 F659  E6 C0       	and	11000000B
 1239 F65B  EE 40       	xor	01000000B
 1240 F65D  CA F670     	jp	z,DoneNotbusy
 1241 F660  05          	DEC     B
 1242 F661  C2 F653     	jp	nz,MoreWait
 1243 F664  3A DF18     	ld	a,(@DELAYStore)		;Check timeout delay
 1244 F667  3D          	DEC     A
 1245 F668  32 DF18     	ld	(@DELAYStore),a
 1246 F66B  C2 F653     	jp	nz,MoreWait
 1247 F66E  37          	scf				;Set carry to indicate an error
 1248 F66F  C9          	ret
 1249 F670              DoneNotBusy:
 1250 F670  B7          	or	A			;Clear carry it indicate no error
 1251 F671  C9          	ret
 1252                   
 1253                   					;Wait for the drive to be ready to transfer data.
 1254                   					;Returns the drive's status in Acc
 1255 F672              IDEwaitdrq:
 1256 F672  06 FF       	ld	b,0FFH
 1257 F674  3E FF       	ld	a,0FFH			;Delay, must be above 80H for 4MHz Z80. Leave longer for slower drives
 1258 F676  32 DF18     	ld	(@DELAYStore),a
 1259                   
 1260 F679              MoreDRQ:
 1261 F679  1E 0F       	ld	e,REGstatus		;wait for DRQ bit to be set
 1262 F67B  CD F6AC     	call	IDErd8D
 1263 F67E  7A          	ld	a,D
 1264 F67F  E6 88       	and	10001000B
 1265 F681  FE 08       	cp	00001000B
 1266 F683  CA F696     	jp	z,DoneDRQ
 1267 F686  05          	DEC 	B
 1268 F687  C2 F679     	jp	nz,MoreDRQ
 1269 F68A  3A DF18     	ld	a,(@DELAYStore)		;Check timeout delay
 1270 F68D  3D          	DEC	A
 1271 F68E  32 DF18     	ld	(@DELAYStore),a
 1272 F691  C2 F679     	jp	nz,MoreDRQ
 1273 F694  37          	scf				;Set carry to indicate error
 1274 F695  C9          	ret
 1275 F696              DoneDRQ:
 1276 F696  B7          	or	A			;Clear carry
 1277 F697  C9          	ret
 1278                   
 1279                   
 1280 F698              SET_DMA:
 1281 F698  D5          	PUSH	DE
 1282 F699  11 FDFB     	LD	DE,DMA_Loc_MSG2		;Enter starting RAM buffer (DMA) location (xxxxH):$'
 1283 F69C  CD F3F8     	CALL	PSTRING
 1284 F69F  D1          	POP	DE
 1285 F6A0  CD F7A3     	CALL	GETHL			;Setup DMA location in [HL]
 1286 F6A3  22 DF00     	LD	(@DMA),HL
 1287 F6A6  CD F770     	CALL	CRLF
 1288 F6A9  C3 F045     	JP	IDE_LOOP
 1289                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
SBC-MONBZ80

 1290                   ;------------------------------------------------------------------
 1291                   ; Low Level 8 bit R/W to the drive controller.  These are the routines that talk
 1292                   ; directly to the drive controller registers, via the 8255 chip.  
 1293                   ; Note the 16 bit I/O to the drive (which is only for SEC R/W) is done directly 
 1294                   ; in the routines READSECTOR & WRITESECTOR for speed reasons.
 1295                   ;
 1296 F6AC              IDErd8D:				;READ 8 bits from IDE register in [E], return info in [D]
 1297 F6AC  7B          	ld	a,E
 1298 F6AD  D3 32       	out	(IDEportC),a		;drive address onto control lines
 1299                   
 1300 F6AF  F6 40       	or	IDErdline		;RD pulse pin (40H)
 1301 F6B1  D3 32       	out	(IDEportC),a		;assert read pin
 1302                   
 1303 F6B3  DB 30       	in	a,(IDEportA)
 1304 F6B5  57          	ld	d,A			;return with data in [D]
 1305                   
 1306 F6B6  7B          	ld	a,E			;<---Ken Robbins suggestion
 1307 F6B7  D3 32       	out	(IDEportC),a		;de-assert RD pin
 1308                   
 1309 F6B9  AF          	xor	A
 1310 F6BA  D3 32       	out	(IDEportC),a		;Zero all port C lines
 1311 F6BC  C9          	ret
 1312                   
 1313                   
 1314 F6BD              IDEwr8D:				;WRITE Data in [D] to IDE register in [E]
 1315 F6BD  3E 80       	ld	a,WRITEcfg8255		;Set 8255 to write mode
 1316 F6BF  D3 33       	out	(IDEportCtrl),a
 1317                   
 1318 F6C1  7A          	ld	a,D			;Get data put it in 8255 A port
 1319 F6C2  D3 30       	out	(IDEportA),a
 1320                   
 1321 F6C4  7B          	ld	a,E			;select IDE register
 1322 F6C5  D3 32       	out	(IDEportC),a
 1323                   
 1324 F6C7  F6 20       	or	IDEwrline		;lower WR line
 1325 F6C9  D3 32       	out	(IDEportC),a
 1326                   
 1327 F6CB  7B          	ld	a,E			;<-- Ken Robbins suggestion, raise WR line
 1328 F6CC  D3 32       	out	(IDEportC),a		;de-assert RD pin
 1329                   
 1330 F6CE  AF          	xor	A			;Deselect all lines including WR line
 1331 F6CF  D3 32       	out	(IDEportC),a
 1332                   
 1333 F6D1  3E 92       	ld	a,READcfg8255		;Config 8255 chip, read mode on return
 1334 F6D3  D3 33       	out	(IDEportCtrl),a
 1335 F6D5  C9          	ret
 1336                   
 1337                   
 1338                   ;<<<<<<<<<<<<<<<<<<<<<< MAIN CONSOL ROUTINES >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 1339                   ;
 1340                   
 1341 F6D6  DB 36       ZCO:	IN	A,IOBYTE		;Find out where we send data
 1342                   ;	BIT	2,A	
 1343                   ;	JR	Z,VGA_CO		;To save space no VGA for now
 1344 F6D8  CB 47       	BIT	0,A	
 1345 F6DA  28 33       	JR	Z,USB_CO		;USB port for output
 1346 F6DC  18 00       	JR	PROP_CO			;For now everything else Propeller 	
 1347                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
SBC-MONBZ80

 1348 F6DE              PROP_CO:
 1349 F6DE  DB 00       	IN	A,(S100_CONSOL_STATUS)	;PROPELLER VIDIO BOARD PORT
 1350 F6E0  E6 04       	AND	4H
 1351 F6E2  28 FA       	JR	Z,PROP_CO		;Not yet ready, try both outputs
 1352 F6E4  79          	LD	A,C
 1353 F6E5  FE 07       	CP	07H			;IS IT A BELL
 1354 F6E7  CA F6F0     	JP	Z,BELL1			;Special case
 1355 F6EA  FE 00       	CP	0H			;SD BOARD CANNOT TAKE A NULL!
 1356 F6EC  C8          	RET	Z
 1357 F6ED  D3 01       	OUT	(S100_CONSOL_OUT),A
 1358 F6EF  C9          	RET
 1359                   
 1360 F6F0  3E 06       BELL1:	LD	A,06H			;SEND A BELL
 1361 F6F2  D3 01       	OUT	(S100_CONSOL_OUT),A
 1362 F6F4  3E 0F       	LD	A,0FH
 1363 F6F6  CD F6FE     	CALL	DELAY
 1364 F6F9  3E 07       	LD	A,07H
 1365 F6FB  D3 01       	OUT	(S100_CONSOL_OUT),A
 1366 F6FD  C9          	RET
 1367                   
 1368                   
 1369 F6FE  3D          DELAY:	DEC	A			;GENERAL COUNT DOWN TIME DELAY
 1370 F6FF  C8          	RET	Z			;LENGTH SET IN [A]
 1371 F700  F5          	PUSH	AF
 1372 F701  3E 05       	LD	A,05H
 1373 F703  3D          MORE:	DEC	A
 1374 F704  F5          	PUSH	AF
 1375 F705  AF          	XOR	A
 1376 F706  3D          MORE2:	DEC	A
 1377 F707  20 FD       	JR	NZ,MORE2
 1378 F709  F1          	POP	AF
 1379 F70A  20 F7       	JR	NZ,MORE
 1380 F70C  F1          	POP	AF
 1381 F70D  18 EF       	JR	DELAY
 1382                   
 1383                   
 1384 F70F  DB 34       USB_CO:	IN	A,(USB_STATUS_PORT)	;USB Port for Console OUT
 1385 F711  E6 02       	AND	00000010B
 1386 F713  20 FA       	JR	NZ,USB_CO		;Not yet ready - busy transmitting, try again
 1387 F715  79          	LD	A,C
 1388 F716  E6 7F       	AND	7FH			;Always 7 bits only.
 1389 F718  D3 35       	OUT	(USB_DATA_PORT),A
 1390 F71A  C9          	RET
 1391                   
 1392                   
 1393                   ;<<<<<<<<<<<<<<<<<<< MAIN CONSOL STATUS ROUTINE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 1394                   
 1395 F71B  DB 36       ZCSTS:	IN	A,IOBYTE		;Find out where we get data
 1396 F71D  CB 4F       	BIT	1,A	
 1397 F71F  28 1A       	JR	Z,PS2_CSTS
 1398                   ;	BIT	2,A			; To save space no VGA console for now
 1399                   ;	JR	Z,VGA_CSTS
 1400 F721  CB 47       	BIT	0,A	
 1401 F723  28 0E       	JR	Z,USB_CSTS		;USB port
 1402 F725  18 00       	JR	PROP_CSTS		;For now everything else Propeller Console Board
 1403                   
 1404 F727              PROP_CSTS:
 1405 F727  DB 00       	IN	A,(S100_CONSOL_STATUS)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
SBC-MONBZ80

 1406 F729  E6 02       	AND	02H
 1407 F72B  CA F731     	JP	Z,NO_CSTS		;Zero if nothing
 1408 F72E              GOT_CSTS:
 1409 F72E  AF          	XOR	A
 1410 F72F  3D          	DEC	A			;RETURN WITH 0FFH IN [A] IF SOMETHING
 1411 F730  C9          	RET
 1412 F731              NO_CSTS:
 1413 F731  AF          	XOR	A			
 1414 F732  C9          	RET				;RETURN WITH 0 IN A IF NOTHING THERE
 1415                   
 1416 F733              USB_CSTS:
 1417 F733  DB 34       	IN	A,(USB_STATUS_PORT)
 1418 F735  E6 01       	AND	01H
 1419 F737  28 F8       	JR	Z,NO_CSTS		;Zero if nothing
 1420 F739  18 F3       	JR	GOT_CSTS
 1421                   
 1422 F73B              PS2_CSTS:
 1423 F73B  DB 02       	IN	A,(PS2_STATUS_PORT)
 1424 F73D  E6 01       	AND	01H
 1425 F73F  28 F0       	JR	Z,NO_CSTS		;Zero/Low if nothing
 1426 F741  18 EB       	JR	GOT_CSTS
 1427                   
 1428                   ;<<<<<<<<<<<<<<<<<<<< MAIN CONSOL INPUT ROUTINE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 1429                   
 1430 F743  DB 36       ZCI:	IN	A,IOBYTE		;Find out where we send data
 1431 F745  CB 4F       	BIT	1,A	
 1432 F747  28 1C       	JR	Z,PS2_CI
 1433                   ;	BIT	2,A			; To save space no VGA Console for now
 1434                   ;	JR	Z,VGA_CI
 1435 F749  CB 47       	BIT	0,A	
 1436 F74B  28 0D       	JR	Z,USB_CI		;USB port
 1437 F74D  18 00       	JR	PROP_CI			;For now everything else Propeller Console Board
 1438                   	
 1439 F74F              PROP_CI:
 1440 F74F  DB 00       	IN 	A,(S100_CONSOL_STATUS)	;NEED CONSTAT TO CLEAN UP SHIFT KEYS ETC
 1441 F751  E6 02       	AND	02H
 1442 F753  28 FA       	JR	Z,PROP_CI		;Wait until something there
 1443 F755  DB 01       	IN	A,(S100_CONSOL_IN)
 1444 F757  E6 7F       	AND	7FH
 1445 F759  C9          	RET
 1446                   
 1447 F75A              USB_CI:
 1448 F75A  DB 34       	IN 	A,(USB_STATUS_PORT)	;NEED CONSTAT TO CLEAN UP SHIFT KEYS ETC
 1449 F75C  E6 01       	AND	01H
 1450 F75E  28 FA       	JR	Z,USB_CI		;Wait until something there
 1451 F760  DB 35       	IN	A,(USB_DATA_PORT)
 1452 F762  E6 7F       	AND	7FH			;Always 7 bits only.
 1453 F764  C9          	RET
 1454                   	
 1455 F765              PS2_CI:
 1456 F765  DB 02       	IN 	A,(PS2_STATUS_PORT)	;NEED CONSTAT TO CLEAN UP SHIFT KEYS ETC
 1457 F767  E6 01       	AND	01H
 1458 F769  28 FA       	JR	Z,PS2_CI		;Wait until something there
 1459 F76B  DB 03       	IN	A,(PS2_DATA_PORT)
 1460 F76D  E6 7F       	AND	7FH			;Always 7 bits only.
 1461 F76F  C9          	RET
 1462                   
 1463                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  25
SBC-MONBZ80

 1464                   ;SEND TO CONSOL CR/LF
 1465 F770  F5          CRLF:	PUSH	AF
 1466 F771  C5          	PUSH	BC
 1467 F772  0E 0D       	LD	C,CR
 1468 F774  CD F6D6     	CALL	ZCO
 1469 F777  0E 0A       	LD	C,LF
 1470 F779  CD F6D6     	CALL	ZCO
 1471 F77C  C1          	POP	BC
 1472 F77D  F1          	POP	AF
 1473 F77E  C9          	RET
 1474                   
 1475                   ;Print a space on screen
 1476 F77F  C5          BLANK:	PUSH	BC			
 1477 F780  E5          	PUSH	HL
 1478 F781  0E 20       	LD	C,' '
 1479 F783  CD F6D6     	CALL	ZCO
 1480 F786  E1          	POP	HL
 1481 F787  C1          	POP	BC
 1482 F788  C9          	RET
 1483                   
 1484 F789  F5          LBYTE:	PUSH	AF
 1485 F78A  0F          	RRCA
 1486 F78B  0F          	RRCA
 1487 F78C  0F          	RRCA
 1488 F78D  0F          	RRCA
 1489 F78E  CD F792     	CALL	SF598
 1490 F791  F1          	POP	AF
 1491 F792  CD F796     SF598:	CALL	CONV			;Convert to ASCII AND print it
 1492 F795  C9          	RET
 1493                   
 1494                   ;CONVERT HEX TO ASCII
 1495 F796  E6 0F       CONV:	AND	0FH
 1496 F798  C6 90       	ADD	A,90H
 1497 F79A  27          	DAA 
 1498 F79B  CE 40       	ADC	A,40H
 1499 F79D  27          	DAA 
 1500 F79E  4F          	LD	C,A
 1501 F79F  CD F6D6     	call	ZCO
 1502 F7A2  C9          	RET
 1503                   
 1504 F7A3  C5          GETHL:	PUSH	BC			;Return a HEX value in [HL]
 1505 F7A4  0E 01       	LD	C,1			;1 paramater
 1506 F7A6  CD F7AC     	CALL	HEXSP
 1507 F7A9  E1          	POP	HL
 1508 F7AA  C1          	POP	BC
 1509 F7AB  C9          	RET
 1510                   
 1511 F7AC  21 0000     HEXSP:	LD	HL,0000
 1512 F7AF  CD F7D8     EX0:	CALL	TI
 1513 F7B2  47          EX1:	LD	B,A
 1514 F7B3  CD F7EE     	CALL	NIBBLE
 1515 F7B6  38 08       	JR	C,EX2X
 1516 F7B8  29          	ADD	HL,HL
 1517 F7B9  29          	ADD	HL,HL
 1518 F7BA  29          	ADD	HL,HL
 1519 F7BB  29          	ADD	HL,HL
 1520 F7BC  B5          	OR	L
 1521 F7BD  6F          	LD	L,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  26
SBC-MONBZ80

 1522 F7BE  18 EF       	JR	EX0
 1523 F7C0  E3          EX2X:	EX	(SP),HL
 1524 F7C1  E5          	PUSH	HL
 1525 F7C2  78          	LD	A,B
 1526 F7C3  CD F7FE     	CALL	QCHK
 1527 F7C6  30 02       	JR	NC,SF560
 1528 F7C8  0D          	DEC	C
 1529 F7C9  C8          	RET	Z
 1530 F7CA  C2 F042     SF560:	JP	NZ,ABORT
 1531 F7CD  0D          	DEC	C
 1532 F7CE  20 DC       	JR	NZ,HEXSP
 1533 F7D0  C9          	RET 
 1534 F7D1  0E 01       EXF:	LD	C,01H
 1535 F7D3  21 0000     	LD	HL,0000H
 1536 F7D6  18 DA       	JR	EX1
 1537                   	
 1538                   ;KEYBOARD HANDELING ROUTINE (WILL NOT ECHO CR/LF)
 1539                   ;IT CONVERTS LOWER CASE TO UPPER CASE FOR LOOKUP COMMANDS
 1540                   ;ALL OTHERE CHARACTERS ARE ECHOED ON CONSOL
 1541 F7D8  CD F743     TI:	CALL	ZCI
 1542 F7DB  FE 0D       	CP	CR
 1543 F7DD  C8          	RET	Z
 1544 F7DE  C5          	PUSH	BC
 1545 F7DF  4F          	LD	C,A
 1546 F7E0  CD F6D6     	CALL	ZCO
 1547 F7E3  79          	LD	A,C
 1548 F7E4  C1          	POP	BC
 1549 F7E5  FE 40       	CP	40H			;LC->UC
 1550 F7E7  D8          	RET	C
 1551 F7E8  FE 7B       	CP	7BH
 1552 F7EA  D0          	RET	NC
 1553 F7EB  E6 5F       SF754:	AND	5FH
 1554 F7ED  C9          	RET 
 1555                   
 1556 F7EE  D6 30       NIBBLE:	SUB	30H
 1557 F7F0  D8          	RET	C
 1558 F7F1  FE 17       	CP	17H
 1559 F7F3  3F          	CCF
 1560 F7F4  D8          	RET	C
 1561 F7F5  FE 0A       	CP	LF
 1562 F7F7  3F          	CCF
 1563 F7F8  D0          	RET	NC
 1564 F7F9  D6 07       	SUB	07H
 1565 F7FB  FE 0A       	CP	LF
 1566 F7FD  C9          	RET
 1567                   
 1568                   ;TEST FOR DELIMITERS
 1569                   
 1570 F7FE  FE 20       QCHK:	CP	SPACE
 1571 F800  C8          	RET	Z
 1572 F801  FE 2C       	CP	','
 1573 F803  C8          	RET	Z
 1574 F804  FE 0D       	CP	CR
 1575 F806  37          	SCF
 1576 F807  C8          	RET	Z
 1577 F808  3F          	CCF
 1578 F809  C9          	RET 
 1579                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  27
SBC-MONBZ80

 1580 F80A  0D 0A 0A 53 SD_CARD_MENU_MSG: 	DB	CR,LF,LF,'SBC-Z80 ROM MONITOR (@ F000H) V2.0 8/21/2019 IDE MENU',CR,LF,LF
 1581 F845  4C 3D 53 65 	 	DB	'L=Set LBA   R=1 Sec to Buffer  W=Buffer to 1 Sec',CR,LF
 1582 F877  53 3D 53 68 		DB	'S=Show Sec  V=N Secs to buffer X=Buffer to N Secs',CR,LF
 1583 F8AA  4E 3D 4E 65 		DB	'N=Next Sec  M=Previous Sector  P=Boot CPM',CR,LF
 1584 F8D5  44 3D 42 75 		DB	'D=Buf Addr  Y=Card Paramerers  (ESC) Main menu',CR,LF,LF,'$'
 1585                   
 1586 F907  49 4E 49 54 INIT$ERROR:	DB	'INIT. DRIVE ERROR.',CR,LF,'$'
 1587 F91C  45 52 52 4F ID$ERROR:	DB	'ERROR FOR DRIVE ID.',CR,LF,'$'
 1588 F932  4D 6F 64 65 msgmdl:		DB	'Model: $'
 1589 F93A  53 2F 4E 3A msgsn:		DB	'S/N:   $'
 1590 F942  52 65 76 3A msgrev:		DB	'Rev:   $'
 1591 F94A  43 79 6C 69 msgcy:		DB	'Cylinders: $'
 1592 F956  2C 20 48 65 msghd:		DB	', Heads: $'
 1593 F960  2C 20 53 65 msgsc:		DB	', Sectors: $'
 1594 F96C  42 75 66 66 msgDMA:		DB	'Buffer = $'
 1595 F976  48 2C 20 20 msgCPMTRK:	DB	'H,  CPM TRK = $'
 1596 F985  2C 20 20 43 msgCPMSEC:	DB	',  CPM SEC = $'
 1597 F993  2C 20 20 28 msgLBA:		DB	',  (LBA = 00$'
 1598 F9A0  29 24       MSGBRACKET	DB	')$'
 1599                   
 1600 F9A2  0D 0A 0A 45 Prompt:		DB	CR,LF,LF,'Enter command >$'
 1601 F9B5  0D 0A 57 61 msgsure:	DB	CR,LF,'Warning: this will change data on the drive, '
 1602 F9E4  61 72 65 20 		DB	'are you sure? (Y/N)...$'
 1603 F9FB  0D 0A 53 65 msgrd:		DB	CR,LF,'Sec. Read OK',CR,LF,'$'
 1604 FA0C  0D 0A 53 65 msgwr:		DB	CR,LF,'Sec. Write OK',CR,LF,'$'
 1605 FA1E  45 4E 54 45 GET$LBA:	DB	'ENTER CPM STYLE TRK & SEC (IN HEX).',CR,LF,'$'
 1606 FA44  44 52 49 56 SEC$RW$ERROR	DB	'DRIVE ERROR, Status Register = $'
 1607 FA64  44 52 49 56 ERR$REG$DATA	DB	'DRIVE ERROR, Error Register = $'
 1608 FA83  53 74 61 72 ENTER$SECL	DB	'Starting sec.#,(xxH) = $'
 1609 FA9B  54 72 61 63 ENTER$TRKL	DB	'Track # (LOW byte, xxH) = $'
 1610 FAB6  54 72 61 63 ENTER$TRKH	DB	'Track # (HIGH byte, xxH) = $'
 1611 FAD2  48 65 61 64 ENTER$HEAD	DB	'Head # (01-0f) = $'
 1612 FAE4  4E 75 6D 62 ENTER$COUNT	DB	'Number of sectors to R/W = $'
 1613 FB00  44 72 69 76 DRIVE$BUSY	DB	'Drive Busy (bit 7) stuck high.   Status = $'
 1614 FB2B  44 72 69 76 DRIVE$NOT$READY	DB	'Drive Ready (bit 6) stuck low.  Status = $'
 1615 FB55  44 72 69 76 DRIVE$WR$FAULT	DB	'Drive write fault.    Status = $'
 1616 FB75  55 6E 6B 6E UNKNOWN$ERROR	DB	'Unknown error.   Status = $'
 1617 FB90  53 65 63 74 BAD$BLOCK	DB	'Sector ID.  Error Register = $'
 1618 FBAE  45 72 72 6F UNRECOVER$ERR	DB	'Error Register = $'
 1619 FBC0  45 52 52 4F READ$ID$ERROR	DB	'ERROR SETTING UP TO READ DRIVE ID',CR,LF,'$'
 1620 FBE4  53 65 63 74 SEC$NOT$FOUND	DB	'Sector not found. Error Register = $'
 1621 FC08  49 6E 76 61 INVALID$CMD	DB	'Invalid Command. Error Register = $'
 1622 FC2B  54 72 61 63 TRK0$ERR	DB	'Track Zero not found. Error Register = $'
 1623 FC53  55 6E 6B 6E UNKNOWN$ERROR1	DB	'Unknown Error. Error Register = $'
 1624 FC74  0D 0A 45 53 CONTINUE$MSG	DB	CR,LF,'ESC to Abort. Any other key to continue. $'
 1625 FCA0  0D 0A 4D 75 READN$MSG	DB	CR,LF,'Multiple sectors from current disk/CF card to RAM.'
 1626 FCD4  0D 0A 48 6F 		DB	CR,LF,'How many 512 byte sectores (xx HEX):$'
 1627 FCFB  0D 0A 4D 75 WRITEN$MSG	DB	CR,LF,'Multiple sectors in RAM to current disk/CF card.'
 1628 FD2D  0D 0A 48 6F 		DB	CR,LF,'How many 512 byte sectores (xx HEX):$'
 1629 FD54  0D 0A 52 65 MultiRD_MSG	DB	CR,LF,'Reading Sec $'
 1630 FD63  0D 0A 57 72 MultiWR_MSG	DB	CR,LF,'Writing Sec $'
 1631                   
 1632 FD72  0D 0A 49 6E MSGERR		DB	CR,LF,'Invalid menu option!$'
 1633 FD89  0D 0A 41 74 ATEND		DB	CR,LF,'At end of disk partition!',CR,LF,'$'
 1634 FDA7  48 24       H$MSG		DB	'H$'
 1635 FDA9  0D 0A 53 65 RANGE$MSG	DB	CR,LF,'Sector out of range.',CR,LF,'$'
 1636 FDC2  0D 0A 45 72 CPM$ERROR	DB	CR,LF,'Error reading CPMLDR.',CR,LF,'$'
 1637 FDDC  0D 0A 44 61 CPM$ERROR1	DB	CR,LF,'Data error reading CPMLDR.',CR,LF,'$'
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  28
SBC-MONBZ80

 1638 FDFB  0D 0A 45 6E DMA_Loc_MSG2	DB	CR,LF,'Enter starting RAM buffer (DMA) location (xxxxH):$'
 1639 FE2F  0D 0A 42 6F BOOTCPM$MSG	DB	CR,LF,'Booting CPM',CR,LF,'$'
 1640                   
 1641                   ; -------------------------- RAM usage -----------------------------------------
 1642                   
 1643         D000      IDBUFFER	EQU	RAM_BASE+ 1000H		;512 Bytes @ (C000H+1000H = D000H) for CF-Card paramaters
 1644         C000      buffer		EQU	RAM_BASE		;Default DMA buffer at C000H
 1645                   
 1646         DF00      @DMA		EQU	RAM_BASE + 1F00H	;Remember Stack is at ~DFF0H
 1647         DF02      @DRIVE$SEC	EQU	RAM_BASE + 1F02H
 1648         DF04      @DRIVE$TRK	EQU	RAM_BASE + 1F04H
 1649         DF06      @SEC		EQU	RAM_BASE + 1F06H
 1650         DF08      @TRK		EQU	RAM_BASE + 1F08H
 1651         DF10      @STARTLINEHEX	EQU	RAM_BASE + 1F10H
 1652         DF12      @STARTLINEASCII	EQU	RAM_BASE + 1F12H
 1653         DF14      @BYTE$COUNT	EQU	RAM_BASE + 1F14H
 1654         DF16      @SECTOR$COUNT	EQU	RAM_BASE + 1F16H
 1655         DF18      @DELAYSTORE	EQU	RAM_BASE + 1F18H
 1656                   
 1657                   
 1658                   
 0 Error(s) Detected.
 3647 Absolute Bytes. 274 Symbols Detected.
