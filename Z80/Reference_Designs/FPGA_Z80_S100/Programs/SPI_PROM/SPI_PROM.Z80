;Test program for SPI interface of S100Computers.com Z80_FPGA Prototype board.
;Will Read or Write to an AT25128 EEPROM 
;Note the EEPROM is patched into the RTC socket U2, only to test the SPI interface
;
;	John Monahan	S100Computers.com	2/21/2019
;
;
;V1.0		2/21/2019	;First version. It is "rough & ready" with little menu etc. error checking etc.
;				;Note address input Hex values must be 4 digits. Data (byte) values 2 digits
;	PORT ASSIGNMENTS
;
SPI_BASE_PORT	EQU	068H			; Base I/O port fot SPI module
SPI_DATA_OUT	EQU	SPI_BASE_PORT		; 68, Data OUT port from SPI module to EEPROM
SPI_DATA_IN	EQU	SPI_BASE_PORT		; 68, Data IN from EEPROM
SPI_STATUS	EQU	SPI_BASE_PORT+1		; 69, Busy Flag IN port from SPI/EEPROM
SPI_CS		EQU	SPI_BASE_PORT+2		; 6A, CS Data OUT port to SPI/EEPROM module

SPI_READ	EQU	SPI_BASE_PORT+3		; 6B, Read pulse to SPI module
SPI_WRITE	EQU	SPI_BASE_PORT+3		; 6B, Write pulse to SPI module

EEPROM_CS_LOW		EQU	00H		; Bit 0 has CS*
EEPROM_CS_HIGH		EQU	01H			

INST_WREN	EQU	 00000110B;		; Set Write Enable latch
INST_WRDI	EQU	 00000100B;		; Set Write Disable latch
INST_READ	EQU	 00000011B;		; Read EEPROM instruction
INST_WRITE	EQU	 00000010B;		; Write EEPROM instruction
INST_READ_STAT	EQU	 00000101B;		; Read Status Register
INST_WRITE_STAT	EQU	 00000001B;		; Write Status Register

CONSTAT			EQU	0H		; Console Status Port
CONIN			EQU	1H		; Console IN Port
CONOUT			EQU	1H		; Console OUT Port

MONITOR			EQU	0F000H		; Location of Z80 ROM monitor when done.

BELL			EQU	07H
ESC			EQU	1BH
CR			EQU	0DH
LF			EQU	0AH

	ORG	100H
START:	LD	SP,STACK
	LD	HL,SIGNON
	CALL	PMSG
START2:	LD	A,EEPROM_CS_HIGH		;Deselect EEPROM
	OUT	(SPI_CS),A
	LD	HL,SIGNON1
	CALL	PMSG
	CALL	CRLF				;Normal start within menu
	LD	C,'>'	   
	CALL	CO
	CALL	CI
	CP	A,ESC
	JP	NZ,START3
	JP	MONITOR
	
START3:	CP	A,'0'
	JP	Z,BYTE_EEPROM
	CP	A,'1'
	JP	Z,FILL_EEPROM
	CP	A,'2'
	JP	Z,WRITE_EEPROM
	CP	A,'3'
	JP	Z,READ_EEPROM
	CP	A,'4'
	JP	Z,MOVE_EEPROM
	CP	A,'5'
	JP	Z,COPY_EEPROM
	CALL	MENU_ERROR
	JP	START2

MENU_ERROR:
	LD	HL,MENU_MSG		; "Menu error"
	CALL	PMSG
	RET
	
;-------------------------------------------------------------------------------------------------
BYTE_EEPROM:
	LD	HL,MSG0			; "Enter EEPROM Address (0000-3FFF)"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,BYTE_WRITE_ERROR	; Carry set, there was a problem
	LD	(START_STORE),HL
	
	LD	HL,WRITE_MSG8		; "Enter byte value"
	CALL	PMSG

	CALL	GET_HEX			; Get Bytes to write
	JP	C,BYTE_WRITE_ERROR
	LD	(DATA_STORE),A		; <<< Save value 

	LD	HL,WRITE_MSG9		; "Will write single byte to EEPROM at "
	CALL	PMSG
	LD	HL,(START_STORE)
	CALL	PRINT_HL		;
	LD	HL,WRITE_MSG3		; "H. ("
	CALL	PMSG
	LD	A,(DATA_STORE)		; Get value 
	CALL	PRINT_A			
	LD	HL,WRITE_MSG3A		; "H)/n Press any keyboard to continue. Press ESC to return to the main menu."
	CALL	PMSG
	CALL	CHECK_ESC
	JP	NZ,BEGIN_BYTE_EPROM
	LD	HL,CMD_DONE		; "Command Done."
	CALL	PMSG
	JP	START2


BEGIN_BYTE_EPROM:			; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	LD	A,EEPROM_CS_LOW		; Select EEPROM
	OUT	(SPI_CS),A

	LD	A,INST_WREN		; Set Enable WR latch
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		; Send Write pulse (Port 6B)

	LD	A,EEPROM_CS_HIGH	;Deselect EEPROM
	OUT	(SPI_CS),A

	LD	A,EEPROM_CS_LOW		;Re Select EEPROM leave low (Seems to be required each time)
	OUT	(SPI_CS),A

	LD	A,INST_WRITE		;Write EEPROM instruction
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse (Port 6B)

	LD	HL,(START_STORE)	;Get PROM address
	LD	A,H
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse
	
	LD	A,L
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse
	
	LD	A,(DATA_STORE)		;get Byte to write for now
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse
	
	LD	A,EEPROM_CS_HIGH	;Deselect EEPROM
	OUT	(SPI_CS),A
	LD	HL,CMD_DONE		; "Command Done."
	CALL	PMSG
	JP	START2

BYTE_WRITE_ERROR:
	LD	HL,FORMAT_ERR_MSG	; "Format error"
	CALL	PMSG
	JP	START

;-------------------------------------------------------------------------------------------------
FILL_EEPROM:
	LD	HL,MSG0			; "Enter EEPROM Address (0000-3FFF)"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_WRITE_ERROR	; Carry set, there was a problem
	LD	(START_STORE),HL
	
	LD	HL,FILL_MSG1		; "Enter Number of Fill Bytes (0001-3FFFH)"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_WRITE_ERROR	; Carry set, there was a problem
	LD	(RANGE_STORE),HL

	LD	HL,FILL_MSG2		; "Enter Fill Value (00-FFH): "
	CALL	PMSG
	CALL	GET_HEX			; Get Byte to write
	JP	C,DATA_WRITE_ERROR
	LD	(DATA_STORE),A
	LD	HL,FILL_MSG3		; "Press any character to continue. ESC to return to the main menu."
	CALL	PMSG
	CALL	CHECK_ESC		; Are we done	
	JP	NZ,START_FILL
	JP	START2
	
START_FILL:
	LD	HL,FILLING_MSG		; "EEPROM being written to. One moment please."
	CALL	PMSG
	LD	HL,(START_STORE)
START_FILL1:
	CALL	DELAYX			; <<<<< Writes are slow, this delay is essential >>>>>
	CALL	BYTE_WRITE		; <---- Write the byte (in DATA_STORE) at (START_STORE) location in EEPROM
	LD	DE,(RANGE_STORE)
	DEC	DE
	LD	A,E
	OR	A,D
	JR	Z,LOAD_DONE
	LD	(RANGE_STORE),DE
	JP	START_FILL1		;NOTE [HL] is incremented in BYTE_WRITE
LOAD_DONE:
	LD	HL,CMD_DONE		; "Command Done."
	CALL	PMSG
	JP	START2

DELAYX	LD	HL, 400H		;Extra time required for EEPROM to write multiple data bytes
DELAY4:	DEC	HL				
	LD	A,H
	OR	A,L
	JR	NZ,DELAY4
	RET

	
;-------------------------------------------------------------------------------------------------
WRITE_EEPROM:
	LD	HL,MSG0			; "Enter EEPROM Address (0000-3FFF)"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_WRITE_ERROR	; Carry set, there was a problem
	LD	(START_STORE),HL
	
	LD	HL,WRITE_MSG1		; "Enter bytes in form:- xx,xx,xx..., CR to stop writing to EEPROM."
	CALL	PMSG
	
WRITE_LOAD:
	CALL	GET_HEX			; Get Byte to write
	LD	(DATA_STORE),A
	JP	C,DATA_WRITE_ERROR
	CALL	CHECK_CR		; Are we done	
	JP	Z,WRITE_LOAD1
	CALL	BYTE_WRITE		; Write the byte (in DATA_STORE) at (START_STORE) location in EEPROM
	LD	C,','
	CALL	CO
	JP	WRITE_LOAD
WRITE_LOAD1:
	LD	HL,CMD_DONE		; "Command Done."
	CALL	PMSG
	JP	START2



BYTE_WRITE:				; >>>>>>>>>>>>>>>>>>> START CORE BYTE WRITE ROUTINE >>>>>>>>>>>>>>>>>>
	LD	A,EEPROM_CS_LOW		; ADDRESS IN (START_STORE), Data in (DATA_STORE), NOTE HL++ on return
	OUT	(SPI_CS),A		;Select EEPROM

	LD	A,INST_WREN		;Set Enable WR latch
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse (Port 6B)

	LD	A,EEPROM_CS_HIGH	;Deselect EEPROM
	OUT	(SPI_CS),A

	LD	A,EEPROM_CS_LOW		;Select EEPROM leave low (Seems to be required each time)
	OUT	(SPI_CS),A

	LD	A,INST_WRITE		;Read EEPROM instruction
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse (Port 6B)

	LD	HL,(START_STORE)	;Store address in PROM HL
	LD	A,H
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse
	
	LD	A,L
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse
	
	LD	A,(DATA_STORE)		;Get Data Byte
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse
	
	LD	A,EEPROM_CS_HIGH	;Deselect EEPROM
	OUT	(SPI_CS),A
	
	INC	HL			;NOTE [HL] is incremented in BYTE_WRITE on return
	LD	(START_STORE),HL
	LD	A,EEPROM_CS_HIGH	;Deselect EEPROM
	OUT	(SPI_CS),A
	RET				; >>>>>>>>>>>>>>>>>>> END CORE BYTE WRITE ROUTINE >>>>>>>>>>>>>>>>>>



DATA_WRITE_ERROR:
	LD	HL,FORMAT_ERR_MSG	; "Format error"
	CALL	PMSG
	JP	START			; This will cleanup the stack as well

RANGE_WRITE_ERROR:
	LD	HL,ERROR_MSG2		; "Data range error"
	CALL	PMSG
	JP	START			; This will cleanup the stack as well
	
WRITE_SPI:
	IN	A,(SPI_STATUS)		;Wait until busy is low
	BIT	0,A
	JR	NZ,WRITE_SPI
	OUT	(SPI_WRITE),A		;Send Write pulse (Port 6B)
	PUSH	HL
	LD	HL,100
DELAY:	DEC	HL			;Allow time for Busy to rise
	LD	A,H
	OR	A,L
	JR	NZ,DELAY
WAIT1:	IN	A,(SPI_STATUS)		;Wait for busy to go back low
	BIT	0,A
	JR	NZ,WAIT1
	POP	HL
	RET

;-------------------------------------------------------------------------------------------------

READ_EEPROM:
	LD	HL,MSG0			; "Enter EEPROM Address (0000-3FFF)"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_READ_ERROR	; Carry set, there was a problem
	LD	(START_STORE),HL

	LD	HL,READ_MSG1		; "Enter Number of Bytes to Display (0000-03FFFH)"
	CALL	PMSG
	CALL	GET_HEX4		; Get number of bytes to send in [HL]
	JP	C,DATA_READ_ERROR
	LD	(RANGE_STORE),A		; <<< Save range >>

	LD	HL,READ_MSG2		; "Will Read bytes from EEPROM starting at "
	CALL	PMSG
	LD	HL,(START_STORE)	; Print the value in HL
	CALL	PRINT_HL		; <--- START
	LD	HL,READ_MSG3		; "H,/n Press any keyboard character to display. ESC to return to the main menu.'"
	CALL	PMSG
	CALL	CHECK_ESC
	CALL	Z,READ_DONE
MORE_READ:	
	CALL	BYTE_READ		; <<<--- Value returned in [A]
	
	CALL	PRINT_A			; Display Returned SPI PROM Byte
	CALL	SPACE
	LD	A,(RANGE_STORE)
	DEC	A
	LD	(RANGE_STORE),A
	JP	NZ,MORE_READ
READ_DONE:
	LD	HL,CMD_DONE		; "Command Done."
	CALL	PMSG
	JP	START2


BYTE_READ:
	LD	A,EEPROM_CS_LOW		; >>>>>>>>>>>>>>>>>>> START CORE BYTE READ ROUTINE >>>>>>>>>>>>>>>>>>
	OUT	(SPI_CS),A		; ADDRESS IN (START_STORE), Data in (DATA_STORE).  NOTE,HL++ on return, data in [A]
	
	LD	A,INST_WRDI		;Set Disable WR latch to be safe
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse (Port 6B)
		
	LD	A,EEPROM_CS_HIGH	;Deselect EEPROM 
	OUT	(SPI_CS),A

	LD	A,EEPROM_CS_LOW		;Select EEPROM leave low (Seems to be required each time)
	OUT	(SPI_CS),A
	
	LD	A,INST_READ		;Read EEPROM instruction
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Write pulse (Port 6B)
					
	LD	HL,(START_STORE)					
	LD	A,H
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send High Address

	LD	A,L
	OUT	(SPI_DATA_OUT),A
	CALL	WRITE_SPI		;Send Low Address
	INC	HL			;Next PROM Byte (for next read)
	LD	(START_STORE),HL					

	CALL	READ_SPI		;Read data from port 68H
	LD	A,EEPROM_CS_HIGH	;Deselect EEPROM (Seems to be required each time)
	OUT	(SPI_CS),A
	
	IN	A,(SPI_DATA_IN)
	RET
					;>>>>>>>>>>>>>>>>>>>> END CORE BYTE READ ROUTINE  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
					
						
READ_SPI:
	IN	A,(SPI_STATUS)		;Wait until busy is low
	BIT	0,A
	JR	NZ,READ_SPI
	IN	A,(SPI_READ)		;Send Write pulse (Port 6B)
	PUSH	HL
	LD	HL,200
DELAY2:	DEC	HL			;Allow time for Busy to rise
	LD	A,H
	OR	A,L
	JR	NZ,DELAY2
WAIT2:	IN	A,(SPI_STATUS)		;Wait for busy to go back low
	BIT	0,A
	JR	NZ,WAIT2
	POP	HL
	RET

DATA_READ_ERROR:
	LD	HL,FORMAT_ERR_MSG	; "Format error"
	CALL	PMSG
	JP	START

;---------------------------------------------------------------------------------------------------------------

MOVE_EEPROM:
	LD	HL,MOVE_MSG0		; "Enter EEPROM Read Start Address (0000-3FFFH):"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_MOVE_ERROR	; Carry set, there was a problem
	LD	(START_STORE),HL
	
	LD	HL,MOVE_MSG		; "Enter S100 Bus RAM Write Start Address (0000-FFFFH):"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_MOVE_ERROR	; Carry set, there was a problem
	LD	(S100_STORE),HL
	
	LD	HL,MOVE_MSG1		; "Enter Number of Bytes to Move (0000-3FFFH): "
	CALL	PMSG
	CALL	GET_HEX4		; Get number of bytes to send in [HL]
	JP	C,DATA_MOVE_ERROR
	LD	(RANGE_STORE),HL	
	
					; Display what will be done 
	LD	HL,MOVE_MSG2		; "Will Move bytes from EEPROM starting at "
	CALL	PMSG
	LD	HL,(START_STORE)	; Print the value in HL
	CALL	PRINT_HL		; <--- START RAM
	LD	HL,MOVE_MSG2B		; "H. \n To the S100 bus RAM starting at "
	CALL	PMSG
	LD	HL,(S100_STORE)		; Print the value in HL
	CALL	PRINT_HL		; <--- START EEPROM

	LD	HL,MOVE_MSG3		; "H,/n Press any keyboard character to display. ESC to return to the main menu.'"
	CALL	PMSG
	CALL	CHECK_ESC
	JP	NZ,BEGIN_MOVE
	JP	START2


BEGIN_MOVE:				
	LD	HL,READING_MSG		; "EEPROM being read to. One moment please."
	CALL	PMSG
	LD	IX,(S100_STORE)		; Pointer IX to S100 RAM Address is in (START_STORE)
BEGIN_MOVE1:
	CALL	BYTE_READ		; ADDRESS IN (START_STORE), Data in (DATA_STORE).  NOTE,HL++ on return, data in [A]
	LD	(IX+0),A		; Write the byte to RAM
	INC	IX		
	LD	DE,(RANGE_STORE)
	DEC	DE
	LD	A,E
	OR	A,D
	JP	Z,MOVE_DONE
	LD	(RANGE_STORE),DE
	JR	BEGIN_MOVE1
MOVE_DONE:
	LD	HL,MOVE_MSG7		; "Bytes written to S100 Bus RAM OK."
	CALL	PMSG
	JP	START2
	

DATA_MOVE_ERROR:
	LD	HL,ERROR_MSG		; "Data format error"
	CALL	PMSG
	JP	START2


;-----------------------------------------------------------------------------------------------
COPY_EEPROM:
	LD	HL,COPY_MSG		; "Enter S100 Bus RAM Read Start Address (0000-FFFFH):"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_COPY_ERROR	; Carry set, there was a problem
	LD	(S100_STORE),HL
	
	LD	HL,COPY_MSG0		; "Enter EEPROM Write Start Address (0000-3FFFH):"
	CALL	PMSG
	CALL	GET_HEX4		; Put 16 Bit Paramater in HL
	JP	C,DATA_COPY_ERROR	; Carry set, there was a problem
	LD	(START_STORE),HL
	

	LD	HL,COPY_MSG1		; "Enter Number of Bytes to Move (0000-3FFFH): "
	CALL	PMSG
	CALL	GET_HEX4		; Get number of bytes to send in [HL]
	JP	C,DATA_COPY_ERROR
	LD	(RANGE_STORE),HL		

					; Display what will be done 
	LD	HL,COPY_MSG2		; "Will Copy bytes from S100 Bus starting at"
	CALL	PMSG
	LD	HL,(S100_STORE)		; Print the value in HL
	CALL	PRINT_HL		; <--- START RAM
	LD	HL,MOVE_MSG2B		; "H. \n To the EEPROM starting at "
	CALL	PMSG
	LD	HL,(START_STORE)	; Print the value in HL
	CALL	PRINT_HL		; <--- START EEPROM

	LD	HL,MOVE_MSG3		; "H,/n Press any keyboard character to start. ESC to return to the main menu.'"
	CALL	PMSG
	CALL	CHECK_ESC
	JP	NZ,BEGIN_COPY
	JP	START2


BEGIN_COPY:				
	LD	HL,FILLING_MSG		; "EEPROM being written to. One moment please."
	CALL	PMSG
	LD	HL,(START_STORE)
	LD	IX,(S100_STORE)
BEGIN_COPY1:				
	LD	A,(IX+0)
	LD	(DATA_STORE),A
	CALL	BYTE_WRITE		; <---- Write the byte (in DATA_STORE) at (START_STORE) location in EEPROM. (Note HL++ on return)
	CALL	DELAYX			; Writes are slow, this delay is essential
	INC	IX
	LD	DE,(RANGE_STORE)
	DEC	DE
	LD	A,E
	OR	A,D
	JR	Z,COPY_DONE
	LD	(RANGE_STORE),DE
	JP	BEGIN_COPY1		;NOTE [HL] is incremented in BYTE_WRITE
COPY_DONE:
	LD	HL,COPY_MSG7		; "Bytes written to EEPROM OK"
	CALL	PMSG
	JP	START2
	
DATA_COPY_ERROR:
	LD	HL,ERROR_MSG		; "Data format error"
	CALL	PMSG
	JP	START2
	
	
	
;<<<<<<<<<<<<<<<<<<<<<<<<< SUPPORT ROUTINES >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PMSG:	PUSH	BC		; Only [A] and [HL] is changed
PMSG1:	LD	A,(HL)		; A ROUTINE TO PRINT OUT A STRING @ [HL]
	INC	HL		; UP TO THE FIRST 0.
	OR	A,A
	JP	Z,PMSG_DONE
	LD	C,A
	CALL	CO
	JP	PMSG1
PMSG_DONE:
	POP	BC
	RET

CRLF:	PUSH	BC
	LD	C,CR
	CALL	CO
	LD	C,LF
	CALL	CO
	POP	BC
	RET

SPACE:  PUSH	BC
	LD	C,20H
	CALL	CO
	POP	BC
	RET


; GET A CHARACTER, convert to UC, ECHO it
GETCMD:	CALL	CI		
	CALL	UCASE
	CP	A,ESC
	RET	Z		;Don't echo an ESC
	PUSH	AF		;Save it
	PUSH	BC
	LD	C,A
	CALL	CO		;Echo it
	POP	BC
	POP	AF		;get it back
	RET
;				;Convert LC to UC
UCASE:	CP	A,'a'		;must be >= lowercase a
	RET	C		; else go back...
	CP	A,'z'+1		;must be <= lowercase z
	RET	NC		; else go back...
	SUB	A,'a'-'A'	;subtract lowercase bias
	RET

; Check if next character is a ESC
CHECK_ESC:
	CALL	CI
	CP	A,ESC
	RET			; Return Z if ESC character.
	
; Check if next character is a CR
CHECK_CR:
	CALL	CI
	CP	A,CR
	RET			; Return Z if ESC character.
	
; Return with 2 HEX digits in [A]. If abort, Carry flag set + ESC in [A]
GET_HEX:
	PUSH	BC			
	CALL	GETCMD		;Get a character from keyboard & ECHO
	CP	A,ESC
	JR	Z,HEX_ABORT
	CP	'/'		;check 0-9, A-F
	JR	C,HEX_ABORT
	CP	'F'+1
	JR	NC,HEX_ABORT
	CALL	ASBIN		;Convert to binary
	SLA	A
	SLA	A
	SLA	A
	SLA	A		;Shift to high nibble	
	LD	B,A		;Store it
	CALL	GETCMD		;Get 2nd character from keyboard & ECHO
	CP	A,ESC
	JR	Z,HEX_ABORT
	CP	'/'		;check 0-9, A-F
	JR	C,HEX_ABORT
	CP	'F'+1
	JR	NC,HEX_ABORT
	CALL	ASBIN		;Convert to binary
	OR	A,B		;add in the first digit
	OR	A,A		;To return NC
	POP	BC
	RET
	
HEX_ABORT:
	SCF			;Set Carry flag 
	LD	A,ESC
	POP	BC
	RET
;
;
; Put 4 HEX characters in [HL] 
GET_HEX4:	
	LD      H,0000H
	CALL	GET_HEX		;get 2 HEX digits
	JR	C,SCAN_ABORT
	LD	H,A
	CALL	GET_HEX		;get 2 more HEX digits
	JR	C,SCAN_ABORT
	LD	L,A
	OR	A,A		;To return NC
	RET
	
SCAN_ABORT:
	SCF			;Set Carry flag 
	RET

; ASCII TO BINARY CONVERSION ROUTINE
ASBIN:	SUB	30H 
	CP	0AH 
	RET	M
	SUB	07H 
	RET
;	
;
; PRINT [HL] ON CONSOL
PRINT_HL:
	LD	A,H
	CALL	PRINT_A
	LD	A,L
PRINT_A:
	PUSH	AF
	RRCA
	RRCA
	RRCA
	RRCA
	CALL	SF598
	POP	AF
SF598:	CALL	CONV
	JP	CO

; CONVERT HEX TO ASCII
CONV:	AND	0FH
	ADD	A,90H
	DAA 
	ADC	A,40H
	DAA 
	LD	C,A
	RET
	
; DISPLAY 8 BITS OF [A] (No registers changed)
; DISPLAY BIT PATTERN IN [A]
ZBITS:	PUSH	AF
	PUSH	BC
	PUSH	DE
	LD	E,A		
	LD	B,8
BQ2:	SLA	E	
	LD	A,18H
	ADC	A,A
	LD	C,A
	CALL	CO
	DJNZ	BQ2
	POP	DE
	POP	BC
	POP	AF
	RET

;<<<<<<<<<<<<<<<<<<<<<< MAIN CONSOL OUTPUT ROUTINE >>>>>>>>>>>>>>>>>>>>>>>>>
;
CO:	IN	A,(CONSTAT)	; SD SYSTEMS or PROPELLER VIDIO BOARD PORT
	AND	4H
	JP	Z,CO
	LD	A,C
	OUT	(CONOUT),A
	RET			; RETURN CHARACTER SENT IN [A]
 
;<<<<<<<<<<<<<<<<<<< MAIN CONSOL STATUS ROUTINE >>>>>>>>>>>>>>>>>>>>>>
;
CSTS:	IN	A,(CONSTAT)
	AND	02H
	RET	Z
	XOR	A
	DEC	A		; RETURN WITH 0FFH IN [A] IF SOMETHING
	RET

;<<<<<<<<<<<<<<<<<<<< MAIN CONSOL INPUT ROUTINE >>>>>>>>>>>>>>>>>>>>
;
CI:	IN 	A,(CONSTAT)	; NEED CONSTAT TO CLEAN UP SHIFT KEYS ETC
	AND	02H
	JR	Z,CI
	IN	A,(CONIN)
	AND	7FH
	RET

;---------------------------------------------------------------------------------------
SIGNON:		DB	CR,LF
		DB	CR,LF,'Test for (temporary) SPI_8/EEPROM interface on the Z80_FPGA Board'
		DB	CR,LF,'By John Monahan S100Computers.COM  (V1.0)  7/28/2019'
		DB	CR,LF,'Note: This test is with an SPI AT25128 EEPROM (only)',0
		
SIGNON1:	DB	CR,LF,LF,'---------- Main Menu ---------------------------------------'
		DB	CR,LF,'0.   Write a single byte to a location in the SPI EEPROM.'
		DB	CR,LF,'1.   Fill some or all of the SPI EEPROM with a Byte value.'
		DB	CR,LF,'2.   Write bytes to the EEPROM.'
		DB	CR,LF,'3.   Read bytes from the EEPROM.'
		DB	CR,LF,'4.   Move bytes from EEPROM to S100 bus RAM.'
		DB	CR,LF,'5.   Move bytes from S100 Bus RAM to EEPROM.'
		DB	CR,LF,'ESC  To abort program.',CR,LF,0H

MENU_MSG:	DB	BELL,BELL,CR,LF,'Menu error.',0
FORMAT_ERR_MSG: DB	BELL,BELL,CR,LF,'Data Format error.',0

;-----		
FILL_MSG:	DB	CR,LF,'Enter EEPROM Fill Start Address (0000-3FFFH): ',0H		
MSG0:		DB	CR,LF,'Enter EEPROM Address (0000-3FFFH): ',0H		
FILL_MSG1:	DB	CR,LF,'Enter Number of Fill Bytes (0001-3FFFH): ',0H		
FILL_MSG2:	DB	CR,LF,'Enter Fill Value (00-FFH): ',0H		
FILL_MSG3:	DB	CR,LF,'Press any character to continue. ESC to return to the main menu.',0H	
FILL_MSG4:	DB	CR,LF,'EEPROM Filled.',CR,LF,0H
FILLING_MSG:	DB	CR,LF,'EEPROM being written to. One moment please.',CR,LF,0H
READING_MSG:	DB	CR,LF,'EEPROM being read. One moment please.',CR,LF,0H
	
ERROR_MSG:	DB	BELL,BELL,CR,LF,'Data format error',0
ERROR_MSG2:	DB	BELL,BELL,CR,LF,'Data range error',0


WRITE_MSG:	DB	CR,LF,'Enter EEPROM Write Start Address (0000-007FH): ',0H		
WRITE_MSG1:	DB	CR,LF,'Enter bytes in form:- xx,xx,xx..., CR to stop writing to EEPROM.',CR,LF,0H		
WRITE_MSG2:	DB	CR,LF,LF,'Will write to EEPROM starting at ',0H		
WRITE_MSG3:	DB	'H. Value = (',0
WRITE_MSG3A:	DB	'H).'
		DB	CR,LF,'Press any character to continue. ESC to return to the main menu.',0H	
WRITE_MSG6:	DB	'H bytes with a fill value of ',0H	
WRITE_MSG7:	DB	'Bytes written to EEPROM OK',0H	
WRITE_MSG8:	DB	CR,LF,'Enter byte value ',0H		
WRITE_MSG9:	DB	CR,LF,LF,'Will write single byte to EEPROM at ',0H		
CMD_DONE:	DB	CR,LF,'Command Done.',CR,LF,LF,0

READ_MSG:	DB	CR,LF,'Enter EEPROM Read Start Address (0000-3FFFH): ',0H		
READ_MSG1:	DB	CR,LF,'Enter Number of Bytes to Display (0000-3FFFH): ',0H		
READ_MSG2:	DB	CR,LF,LF,'Will Read bytes from EEPROM starting at ',0H		
READ_MSG2A:	DB	CR,LF,LF,'Will Read Byte from EEPROM at ',0H		
READ_MSG2B:	DB	CR,LF,LF,'Byte = ',0H		
READ_MSG3:	DB	'H',CR,LF
		DB	'Press any keyboard to display. Press ESC to return to the main menu.',CR,LF,LF,0H	
READ_MSG3A:	DB	'H',CR,LF,0H
READ_MSG4:	DB	CR,LF,BELL,'ERROR. FIFO is not empty after loading start address!',CR,LF,0H
READ_MSG5:	DB	CR,LF,BELL,'FIFO I2C Read error!',CR,LF,0H
READ_MSG6:	DB	'H',CR,LF
		DB	'Press any keyboard to continue. Press ESC to return to the main menu.',CR,LF,LF,0H	


MOVE_MSG:	DB	CR,LF,'Enter S100 Bus RAM Write Start Address (0000-FFFFH): ',0H		
MOVE_MSG0:	DB	CR,LF,'Enter EEPROM Read Start Address (0000-3FFFH): ',0H
MOVE_MSG1:	DB	CR,LF,'Enter Number of Bytes to Move (0000-3FFFH): ',0H		
MOVE_MSG2:	DB	CR,LF,LF,'Will Move bytes from EEPROM starting at ',0H		
MOVE_MSG2B:	DB	'H',
		DB	CR,LF,'To the S100 bus RAM starting at ',0H		
MOVE_MSG3:	DB	'H',CR,LF
		DB	'Press any keyboard to start. Press ESC to return to the main menu.',CR,LF,LF,0H
MOVE_MSG7:	DB	'Bytes written to S100 Bus RAM OK',0H	

COPY_MSG:	DB	CR,LF,'Enter S100 Bus RAM Read Start Address (0000-FFFFH): ',0H		
COPY_MSG0:	DB	CR,LF,'Enter EEPROM Write Start Address (0000-3FFFH): ',0H
COPY_MSG1:	DB	CR,LF,'Enter Number of Bytes to Move (0000-3FFFH): ',0H		
COPY_MSG2:	DB	CR,LF,LF,'Will Copy bytes from S100 Bus starting at ',0H		
COPY_MSG2B:	DB	'H',
		DB	CR,LF,'To the EEPROM starting at ',0H		
COPY_MSG3:	DB	'H',CR,LF
		DB	'Press any keyboard to start. Press ESC to return to the main menu.',CR,LF,LF,0H
COPY_MSG7:	DB	'Bytes written to EEPROM OK',0H	


START_OF_STORE:	DB	'>>>>>>>>>>>>>>>>>>>>>>>>>'		
START_STORE:	DW	0H   ;<--- Note:- Low Byte,High Byte
RANGE_STORE:	DW	0H
DATA_STORE:	DB	0H
S100_STORE:	DW	0H
END_OF_STORE:	DB	'<<<<<<<<<<<<<<<<<<<<<<<<<'
		
BYTE_STRING:	DS	80H
;
	DS	40H
STACK:	DB	0H
; END
	



